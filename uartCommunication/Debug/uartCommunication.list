
uartCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003924  08003924  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800392c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003938  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003938  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2b  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fc3  00000000  00000000  0002faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be2b  00000000  00000000  00048a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cde2  00000000  00000000  00054896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000f16c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080038bc 	.word	0x080038bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080038bc 	.word	0x080038bc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa8b 	bl	80009ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f826 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8da 	bl	8000694 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f876 	bl	80005d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//HAL_UART_Transmit(&huart2, "Hello", 6, 10);
HAL_UART_Receive_IT (&huart2, UART1_rxBuffer, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	490c      	ldr	r1, [pc, #48]	; (800051c <main+0x4c>)
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <main+0x50>)
 80004ee:	f001 ff7f 	bl	80023f0 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(UART1_rxBuffer[0] == 'O')
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <main+0x4c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b4f      	cmp	r3, #79	; 0x4f
 80004f8:	d105      	bne.n	8000506 <main+0x36>
	  {

		  HAL_GPIO_WritePin(GPIOB, LD3_Pin,GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x54>)
 8000500:	f000 fdec 	bl	80010dc <HAL_GPIO_WritePin>
 8000504:	e7f5      	b.n	80004f2 <main+0x22>

	  }
	  else if  (UART1_rxBuffer[0] == 'F')
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <main+0x4c>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b46      	cmp	r3, #70	; 0x46
 800050c:	d1f1      	bne.n	80004f2 <main+0x22>
			  {

				  HAL_GPIO_WritePin(GPIOB, LD3_Pin,GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x54>)
 8000514:	f000 fde2 	bl	80010dc <HAL_GPIO_WritePin>
	  if(UART1_rxBuffer[0] == 'O')
 8000518:	e7eb      	b.n	80004f2 <main+0x22>
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028
 8000520:	200000b8 	.word	0x200000b8
 8000524:	48000400 	.word	0x48000400

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */;
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 f9b8 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f000 fdfb 	bl	8001148 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f8fe 	bl	8000758 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f000 fdd6 	bl	800110c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SystemClock_Config+0xa8>)
 8000562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000566:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <SystemClock_Config+0xa8>)
 8000568:	f023 0318 	bic.w	r3, r3, #24
 800056c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000570:	2314      	movs	r3, #20
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fe31 	bl	80011f4 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000598:	f000 f8de 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fa7f 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f8ca 	bl	8000758 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c4:	f001 fe22 	bl	800220c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <MX_USART1_UART_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_USART1_UART_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_USART1_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_USART1_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_USART1_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_USART1_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_USART1_UART_Init+0x58>)
 8000618:	f001 fe08 	bl	800222c <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 f899 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000034 	.word	0x20000034
 8000630:	40013800 	.word	0x40013800

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_USART2_UART_Init+0x58>)
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <MX_USART2_UART_Init+0x5c>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART2_UART_Init+0x58>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000678:	f001 fdd8 	bl	800222c <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000682:	f000 f869 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000b8 	.word	0x200000b8
 8000690:	40004400 	.word	0x40004400

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_GPIO_Init+0x8c>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x90>)
 80006f8:	f000 fcf0 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006fc:	2308      	movs	r3, #8
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_GPIO_Init+0x90>)
 8000714:	f000 fb70 	bl	8000df8 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000400 	.word	0x48000400

08000728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4907      	ldr	r1, [pc, #28]	; (8000750 <HAL_UART_RxCpltCallback+0x28>)
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <HAL_UART_RxCpltCallback+0x2c>)
 8000736:	f001 fe5b 	bl	80023f0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, UART1_rxBuffer, 12, 100);
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	220c      	movs	r2, #12
 800073e:	4904      	ldr	r1, [pc, #16]	; (8000750 <HAL_UART_RxCpltCallback+0x28>)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <HAL_UART_RxCpltCallback+0x2c>)
 8000742:	f001 fdc1 	bl	80022c8 <HAL_UART_Transmit>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	200000b8 	.word	0x200000b8

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6613      	str	r3, [r2, #96]	; 0x60
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6593      	str	r3, [r2, #88]	; 0x58
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b098      	sub	sp, #96	; 0x60
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	2234      	movs	r2, #52	; 0x34
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f86d 	bl	80038ac <memset>
  if(huart->Instance==USART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a4b      	ldr	r2, [pc, #300]	; (8000904 <HAL_UART_MspInit+0x158>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d138      	bne.n	800084e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fb89 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f7ff ffb0 	bl	8000758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f8:	4b43      	ldr	r3, [pc, #268]	; (8000908 <HAL_UART_MspInit+0x15c>)
 80007fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fc:	4a42      	ldr	r2, [pc, #264]	; (8000908 <HAL_UART_MspInit+0x15c>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	6613      	str	r3, [r2, #96]	; 0x60
 8000804:	4b40      	ldr	r3, [pc, #256]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a3c      	ldr	r2, [pc, #240]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <HAL_UART_MspInit+0x15c>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800083a:	2307      	movs	r3, #7
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fad6 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084c:	e055      	b.n	80008fa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <HAL_UART_MspInit+0x160>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d150      	bne.n	80008fa <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fb4b 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000870:	f7ff ff72 	bl	8000758 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_UART_MspInit+0x15c>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6593      	str	r3, [r2, #88]	; 0x58
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_UART_MspInit+0x15c>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_UART_MspInit+0x15c>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_UART_MspInit+0x15c>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b4:	2307      	movs	r3, #7
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 fa99 	bl	8000df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80008d8:	2303      	movs	r3, #3
 80008da:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fa87 	bl	8000df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2026      	movs	r0, #38	; 0x26
 80008f0:	f000 f9cd 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f4:	2026      	movs	r0, #38	; 0x26
 80008f6:	f000 f9e6 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
}
 80008fa:	bf00      	nop
 80008fc:	3760      	adds	r7, #96	; 0x60
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000
 800090c:	40004400 	.word	0x40004400

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f89c 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <USART2_IRQHandler+0x10>)
 800096a:	f001 fd97 	bl	800249c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b8 	.word	0x200000b8

08000978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a0:	f7ff ffea 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ca:	f002 ff4b 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ce:	f7ff fd7f 	bl	80004d0 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	0800392c 	.word	0x0800392c
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	20000140 	.word	0x20000140

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>

080009ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f93d 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f80e 	bl	8000a20 <HAL_InitTick>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	e001      	b.n	8000a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a10:	f7ff fea8 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_InitTick+0x6c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d023      	beq.n	8000a7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_InitTick+0x70>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x6c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f949 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10f      	bne.n	8000a76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d809      	bhi.n	8000a70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f913 	bl	8000c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_InitTick+0x74>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e007      	b.n	8000a80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e004      	b.n	8000a80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e001      	b.n	8000a80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	2000013c 	.word	0x2000013c

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000013c 	.word	0x2000013c

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff29 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff3e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff31 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d008      	beq.n	8000d24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2204      	movs	r2, #4
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e022      	b.n	8000d6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 020e 	bic.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d48:	f003 021c 	and.w	r2, r3, #28
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	2101      	movs	r1, #1
 8000d52:	fa01 f202 	lsl.w	r2, r1, r2
 8000d56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d005      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2204      	movs	r2, #4
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e029      	b.n	8000dee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 020e 	bic.w	r2, r2, #14
 8000da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0201 	bic.w	r2, r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f003 021c 	and.w	r2, r3, #28
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
    }
  }
  return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e14e      	b.n	80010a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8140 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 809a 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f70:	4a54      	ldr	r2, [pc, #336]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6613      	str	r3, [r2, #96]	; 0x60
 8000f78:	4b52      	ldr	r3, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1dc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1d8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1d4>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fcc:	2307      	movs	r3, #7
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fea:	4937      	ldr	r1, [pc, #220]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001046:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f47f aea9 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000c00 	.word	0x48000c00
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_PWREx_GetVoltageRange+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40007000 	.word	0x40007000

08001148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001156:	d130      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001164:	d038      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2232      	movs	r2, #50	; 0x32
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9b      	lsrs	r3, r3, #18
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	e002      	b.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b01      	subs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a0:	d102      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f2      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d110      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e00f      	b.n	80011da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d007      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f000 bc4f 	b.w	8001aa6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4b97      	ldr	r3, [pc, #604]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80e6 	beq.w	80013f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x4c>
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	f040 808d 	bne.w	8001352 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b01      	cmp	r3, #1
 800123c:	f040 8089 	bne.w	8001352 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001240:	4b89      	ldr	r3, [pc, #548]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_RCC_OscConfig+0x66>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 bc26 	b.w	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125e:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <HAL_RCC_OscConfig+0x80>
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001272:	e005      	b.n	8001280 <HAL_RCC_OscConfig+0x8c>
 8001274:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001280:	4293      	cmp	r3, r2
 8001282:	d224      	bcs.n	80012ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fdd9 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f000 bc06 	b.w	8001aa6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	496d      	ldr	r1, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4968      	ldr	r1, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e025      	b.n	800131a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	4960      	ldr	r1, [pc, #384]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	495b      	ldr	r1, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fd98 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3c5      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131a:	f000 fccd 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 800131e:	4602      	mov	r2, r0
 8001320:	4b51      	ldr	r3, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4950      	ldr	r1, [pc, #320]	; (800146c <HAL_RCC_OscConfig+0x278>)
 800132c:	5ccb      	ldrb	r3, [r1, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133a:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb6e 	bl	8000a20 <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d052      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	e3a9      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d032      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fbab 	bl	8000ac0 <HAL_GetTick>
 800136a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fba7 	bl	8000ac0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e392      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a35      	ldr	r2, [pc, #212]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	492b      	ldr	r1, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e01a      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a28      	ldr	r2, [pc, #160]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb78 	bl	8000ac0 <HAL_GetTick>
 80013d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb74 	bl	8000ac0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e35f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e0>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d073      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d063      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15f      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e33c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x250>
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e025      	b.n	8001490 <HAL_RCC_OscConfig+0x29c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d114      	bne.n	8001478 <HAL_RCC_OscConfig+0x284>
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a02      	ldr	r2, [pc, #8]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x29c>
 8001468:	40021000 	.word	0x40021000
 800146c:	080038d4 	.word	0x080038d4
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a8b      	ldr	r2, [pc, #556]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb12 	bl	8000ac0 <HAL_GetTick>
 800149c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb0e 	bl	8000ac0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2f9      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2ac>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fafe 	bl	8000ac0 <HAL_GetTick>
 80014c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fafa 	bl	8000ac0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2e5      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d060      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x314>
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d119      	bne.n	8001536 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d116      	bne.n	8001536 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x32c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e2c2      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	4962      	ldr	r1, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	e040      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d023      	beq.n	8001586 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153e:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5d      	ldr	r2, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fab9 	bl	8000ac0 <HAL_GetTick>
 800154e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fab5 	bl	8000ac0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e2a0      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	494e      	ldr	r1, [pc, #312]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fa95 	bl	8000ac0 <HAL_GetTick>
 8001596:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fa91 	bl	8000ac0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e27c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8082 	beq.w	80016ca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d05f      	beq.n	800168e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d037      	beq.n	8001654 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e254      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01b      	beq.n	800163e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	4a2a      	ldr	r2, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001616:	f7ff fa53 	bl	8000ac0 <HAL_GetTick>
 800161a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fa4f 	bl	8000ac0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b11      	cmp	r3, #17
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e23a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	f023 0210 	bic.w	r2, r3, #16
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	491a      	ldr	r1, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fa2c 	bl	8000ac0 <HAL_GetTick>
 8001668:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fa28 	bl	8000ac0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b11      	cmp	r3, #17
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e213      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ef      	beq.n	800166c <HAL_RCC_OscConfig+0x478>
 800168c:	e01d      	b.n	80016ca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fa0f 	bl	8000ac0 <HAL_GetTick>
 80016a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa0b 	bl	8000ac0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b11      	cmp	r3, #17
 80016b2:	d903      	bls.n	80016bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1f6      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
 80016b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	4ba9      	ldr	r3, [pc, #676]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ed      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80bd 	beq.w	8001852 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016de:	4ba1      	ldr	r3, [pc, #644]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10e      	bne.n	8001708 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b9e      	ldr	r3, [pc, #632]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b9b      	ldr	r3, [pc, #620]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_RCC_OscConfig+0x774>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d118      	bne.n	8001746 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001714:	4b94      	ldr	r3, [pc, #592]	; (8001968 <HAL_RCC_OscConfig+0x774>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a93      	ldr	r2, [pc, #588]	; (8001968 <HAL_RCC_OscConfig+0x774>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001720:	f7ff f9ce 	bl	8000ac0 <HAL_GetTick>
 8001724:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff f9ca 	bl	8000ac0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1b5      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_OscConfig+0x774>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d02c      	beq.n	80017ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001752:	4b84      	ldr	r3, [pc, #528]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001764:	497f      	ldr	r1, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001766:	4313      	orrs	r3, r2
 8001768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	4a79      	ldr	r2, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001788:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	e018      	b.n	80017cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179a:	4b72      	ldr	r3, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	4a70      	ldr	r2, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017aa:	e00f      	b.n	80017cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ac:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f974 	bl	8000ac0 <HAL_GetTick>
 80017d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f970 	bl	8000ac0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e159      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ed      	beq.n	80017dc <HAL_RCC_OscConfig+0x5e8>
 8001800:	e01d      	b.n	800183e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff f95d 	bl	8000ac0 <HAL_GetTick>
 8001806:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff f959 	bl	8000ac0 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e142      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ed      	bne.n	800180a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800182e:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186c:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f923 	bl	8000ac0 <HAL_GetTick>
 800187a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187e:	f7ff f91f 	bl	8000ac0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e10a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ef      	beq.n	800187e <HAL_RCC_OscConfig+0x68a>
 800189e:	e01b      	b.n	80018d8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff f906 	bl	8000ac0 <HAL_GetTick>
 80018b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b8:	f7ff f902 	bl	8000ac0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0ed      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80018cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ef      	bne.n	80018b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80e1 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	f040 80b5 	bne.w	8001a56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d124      	bne.n	800194a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	3b01      	subs	r3, #1
 800190c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d11b      	bne.n	800194a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d113      	bne.n	800194a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d109      	bne.n	800194a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d05f      	beq.n	8001a0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d05a      	beq.n	8001a06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x770>)
 8001956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800195c:	f7ff f8b0 	bl	8000ac0 <HAL_GetTick>
 8001960:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001962:	e00c      	b.n	800197e <HAL_RCC_OscConfig+0x78a>
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f8a8 	bl	8000ac0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e093      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x8c0>)
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800199a:	3a01      	subs	r2, #1
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a4:	0212      	lsls	r2, r2, #8
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ac:	0852      	lsrs	r2, r2, #1
 80019ae:	3a01      	subs	r2, #1
 80019b0:	0552      	lsls	r2, r2, #21
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b8:	0852      	lsrs	r2, r2, #1
 80019ba:	3a01      	subs	r2, #1
 80019bc:	0652      	lsls	r2, r2, #25
 80019be:	430a      	orrs	r2, r1
 80019c0:	493b      	ldr	r1, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019dc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019de:	f7ff f86f 	bl	8000ac0 <HAL_GetTick>
 80019e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f86b 	bl	8000ac0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e056      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a04:	e04e      	b.n	8001aa4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e04d      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d146      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2e:	f7ff f847 	bl	8000ac0 <HAL_GetTick>
 8001a32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f843 	bl	8000ac0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e02e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x842>
 8001a54:	e026      	b.n	8001aa4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d021      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f82a 	bl	8000ac0 <HAL_GetTick>
 8001a6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f826 	bl	8000ac0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e011      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_RCC_OscConfig+0x8bc>)
 8001a94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a98:	f023 0303 	bic.w	r3, r3, #3
 8001a9c:	60d3      	str	r3, [r2, #12]
 8001a9e:	e001      	b.n	8001aa4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f99f808c 	.word	0xf99f808c

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0e7      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b75      	ldr	r3, [pc, #468]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4970      	ldr	r1, [pc, #448]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cf      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d908      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4960      	ldr	r1, [pc, #384]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04c      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d121      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0a6      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e09a      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e08e      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e086      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4943      	ldr	r1, [pc, #268]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba0:	f7fe ff8e 	bl	8000ac0 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7fe ff8a 	bl	8000ac0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e06e      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d208      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d210      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 0207 	bic.w	r2, r3, #7
 8001c14:	4923      	ldr	r1, [pc, #140]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e036      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4918      	ldr	r1, [pc, #96]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d009      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4910      	ldr	r1, [pc, #64]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6c:	f000 f824 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	490b      	ldr	r1, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1f4>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fec5 	bl	8000a20 <HAL_InitTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	080038d4 	.word	0x080038d4
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x34>
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d121      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d11e      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e005      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d14:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d102      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	e004      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d134      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d003      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0xac>
 8001d5c:	e005      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d60:	617b      	str	r3, [r7, #20]
      break;
 8001d62:	e005      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d66:	617b      	str	r3, [r7, #20]
      break;
 8001d68:	e002      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	fb03 f202 	mul.w	r2, r3, r2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0e5b      	lsrs	r3, r3, #25
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	3301      	adds	r3, #1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001db0:	69bb      	ldr	r3, [r7, #24]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080038ec 	.word	0x080038ec
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	007a1200 	.word	0x007a1200

08001dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080038e4 	.word	0x080038e4

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e18:	f7ff ffda 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4904      	ldr	r1, [pc, #16]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	080038e4 	.word	0x080038e4

08001e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e58:	f7ff f968 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001e5c:	6178      	str	r0, [r7, #20]
 8001e5e:	e014      	b.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e78:	f7ff f958 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e90:	d10b      	bne.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d919      	bls.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e9c:	d902      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e013      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e010      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d902      	bls.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e00a      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d102      	bne.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e004      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b70      	cmp	r3, #112	; 0x70
 8001ec6:	d101      	bne.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 0207 	bic.w	r2, r3, #7
 8001ed4:	4909      	ldr	r1, [pc, #36]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 809e 	beq.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a3f      	ldr	r2, [pc, #252]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fdae 	bl	8000ac0 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe fdaa 	bl	8000ac0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7c:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d15a      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01e      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d019      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fd6a 	bl	8000ac0 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fd66 	bl	8000ac0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d902      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	74fb      	strb	r3, [r7, #19]
            break;
 8002006:	e006      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ec      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002016:	7cfb      	ldrb	r3, [r7, #19]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002032:	e009      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	74bb      	strb	r3, [r7, #18]
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002048:	7c7b      	ldrb	r3, [r7, #17]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a6d      	ldr	r2, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0203 	bic.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4964      	ldr	r1, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002088:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 020c 	bic.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	495c      	ldr	r1, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020aa:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4953      	ldr	r1, [pc, #332]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	494b      	ldr	r1, [pc, #300]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4942      	ldr	r1, [pc, #264]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	493a      	ldr	r1, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4931      	ldr	r1, [pc, #196]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4929      	ldr	r1, [pc, #164]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4920      	ldr	r1, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e040      	b.n	80022c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe faac 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fc18 	bl	8002aa0 <UART_SetConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e022      	b.n	80022c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fe66 	bl	8002f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 feed 	bl	8003098 <UART_CheckIdleState>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022dc:	2b20      	cmp	r3, #32
 80022de:	f040 8082 	bne.w	80023e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Transmit+0x26>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07a      	b.n	80023e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_UART_Transmit+0x38>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e073      	b.n	80023e8 <HAL_UART_Transmit+0x120>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2221      	movs	r2, #33	; 0x21
 8002314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fbd3 	bl	8000ac0 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d108      	bne.n	8002348 <HAL_UART_Transmit+0x80>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e003      	b.n	8002350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002358:	e02d      	b.n	80023b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fee0 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e039      	b.n	80023e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002386:	b292      	uxth	r2, r2
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	3302      	adds	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	e008      	b.n	80023a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b292      	uxth	r2, r2
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1cb      	bne.n	800235a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 feac 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e005      	b.n	80023e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002402:	2b20      	cmp	r3, #32
 8002404:	d142      	bne.n	800248c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_UART_Receive_IT+0x22>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e03b      	b.n	800248e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_UART_Receive_IT+0x34>
 8002420:	2302      	movs	r3, #2
 8002422:	e034      	b.n	800248e <HAL_UART_Receive_IT+0x9e>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_UART_Receive_IT+0xa8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d01f      	beq.n	800247c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	613b      	str	r3, [r7, #16]
   return(result);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	69f9      	ldr	r1, [r7, #28]
 800246e:	6a3a      	ldr	r2, [r7, #32]
 8002470:	e841 2300 	strex	r3, r2, [r1]
 8002474:	61bb      	str	r3, [r7, #24]
   return(result);
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e6      	bne.n	800244a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	461a      	mov	r2, r3
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 ff16 	bl	80032b4 <UART_Start_Receive_IT>
 8002488:	4603      	mov	r3, r0
 800248a:	e000      	b.n	800248e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800248c:	2302      	movs	r3, #2
  }
}
 800248e:	4618      	mov	r0, r3
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40008000 	.word	0x40008000

0800249c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ba      	sub	sp, #232	; 0xe8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80024ca:	4013      	ands	r3, r2
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80024d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 82a6 	beq.w	8002a46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
      return;
 8002502:	e2a0      	b.n	8002a46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8117 	beq.w	800273c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800250e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800251a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_UART_IRQHandler+0x298>)
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 810a 	beq.w	800273c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <HAL_UART_IRQHandler+0xbc>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d011      	beq.n	8002588 <HAL_UART_IRQHandler+0xec>
 8002564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_UART_IRQHandler+0x11c>
 8002594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2204      	movs	r2, #4
 80025a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_UART_IRQHandler+0x18a>
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 820c 	beq.w	8002a4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800263e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002676:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d04f      	beq.n	800271e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fee2 	bl	8003448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d141      	bne.n	8002716 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3308      	adds	r3, #8
 8002698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3308      	adds	r3, #8
 80026ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1d9      	bne.n	8002692 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d013      	beq.n	800270e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_UART_IRQHandler+0x29c>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fb3f 	bl	8000d76 <HAL_DMA_Abort_IT>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d017      	beq.n	800272e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002708:	4610      	mov	r0, r2
 800270a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	e00f      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9b0 	bl	8002a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	e00b      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f9ac 	bl	8002a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	e007      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f9a8 	bl	8002a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800272c:	e18d      	b.n	8002a4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	bf00      	nop
    return;
 8002730:	e18b      	b.n	8002a4a <HAL_UART_IRQHandler+0x5ae>
 8002732:	bf00      	nop
 8002734:	04000120 	.word	0x04000120
 8002738:	0800350f 	.word	0x0800350f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	2b01      	cmp	r3, #1
 8002742:	f040 8146 	bne.w	80029d2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 813f 	beq.w	80029d2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8138 	beq.w	80029d2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	f040 80b4 	bne.w	80028e2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002786:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 815f 	beq.w	8002a4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800279a:	429a      	cmp	r2, r3
 800279c:	f080 8157 	bcs.w	8002a4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8085 	bne.w	80028c6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1da      	bne.n	80027bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3308      	adds	r3, #8
 800280c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3308      	adds	r3, #8
 8002826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800282a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800282e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800283c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e1      	bne.n	8002806 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3308      	adds	r3, #8
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3308      	adds	r3, #8
 8002862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800286c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e4      	bne.n	8002886 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fa1a 	bl	8000cfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8d4 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028e0:	e0b5      	b.n	8002a4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a7 	beq.w	8002a52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a2 	beq.w	8002a52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
 8002932:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002938:	e841 2300 	strex	r3, r2, [r1]
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e4      	bne.n	800290e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3308      	adds	r3, #8
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	623b      	str	r3, [r7, #32]
   return(result);
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3308      	adds	r3, #8
 8002964:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002968:	633a      	str	r2, [r7, #48]	; 0x30
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800296e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e3      	bne.n	8002944 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	60fb      	str	r3, [r7, #12]
   return(result);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0310 	bic.w	r3, r3, #16
 80029a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	69b9      	ldr	r1, [r7, #24]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	617b      	str	r3, [r7, #20]
   return(result);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e4      	bne.n	800298e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f85c 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <HAL_UART_IRQHandler+0x560>
 80029de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 ff2a 	bl	800384e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029fa:	e02d      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
    }
    return;
 8002a24:	e017      	b.n	8002a56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fd7b 	bl	800353a <UART_EndTransmit_IT>
    return;
 8002a44:	e008      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002a46:	bf00      	nop
 8002a48:	e006      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002a4a:	bf00      	nop
 8002a4c:	e004      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002a4e:	bf00      	nop
 8002a50:	e002      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002a52:	bf00      	nop
 8002a54:	e000      	b.n	8002a58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002a56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002a58:	37e8      	adds	r7, #232	; 0xe8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b9e      	ldr	r3, [pc, #632]	; (8002d48 <UART_SetConfig+0x2a8>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a93      	ldr	r2, [pc, #588]	; (8002d4c <UART_SetConfig+0x2ac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a8a      	ldr	r2, [pc, #552]	; (8002d50 <UART_SetConfig+0x2b0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d126      	bne.n	8002b78 <UART_SetConfig+0xd8>
 8002b2a:	4b8a      	ldr	r3, [pc, #552]	; (8002d54 <UART_SetConfig+0x2b4>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d81b      	bhi.n	8002b70 <UART_SetConfig+0xd0>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <UART_SetConfig+0xa0>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b69 	.word	0x08002b69
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b56:	e0ab      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5e:	e0a7      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002b60:	2304      	movs	r3, #4
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b66:	e0a3      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002b68:	2308      	movs	r3, #8
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6e:	e09f      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002b70:	2310      	movs	r3, #16
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b76:	e09b      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a76      	ldr	r2, [pc, #472]	; (8002d58 <UART_SetConfig+0x2b8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d138      	bne.n	8002bf4 <UART_SetConfig+0x154>
 8002b82:	4b74      	ldr	r3, [pc, #464]	; (8002d54 <UART_SetConfig+0x2b4>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d82d      	bhi.n	8002bec <UART_SetConfig+0x14c>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <UART_SetConfig+0xf8>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002bed 	.word	0x08002bed
 8002ba0:	08002bed 	.word	0x08002bed
 8002ba4:	08002bed 	.word	0x08002bed
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002bed 	.word	0x08002bed
 8002bb0:	08002bed 	.word	0x08002bed
 8002bb4:	08002bed 	.word	0x08002bed
 8002bb8:	08002bd5 	.word	0x08002bd5
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002bed 	.word	0x08002bed
 8002bc4:	08002bed 	.word	0x08002bed
 8002bc8:	08002be5 	.word	0x08002be5
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd2:	e06d      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bda:	e069      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002be2:	e065      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002be4:	2308      	movs	r3, #8
 8002be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bea:	e061      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002bec:	2310      	movs	r3, #16
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf2:	e05d      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <UART_SetConfig+0x2bc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d125      	bne.n	8002c4a <UART_SetConfig+0x1aa>
 8002bfe:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <UART_SetConfig+0x2b4>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d016      	beq.n	8002c3a <UART_SetConfig+0x19a>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d818      	bhi.n	8002c42 <UART_SetConfig+0x1a2>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d00a      	beq.n	8002c2a <UART_SetConfig+0x18a>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d814      	bhi.n	8002c42 <UART_SetConfig+0x1a2>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <UART_SetConfig+0x182>
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d008      	beq.n	8002c32 <UART_SetConfig+0x192>
 8002c20:	e00f      	b.n	8002c42 <UART_SetConfig+0x1a2>
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c28:	e042      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c30:	e03e      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c32:	2304      	movs	r3, #4
 8002c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c38:	e03a      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c40:	e036      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c42:	2310      	movs	r3, #16
 8002c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c48:	e032      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3f      	ldr	r2, [pc, #252]	; (8002d4c <UART_SetConfig+0x2ac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d12a      	bne.n	8002caa <UART_SetConfig+0x20a>
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <UART_SetConfig+0x2b4>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c62:	d01a      	beq.n	8002c9a <UART_SetConfig+0x1fa>
 8002c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c68:	d81b      	bhi.n	8002ca2 <UART_SetConfig+0x202>
 8002c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c6e:	d00c      	beq.n	8002c8a <UART_SetConfig+0x1ea>
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c74:	d815      	bhi.n	8002ca2 <UART_SetConfig+0x202>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <UART_SetConfig+0x1e2>
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d008      	beq.n	8002c92 <UART_SetConfig+0x1f2>
 8002c80:	e00f      	b.n	8002ca2 <UART_SetConfig+0x202>
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c88:	e012      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c90:	e00e      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c92:	2304      	movs	r3, #4
 8002c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c98:	e00a      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca0:	e006      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca8:	e002      	b.n	8002cb0 <UART_SetConfig+0x210>
 8002caa:	2310      	movs	r3, #16
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <UART_SetConfig+0x2ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	f040 808a 	bne.w	8002dd0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d824      	bhi.n	8002d0e <UART_SetConfig+0x26e>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x22c>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002d0f 	.word	0x08002d0f
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002d0f 	.word	0x08002d0f
 8002cdc:	08002cff 	.word	0x08002cff
 8002ce0:	08002d0f 	.word	0x08002d0f
 8002ce4:	08002d0f 	.word	0x08002d0f
 8002ce8:	08002d0f 	.word	0x08002d0f
 8002cec:	08002d07 	.word	0x08002d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7ff f87a 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61f8      	str	r0, [r7, #28]
        break;
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <UART_SetConfig+0x2c0>)
 8002cfa:	61fb      	str	r3, [r7, #28]
        break;
 8002cfc:	e00d      	b.n	8002d1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfe:	f7fe ffdb 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002d02:	61f8      	str	r0, [r7, #28]
        break;
 8002d04:	e009      	b.n	8002d1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	61fb      	str	r3, [r7, #28]
        break;
 8002d0c:	e005      	b.n	8002d1a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8109 	beq.w	8002f34 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d305      	bcc.n	8002d3e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d912      	bls.n	8002d64 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d44:	e0f6      	b.n	8002f34 <UART_SetConfig+0x494>
 8002d46:	bf00      	nop
 8002d48:	efff69f3 	.word	0xefff69f3
 8002d4c:	40008000 	.word	0x40008000
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2200      	movs	r2, #0
 8002d68:	461c      	mov	r4, r3
 8002d6a:	4615      	mov	r5, r2
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	022b      	lsls	r3, r5, #8
 8002d76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d7a:	0222      	lsls	r2, r4, #8
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	6849      	ldr	r1, [r1, #4]
 8002d80:	0849      	lsrs	r1, r1, #1
 8002d82:	2000      	movs	r0, #0
 8002d84:	4688      	mov	r8, r1
 8002d86:	4681      	mov	r9, r0
 8002d88:	eb12 0a08 	adds.w	sl, r2, r8
 8002d8c:	eb43 0b09 	adc.w	fp, r3, r9
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d9e:	4650      	mov	r0, sl
 8002da0:	4659      	mov	r1, fp
 8002da2:	f7fd fa13 	bl	80001cc <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4613      	mov	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db4:	d308      	bcc.n	8002dc8 <UART_SetConfig+0x328>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dbc:	d204      	bcs.n	8002dc8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e0b5      	b.n	8002f34 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dce:	e0b1      	b.n	8002f34 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd8:	d15d      	bne.n	8002e96 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d827      	bhi.n	8002e32 <UART_SetConfig+0x392>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <UART_SetConfig+0x348>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e0d 	.word	0x08002e0d
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	08002e1d 	.word	0x08002e1d
 8002df4:	08002e33 	.word	0x08002e33
 8002df8:	08002e23 	.word	0x08002e23
 8002dfc:	08002e33 	.word	0x08002e33
 8002e00:	08002e33 	.word	0x08002e33
 8002e04:	08002e33 	.word	0x08002e33
 8002e08:	08002e2b 	.word	0x08002e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f7fe ffec 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8002e10:	61f8      	str	r0, [r7, #28]
        break;
 8002e12:	e014      	b.n	8002e3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e14:	f7fe fffe 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002e18:	61f8      	str	r0, [r7, #28]
        break;
 8002e1a:	e010      	b.n	8002e3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <UART_SetConfig+0x4b0>)
 8002e1e:	61fb      	str	r3, [r7, #28]
        break;
 8002e20:	e00d      	b.n	8002e3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e22:	f7fe ff49 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002e26:	61f8      	str	r0, [r7, #28]
        break;
 8002e28:	e009      	b.n	8002e3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2e:	61fb      	str	r3, [r7, #28]
        break;
 8002e30:	e005      	b.n	8002e3e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d077      	beq.n	8002f34 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005a      	lsls	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d916      	bls.n	8002e8e <UART_SetConfig+0x3ee>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d212      	bcs.n	8002e8e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	8afb      	ldrh	r3, [r7, #22]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	8afa      	ldrh	r2, [r7, #22]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	e052      	b.n	8002f34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e94:	e04e      	b.n	8002f34 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d827      	bhi.n	8002eee <UART_SetConfig+0x44e>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0x404>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002ed1 	.word	0x08002ed1
 8002eac:	08002ed9 	.word	0x08002ed9
 8002eb0:	08002eef 	.word	0x08002eef
 8002eb4:	08002edf 	.word	0x08002edf
 8002eb8:	08002eef 	.word	0x08002eef
 8002ebc:	08002eef 	.word	0x08002eef
 8002ec0:	08002eef 	.word	0x08002eef
 8002ec4:	08002ee7 	.word	0x08002ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f7fe ff8e 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	61f8      	str	r0, [r7, #28]
        break;
 8002ece:	e014      	b.n	8002efa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ed0:	f7fe ffa0 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002ed4:	61f8      	str	r0, [r7, #28]
        break;
 8002ed6:	e010      	b.n	8002efa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <UART_SetConfig+0x4b0>)
 8002eda:	61fb      	str	r3, [r7, #28]
        break;
 8002edc:	e00d      	b.n	8002efa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ede:	f7fe feeb 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002ee2:	61f8      	str	r0, [r7, #28]
        break;
 8002ee4:	e009      	b.n	8002efa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eea:	61fb      	str	r3, [r7, #28]
        break;
 8002eec:	e005      	b.n	8002efa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d019      	beq.n	8002f34 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	085a      	lsrs	r2, r3, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	441a      	add	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d909      	bls.n	8002f2e <UART_SetConfig+0x48e>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d205      	bcs.n	8002f2e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e002      	b.n	8002f34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4e:	bf00      	nop
 8002f50:	00f42400 	.word	0x00f42400

08002f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01a      	beq.n	800306a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003052:	d10a      	bne.n	800306a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030a8:	f7fd fd0a 	bl	8000ac0 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d10e      	bne.n	80030da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f82d 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e023      	b.n	8003122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d10e      	bne.n	8003106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f817 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e00d      	b.n	8003122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b09c      	sub	sp, #112	; 0x70
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313a:	e0a5      	b.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	f000 80a1 	beq.w	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fd fcbb 	bl	8000ac0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <UART_WaitOnFlagUntilTimeout+0x32>
 8003156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003158:	2b00      	cmp	r3, #0
 800315a:	d13e      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e6      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	663b      	str	r3, [r7, #96]	; 0x60
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3308      	adds	r3, #8
 80031ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e067      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04f      	beq.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f6:	d147      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003200:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	613b      	str	r3, [r7, #16]
   return(result);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	66bb      	str	r3, [r7, #104]	; 0x68
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003254:	623a      	str	r2, [r7, #32]
 8003256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	61bb      	str	r3, [r7, #24]
   return(result);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e010      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	f43f af4a 	beq.w	800313c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3770      	adds	r7, #112	; 0x70
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b097      	sub	sp, #92	; 0x5c
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d10e      	bne.n	8003306 <UART_Start_Receive_IT+0x52>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <UART_Start_Receive_IT+0x48>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032fa:	e02d      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	22ff      	movs	r2, #255	; 0xff
 8003300:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003304:	e028      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <UART_Start_Receive_IT+0x76>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <UART_Start_Receive_IT+0x6c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800331e:	e01b      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	227f      	movs	r2, #127	; 0x7f
 8003324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003328:	e016      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003332:	d10d      	bne.n	8003350 <UART_Start_Receive_IT+0x9c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <UART_Start_Receive_IT+0x92>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	227f      	movs	r2, #127	; 0x7f
 8003340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003344:	e008      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	223f      	movs	r2, #63	; 0x3f
 800334a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800334e:	e003      	b.n	8003358 <UART_Start_Receive_IT+0xa4>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2222      	movs	r2, #34	; 0x22
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	657b      	str	r3, [r7, #84]	; 0x54
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003386:	64ba      	str	r2, [r7, #72]	; 0x48
 8003388:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800338c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	d107      	bne.n	80033b4 <UART_Start_Receive_IT+0x100>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a24      	ldr	r2, [pc, #144]	; (8003440 <UART_Start_Receive_IT+0x18c>)
 80033b0:	665a      	str	r2, [r3, #100]	; 0x64
 80033b2:	e002      	b.n	80033ba <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <UART_Start_Receive_IT+0x190>)
 80033b8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e6      	bne.n	80033ca <UART_Start_Receive_IT+0x116>
 80033fc:	e018      	b.n	8003430 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	613b      	str	r3, [r7, #16]
   return(result);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f043 0320 	orr.w	r3, r3, #32
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	69f9      	ldr	r1, [r7, #28]
 8003422:	6a3a      	ldr	r2, [r7, #32]
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	61bb      	str	r3, [r7, #24]
   return(result);
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	375c      	adds	r7, #92	; 0x5c
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	080036ef 	.word	0x080036ef
 8003444:	0800358f 	.word	0x0800358f

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b095      	sub	sp, #84	; 0x54
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
 8003470:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e6      	bne.n	8003450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	61fb      	str	r3, [r7, #28]
   return(result);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d118      	bne.n	80034f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 0310 	bic.w	r3, r3, #16
 80034d2:	647b      	str	r3, [r7, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6979      	ldr	r1, [r7, #20]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e6      	bne.n	80034be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003502:	bf00      	nop
 8003504:	3754      	adds	r7, #84	; 0x54
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff faa1 	bl	8002a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b088      	sub	sp, #32
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6979      	ldr	r1, [r7, #20]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	613b      	str	r3, [r7, #16]
   return(result);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fa6d 	bl	8002a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003586:	bf00      	nop
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b096      	sub	sp, #88	; 0x58
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800359c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a4:	2b22      	cmp	r3, #34	; 0x22
 80035a6:	f040 8094 	bne.w	80036d2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035b8:	b2d9      	uxtb	r1, r3
 80035ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	400a      	ands	r2, r1
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d179      	bne.n	80036e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003606:	653b      	str	r3, [r7, #80]	; 0x50
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003610:	647b      	str	r3, [r7, #68]	; 0x44
 8003612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	623b      	str	r3, [r7, #32]
   return(result);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003644:	633a      	str	r2, [r7, #48]	; 0x30
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800364a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	2b01      	cmp	r3, #1
 800366a:	d12e      	bne.n	80036ca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	617b      	str	r3, [r7, #20]
   return(result);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d103      	bne.n	80036ba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2210      	movs	r2, #16
 80036b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff f9e0 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036c8:	e00d      	b.n	80036e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f82c 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 80036d0:	e009      	b.n	80036e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	8b1b      	ldrh	r3, [r3, #24]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	b292      	uxth	r2, r2
 80036e4:	831a      	strh	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	3758      	adds	r7, #88	; 0x58
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b096      	sub	sp, #88	; 0x58
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003704:	2b22      	cmp	r3, #34	; 0x22
 8003706:	f040 8094 	bne.w	8003832 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800371a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800371e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003722:	4013      	ands	r3, r2
 8003724:	b29a      	uxth	r2, r3
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	1c9a      	adds	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d179      	bne.n	8003846 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
 8003772:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e6      	bne.n	8003752 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	61fb      	str	r3, [r7, #28]
   return(result);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d12e      	bne.n	800382a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0310 	bic.w	r3, r3, #16
 80037e6:	647b      	str	r3, [r7, #68]	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	613b      	str	r3, [r7, #16]
   return(result);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d103      	bne.n	800381a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2210      	movs	r2, #16
 8003818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff f930 	bl	8002a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003828:	e00d      	b.n	8003846 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fc ff7c 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 8003830:	e009      	b.n	8003846 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	8b1b      	ldrh	r3, [r3, #24]
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0208 	orr.w	r2, r2, #8
 8003842:	b292      	uxth	r2, r2
 8003844:	831a      	strh	r2, [r3, #24]
}
 8003846:	bf00      	nop
 8003848:	3758      	adds	r7, #88	; 0x58
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	4d0d      	ldr	r5, [pc, #52]	; (800389c <__libc_init_array+0x38>)
 8003868:	4c0d      	ldr	r4, [pc, #52]	; (80038a0 <__libc_init_array+0x3c>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	2600      	movs	r6, #0
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	4d0b      	ldr	r5, [pc, #44]	; (80038a4 <__libc_init_array+0x40>)
 8003876:	4c0c      	ldr	r4, [pc, #48]	; (80038a8 <__libc_init_array+0x44>)
 8003878:	f000 f820 	bl	80038bc <_init>
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	2600      	movs	r6, #0
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	08003924 	.word	0x08003924
 80038a0:	08003924 	.word	0x08003924
 80038a4:	08003924 	.word	0x08003924
 80038a8:	08003928 	.word	0x08003928

080038ac <memset>:
 80038ac:	4402      	add	r2, r0
 80038ae:	4603      	mov	r3, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
