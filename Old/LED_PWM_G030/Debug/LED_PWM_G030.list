
LED_PWM_G030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002668  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b4  080027b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027b4  080027b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b4  080027b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080027c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080027c8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f8d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001675  00000000  00000000  00028fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ca4  00000000  00000000  0002b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abf3  00000000  00000000  0003f604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008000b  00000000  00000000  0004a1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002380  00000000  00000000  000ca254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002708 	.word	0x08002708

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002708 	.word	0x08002708

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa76 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f838 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f94a 	bl	80004bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f87c 	bl	8000324 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <main+0x6c>)
 800022e:	2100      	movs	r1, #0
 8000230:	0018      	movs	r0, r3
 8000232:	f001 fabf 	bl	80017b4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(CH1_DC < 65535)
 8000236:	e00c      	b.n	8000252 <main+0x3a>
	          {
	              TIM1->CCR1 = CH1_DC;
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x70>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <main+0x74>)
 800023e:	635a      	str	r2, [r3, #52]	; 0x34
	              CH1_DC += 70;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x70>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3346      	adds	r3, #70	; 0x46
 8000246:	001a      	movs	r2, r3
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <main+0x70>)
 800024a:	601a      	str	r2, [r3, #0]
	              HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fae3 	bl	8000818 <HAL_Delay>
	  while(CH1_DC < 65535)
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0x70>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0x78>)
 8000258:	4293      	cmp	r3, r2
 800025a:	dded      	ble.n	8000238 <main+0x20>
	          }
	          while(CH1_DC > 0)
 800025c:	e00c      	b.n	8000278 <main+0x60>
	          {
	              TIM1->CCR1 = CH1_DC;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x70>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <main+0x74>)
 8000264:	635a      	str	r2, [r3, #52]	; 0x34
	              CH1_DC -= 70;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x70>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b46      	subs	r3, #70	; 0x46
 800026c:	001a      	movs	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <main+0x70>)
 8000270:	601a      	str	r2, [r3, #0]
	              HAL_Delay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f000 fad0 	bl	8000818 <HAL_Delay>
	          while(CH1_DC > 0)
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <main+0x70>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	dcee      	bgt.n	800025e <main+0x46>
	  while(CH1_DC < 65535)
 8000280:	e7e7      	b.n	8000252 <main+0x3a>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000002c 	.word	0x2000002c
 8000288:	20000028 	.word	0x20000028
 800028c:	40012c00 	.word	0x40012c00
 8000290:	0000fffe 	.word	0x0000fffe

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b093      	sub	sp, #76	; 0x4c
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2414      	movs	r4, #20
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2334      	movs	r3, #52	; 0x34
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fa27 	bl	80026f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	2310      	movs	r3, #16
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 fa20 	bl	80026f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fce7 	bl	8000c90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2202      	movs	r2, #2
 80002c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	0052      	lsls	r2, r2, #1
 80002ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2240      	movs	r2, #64	; 0x40
 80002da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fd13 	bl	8000d10 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ee:	f000 f913 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f001 f80e 	bl	8001330 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000318:	f000 f8fe 	bl	8000518 <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b013      	add	sp, #76	; 0x4c
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09c      	sub	sp, #112	; 0x70
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2360      	movs	r3, #96	; 0x60
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 f9df 	bl	80026f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	2354      	movs	r3, #84	; 0x54
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	230c      	movs	r3, #12
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 f9d7 	bl	80026f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	2338      	movs	r3, #56	; 0x38
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	231c      	movs	r3, #28
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 f9cf 	bl	80026f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	2334      	movs	r3, #52	; 0x34
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 f9c8 	bl	80026f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000368:	4b51      	ldr	r3, [pc, #324]	; (80004b0 <MX_TIM1_Init+0x18c>)
 800036a:	4a52      	ldr	r2, [pc, #328]	; (80004b4 <MX_TIM1_Init+0x190>)
 800036c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800036e:	4b50      	ldr	r3, [pc, #320]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000374:	4b4e      	ldr	r3, [pc, #312]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800037a:	4b4d      	ldr	r3, [pc, #308]	; (80004b0 <MX_TIM1_Init+0x18c>)
 800037c:	4a4e      	ldr	r2, [pc, #312]	; (80004b8 <MX_TIM1_Init+0x194>)
 800037e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000380:	4b4b      	ldr	r3, [pc, #300]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000386:	4b4a      	ldr	r3, [pc, #296]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800038c:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <MX_TIM1_Init+0x18c>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000392:	4b47      	ldr	r3, [pc, #284]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f955 	bl	8001644 <HAL_TIM_Base_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800039e:	f000 f8bb 	bl	8000518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a2:	2160      	movs	r1, #96	; 0x60
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0152      	lsls	r2, r2, #5
 80003aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ac:	187a      	adds	r2, r7, r1
 80003ae:	4b40      	ldr	r3, [pc, #256]	; (80004b0 <MX_TIM1_Init+0x18c>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fbd6 	bl	8001b64 <HAL_TIM_ConfigClockSource>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80003bc:	f000 f8ac 	bl	8000518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <MX_TIM1_Init+0x18c>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f996 	bl	80016f4 <HAL_TIM_PWM_Init>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80003cc:	f000 f8a4 	bl	8000518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d0:	2154      	movs	r1, #84	; 0x54
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e4:	187a      	adds	r2, r7, r1
 80003e6:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <MX_TIM1_Init+0x18c>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f002 f858 	bl	80024a0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80003f4:	f000 f890 	bl	8000518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f8:	2138      	movs	r1, #56	; 0x38
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2260      	movs	r2, #96	; 0x60
 80003fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000424:	1879      	adds	r1, r7, r1
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_TIM1_Init+0x18c>)
 8000428:	2200      	movs	r2, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f001 fa9a 	bl	8001964 <HAL_TIM_PWM_ConfigChannel>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000434:	f000 f870 	bl	8000518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	0192      	lsls	r2, r2, #6
 800045c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	0492      	lsls	r2, r2, #18
 8000476:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800048a:	1d3a      	adds	r2, r7, #4
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_TIM1_Init+0x18c>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f867 	bl	8002564 <HAL_TIMEx_ConfigBreakDeadTime>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800049a:	f000 f83d 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <MX_TIM1_Init+0x18c>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 f8af 	bl	8000604 <HAL_TIM_MspPostInit>

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b01c      	add	sp, #112	; 0x70
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	40012c00 	.word	0x40012c00
 80004b8:	0000ffff 	.word	0x0000ffff

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_GPIO_Init+0x58>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_GPIO_Init+0x58>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_GPIO_Init+0x58>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_GPIO_Init+0x58>)
 80004dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_GPIO_Init+0x58>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_GPIO_Init+0x58>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_GPIO_Init+0x58>)
 80004f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_GPIO_Init+0x58>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_GPIO_Init+0x58>)
 8000500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000502:	2202      	movs	r2, #2
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b004      	add	sp, #16
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	641a      	str	r2, [r3, #64]	; 0x40
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0549      	lsls	r1, r1, #21
 800054c:	430a      	orrs	r2, r1
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_MspInit+0x44>)
 8000552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	055b      	lsls	r3, r3, #21
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	2414      	movs	r4, #20
 8000576:	193b      	adds	r3, r7, r4
 8000578:	0018      	movs	r0, r3
 800057a:	2314      	movs	r3, #20
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f002 f8ba 	bl	80026f8 <memset>
  if(htim_base->Instance==TIM1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <HAL_TIM_Base_MspInit+0x8c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d12f      	bne.n	80005ee <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 8000590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0109      	lsls	r1, r1, #4
 8000598:	430a      	orrs	r2, r1
 800059a:	641a      	str	r2, [r3, #64]	; 0x40
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 800059e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	4013      	ands	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 80005ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 80005b0:	2102      	movs	r1, #2
 80005b2:	430a      	orrs	r2, r1
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_TIM_Base_MspInit+0x90>)
 80005b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ba:	2202      	movs	r2, #2
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2208      	movs	r2, #8
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2202      	movs	r2, #2
 80005ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_TIM_Base_MspInit+0x94>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f000 f9ed 	bl	80009c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b00b      	add	sp, #44	; 0x2c
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40012c00 	.word	0x40012c00
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000400 	.word	0x50000400

08000604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b089      	sub	sp, #36	; 0x24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	240c      	movs	r4, #12
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	2314      	movs	r3, #20
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f002 f86e 	bl	80026f8 <memset>
  if(htim->Instance==TIM1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_MspPostInit+0x74>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d123      	bne.n	800066e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_TIM_MspPostInit+0x78>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_TIM_MspPostInit+0x78>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_TIM_MspPostInit+0x78>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2202      	movs	r2, #2
 800064c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	187a      	adds	r2, r7, r1
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 f9ad 	bl	80009c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b009      	add	sp, #36	; 0x24
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40012c00 	.word	0x40012c00
 800067c:	40021000 	.word	0x40021000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f89c 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006bc:	f7ff fff7 	bl	80006ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e6:	f001 ffe3 	bl	80026b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006ea:	f7ff fd95 	bl	8000218 <main>

080006ee <LoopForever>:

LoopForever:
  b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   r0, =_estack
 80006f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006fc:	080027bc 	.word	0x080027bc
  ldr r2, =_sbss
 8000700:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000704:	2000007c 	.word	0x2000007c

08000708 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_IRQHandler>
	...

0800070c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_Init+0x3c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <HAL_Init+0x3c>)
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	0049      	lsls	r1, r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000726:	2003      	movs	r0, #3
 8000728:	f000 f810 	bl	800074c <HAL_InitTick>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d003      	beq.n	8000738 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	e001      	b.n	800073c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fef4 	bl	8000524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000754:	230f      	movs	r3, #15
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_InitTick+0x88>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02b      	beq.n	80007bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_InitTick+0x8c>)
 8000766:	681c      	ldr	r4, [r3, #0]
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_InitTick+0x88>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	0019      	movs	r1, r3
 800076e:	23fa      	movs	r3, #250	; 0xfa
 8000770:	0098      	lsls	r0, r3, #2
 8000772:	f7ff fcc5 	bl	8000100 <__udivsi3>
 8000776:	0003      	movs	r3, r0
 8000778:	0019      	movs	r1, r3
 800077a:	0020      	movs	r0, r4
 800077c:	f7ff fcc0 	bl	8000100 <__udivsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f913 	bl	80009ae <HAL_SYSTICK_Config>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d112      	bne.n	80007b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d80a      	bhi.n	80007a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	2301      	movs	r3, #1
 8000796:	425b      	negs	r3, r3
 8000798:	2200      	movs	r2, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f8f2 	bl	8000984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_InitTick+0x90>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e00d      	b.n	80007c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007a8:	230f      	movs	r3, #15
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e008      	b.n	80007c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b2:	230f      	movs	r3, #15
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e003      	b.n	80007c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007bc:	230f      	movs	r3, #15
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b005      	add	sp, #20
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x1c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	001a      	movs	r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_IncTick+0x20>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	18d2      	adds	r2, r2, r3
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <HAL_IncTick+0x20>)
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000078 	.word	0x20000078

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_GetTick+0x10>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000078 	.word	0x20000078

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff fff0 	bl	8000804 <HAL_GetTick>
 8000824:	0003      	movs	r3, r0
 8000826:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001a      	movs	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	189b      	adds	r3, r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	f7ff ffe0 	bl	8000804 <HAL_GetTick>
 8000844:	0002      	movs	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b7f      	cmp	r3, #127	; 0x7f
 8000874:	d828      	bhi.n	80008c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000876:	4a2f      	ldr	r2, [pc, #188]	; (8000934 <__NVIC_SetPriority+0xd4>)
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b25b      	sxtb	r3, r3
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	33c0      	adds	r3, #192	; 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	589b      	ldr	r3, [r3, r2]
 8000886:	1dfa      	adds	r2, r7, #7
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	0011      	movs	r1, r2
 800088c:	2203      	movs	r2, #3
 800088e:	400a      	ands	r2, r1
 8000890:	00d2      	lsls	r2, r2, #3
 8000892:	21ff      	movs	r1, #255	; 0xff
 8000894:	4091      	lsls	r1, r2
 8000896:	000a      	movs	r2, r1
 8000898:	43d2      	mvns	r2, r2
 800089a:	401a      	ands	r2, r3
 800089c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	019b      	lsls	r3, r3, #6
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	401a      	ands	r2, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0018      	movs	r0, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	4003      	ands	r3, r0
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b4:	481f      	ldr	r0, [pc, #124]	; (8000934 <__NVIC_SetPriority+0xd4>)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	089b      	lsrs	r3, r3, #2
 80008be:	430a      	orrs	r2, r1
 80008c0:	33c0      	adds	r3, #192	; 0xc0
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008c6:	e031      	b.n	800092c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <__NVIC_SetPriority+0xd8>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0019      	movs	r1, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	400b      	ands	r3, r1
 80008d4:	3b08      	subs	r3, #8
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3306      	adds	r3, #6
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1dfa      	adds	r2, r7, #7
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	400a      	ands	r2, r1
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	401a      	ands	r2, r3
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	2303      	movs	r3, #3
 800090a:	4003      	ands	r3, r0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <__NVIC_SetPriority+0xd8>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001c      	movs	r4, r3
 8000918:	230f      	movs	r3, #15
 800091a:	4023      	ands	r3, r4
 800091c:	3b08      	subs	r3, #8
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	430a      	orrs	r2, r1
 8000922:	3306      	adds	r3, #6
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	18c3      	adds	r3, r0, r3
 8000928:	3304      	adds	r3, #4
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b003      	add	sp, #12
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	045b      	lsls	r3, r3, #17
 800094c:	429a      	cmp	r2, r3
 800094e:	d301      	bcc.n	8000954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000950:	2301      	movs	r3, #1
 8000952:	e010      	b.n	8000976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <SysTick_Config+0x44>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	3a01      	subs	r2, #1
 800095a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	2103      	movs	r1, #3
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff ff7c 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SysTick_Config+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SysTick_Config+0x44>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	210f      	movs	r1, #15
 8000990:	187b      	adds	r3, r7, r1
 8000992:	1c02      	adds	r2, r0, #0
 8000994:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff5d 	bl	8000860 <__NVIC_SetPriority>
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ffbf 	bl	800093c <SysTick_Config>
 80009be:	0003      	movs	r3, r0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d6:	e147      	b.n	8000c68 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <HAL_GPIO_Init+0x28>
 80009ee:	e138      	b.n	8000c62 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d005      	beq.n	8000a08 <HAL_GPIO_Init+0x40>
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d130      	bne.n	8000a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	2201      	movs	r2, #1
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d017      	beq.n	8000aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d123      	bne.n	8000afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3208      	adds	r2, #8
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	58d3      	ldr	r3, [r2, r3]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2107      	movs	r1, #7
 8000ade:	400b      	ands	r3, r1
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	6939      	ldr	r1, [r7, #16]
 8000af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2203      	movs	r2, #3
 8000b18:	401a      	ands	r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	23c0      	movs	r3, #192	; 0xc0
 8000b34:	029b      	lsls	r3, r3, #10
 8000b36:	4013      	ands	r3, r2
 8000b38:	d100      	bne.n	8000b3c <HAL_GPIO_Init+0x174>
 8000b3a:	e092      	b.n	8000c62 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b3c:	4a50      	ldr	r2, [pc, #320]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3318      	adds	r3, #24
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	589b      	ldr	r3, [r3, r2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	220f      	movs	r2, #15
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	23a0      	movs	r3, #160	; 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0x1ca>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a45      	ldr	r2, [pc, #276]	; (8000c84 <HAL_GPIO_Init+0x2bc>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00d      	beq.n	8000b8e <HAL_GPIO_Init+0x1c6>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <HAL_GPIO_Init+0x2c0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d007      	beq.n	8000b8a <HAL_GPIO_Init+0x1c2>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a43      	ldr	r2, [pc, #268]	; (8000c8c <HAL_GPIO_Init+0x2c4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_GPIO_Init+0x1be>
 8000b82:	2303      	movs	r3, #3
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x1cc>
 8000b86:	2305      	movs	r3, #5
 8000b88:	e004      	b.n	8000b94 <HAL_GPIO_Init+0x1cc>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_Init+0x1cc>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_GPIO_Init+0x1cc>
 8000b92:	2300      	movs	r3, #0
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	2103      	movs	r1, #3
 8000b98:	400a      	ands	r2, r1
 8000b9a:	00d2      	lsls	r2, r2, #3
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ba4:	4936      	ldr	r1, [pc, #216]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3318      	adds	r3, #24
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	035b      	lsls	r3, r3, #13
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	039b      	lsls	r3, r3, #14
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000c08:	2384      	movs	r3, #132	; 0x84
 8000c0a:	58d3      	ldr	r3, [r2, r3]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c2c:	4914      	ldr	r1, [pc, #80]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	2284      	movs	r2, #132	; 0x84
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	58d3      	ldr	r3, [r2, r3]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c5a:	4909      	ldr	r1, [pc, #36]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	40da      	lsrs	r2, r3
 8000c70:	1e13      	subs	r3, r2, #0
 8000c72:	d000      	beq.n	8000c76 <HAL_GPIO_Init+0x2ae>
 8000c74:	e6b0      	b.n	80009d8 <HAL_GPIO_Init+0x10>
  }
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b006      	add	sp, #24
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021800 	.word	0x40021800
 8000c84:	50000400 	.word	0x50000400
 8000c88:	50000800 	.word	0x50000800
 8000c8c:	50000c00 	.word	0x50000c00

08000c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d11f      	bne.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	0013      	movs	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4912      	ldr	r1, [pc, #72]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fa1c 	bl	8000100 <__udivsi3>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cce:	e008      	b.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e001      	b.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e009      	b.n	8000cf6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	401a      	ands	r2, r3
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d0ed      	beq.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40007000 	.word	0x40007000
 8000d04:	fffff9ff 	.word	0xfffff9ff
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	000f4240 	.word	0x000f4240

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e2f3      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d100      	bne.n	8000d2e <HAL_RCC_OscConfig+0x1e>
 8000d2c:	e07c      	b.n	8000e28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2e:	4bc3      	ldr	r3, [pc, #780]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2238      	movs	r2, #56	; 0x38
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d38:	4bc0      	ldr	r3, [pc, #768]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b10      	cmp	r3, #16
 8000d46:	d102      	bne.n	8000d4e <HAL_RCC_OscConfig+0x3e>
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d002      	beq.n	8000d54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d10b      	bne.n	8000d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	4bb9      	ldr	r3, [pc, #740]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d062      	beq.n	8000e26 <HAL_RCC_OscConfig+0x116>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d15e      	bne.n	8000e26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e2ce      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	025b      	lsls	r3, r3, #9
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d107      	bne.n	8000d88 <HAL_RCC_OscConfig+0x78>
 8000d78:	4bb0      	ldr	r3, [pc, #704]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4baf      	ldr	r3, [pc, #700]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e020      	b.n	8000dca <HAL_RCC_OscConfig+0xba>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	02db      	lsls	r3, r3, #11
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d10e      	bne.n	8000db2 <HAL_RCC_OscConfig+0xa2>
 8000d94:	4ba9      	ldr	r3, [pc, #676]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4ba8      	ldr	r3, [pc, #672]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	02c9      	lsls	r1, r1, #11
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	4ba6      	ldr	r3, [pc, #664]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4ba5      	ldr	r3, [pc, #660]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0249      	lsls	r1, r1, #9
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e00b      	b.n	8000dca <HAL_RCC_OscConfig+0xba>
 8000db2:	4ba2      	ldr	r3, [pc, #648]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4ba1      	ldr	r3, [pc, #644]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000db8:	49a1      	ldr	r1, [pc, #644]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000dba:	400a      	ands	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	4b9f      	ldr	r3, [pc, #636]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b9e      	ldr	r3, [pc, #632]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	499f      	ldr	r1, [pc, #636]	; (8001044 <HAL_RCC_OscConfig+0x334>)
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d014      	beq.n	8000dfc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fd17 	bl	8000804 <HAL_GetTick>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fd12 	bl	8000804 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e28d      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dee:	4b93      	ldr	r3, [pc, #588]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4013      	ands	r3, r2
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0xcc>
 8000dfa:	e015      	b.n	8000e28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fd02 	bl	8000804 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fcfd 	bl	8000804 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	; 0x64
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e278      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e18:	4b88      	ldr	r3, [pc, #544]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	d1f0      	bne.n	8000e06 <HAL_RCC_OscConfig+0xf6>
 8000e24:	e000      	b.n	8000e28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d100      	bne.n	8000e34 <HAL_RCC_OscConfig+0x124>
 8000e32:	e099      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e34:	4b81      	ldr	r3, [pc, #516]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e3e:	4b7f      	ldr	r3, [pc, #508]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2203      	movs	r2, #3
 8000e44:	4013      	ands	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x144>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d002      	beq.n	8000e5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d135      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e5a:	4b78      	ldr	r3, [pc, #480]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x162>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e24b      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b72      	ldr	r3, [pc, #456]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	4a74      	ldr	r2, [pc, #464]	; (8001048 <HAL_RCC_OscConfig+0x338>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	021a      	lsls	r2, r3, #8
 8000e82:	4b6e      	ldr	r3, [pc, #440]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e84:	430a      	orrs	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d112      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a6e      	ldr	r2, [pc, #440]	; (800104c <HAL_RCC_OscConfig+0x33c>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	0019      	movs	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	4b67      	ldr	r3, [pc, #412]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	0adb      	lsrs	r3, r3, #11
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	4013      	ands	r3, r2
 8000eac:	4a68      	ldr	r2, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x340>)
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <HAL_RCC_OscConfig+0x344>)
 8000eb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000eb4:	4b68      	ldr	r3, [pc, #416]	; (8001058 <HAL_RCC_OscConfig+0x348>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff fc47 	bl	800074c <HAL_InitTick>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d051      	beq.n	8000f66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e221      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d030      	beq.n	8000f30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a5e      	ldr	r2, [pc, #376]	; (800104c <HAL_RCC_OscConfig+0x33c>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	4b57      	ldr	r3, [pc, #348]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ee2:	4b56      	ldr	r3, [pc, #344]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b55      	ldr	r3, [pc, #340]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0049      	lsls	r1, r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc88 	bl	8000804 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fc83 	bl	8000804 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1fe      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4a4a      	ldr	r2, [pc, #296]	; (8001048 <HAL_RCC_OscConfig+0x338>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	021a      	lsls	r2, r3, #8
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	e01b      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b41      	ldr	r3, [pc, #260]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f36:	4949      	ldr	r1, [pc, #292]	; (800105c <HAL_RCC_OscConfig+0x34c>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc62 	bl	8000804 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fc5d 	bl	8000804 <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e1d8      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4013      	ands	r3, r2
 8000f62:	d1f0      	bne.n	8000f46 <HAL_RCC_OscConfig+0x236>
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d047      	beq.n	8001002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2238      	movs	r2, #56	; 0x38
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b18      	cmp	r3, #24
 8000f7c:	d10a      	bne.n	8000f94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d03c      	beq.n	8001002 <HAL_RCC_OscConfig+0x2f2>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d138      	bne.n	8001002 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e1ba      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d019      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc2c 	bl	8000804 <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fc27 	bl	8000804 <HAL_GetTick>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1a2      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d0f1      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2a2>
 8000fce:	e018      	b.n	8001002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	438a      	bics	r2, r1
 8000fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fc12 	bl	8000804 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fc0d 	bl	8000804 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e188      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	4013      	ands	r3, r2
 8001000:	d1f1      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2204      	movs	r2, #4
 8001008:	4013      	ands	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_RCC_OscConfig+0x2fe>
 800100c:	e0c6      	b.n	800119c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100e:	231f      	movs	r3, #31
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2238      	movs	r2, #56	; 0x38
 800101c:	4013      	ands	r3, r2
 800101e:	2b20      	cmp	r3, #32
 8001020:	d11e      	bne.n	8001060 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_RCC_OscConfig+0x32c>)
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	2202      	movs	r2, #2
 8001028:	4013      	ands	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_RCC_OscConfig+0x31e>
 800102c:	e0b6      	b.n	800119c <HAL_RCC_OscConfig+0x48c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d000      	beq.n	8001038 <HAL_RCC_OscConfig+0x328>
 8001036:	e0b1      	b.n	800119c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e166      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
 800103c:	40021000 	.word	0x40021000
 8001040:	fffeffff 	.word	0xfffeffff
 8001044:	fffbffff 	.word	0xfffbffff
 8001048:	ffff80ff 	.word	0xffff80ff
 800104c:	ffffc7ff 	.word	0xffffc7ff
 8001050:	00f42400 	.word	0x00f42400
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004
 800105c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001060:	4bac      	ldr	r3, [pc, #688]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	055b      	lsls	r3, r3, #21
 8001068:	4013      	ands	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x360>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x362>
 8001070:	2300      	movs	r3, #0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d011      	beq.n	800109a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4ba7      	ldr	r3, [pc, #668]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800107a:	4ba6      	ldr	r3, [pc, #664]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0549      	lsls	r1, r1, #21
 8001080:	430a      	orrs	r2, r1
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
 8001084:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001092:	231f      	movs	r3, #31
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109a:	4b9f      	ldr	r3, [pc, #636]	; (8001318 <HAL_RCC_OscConfig+0x608>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	d11a      	bne.n	80010dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010a6:	4b9c      	ldr	r3, [pc, #624]	; (8001318 <HAL_RCC_OscConfig+0x608>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b9b      	ldr	r3, [pc, #620]	; (8001318 <HAL_RCC_OscConfig+0x608>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0049      	lsls	r1, r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fba6 	bl	8000804 <HAL_GetTick>
 80010b8:	0003      	movs	r3, r0
 80010ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff fba1 	bl	8000804 <HAL_GetTick>
 80010c2:	0002      	movs	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e11c      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d0:	4b91      	ldr	r3, [pc, #580]	; (8001318 <HAL_RCC_OscConfig+0x608>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3e2>
 80010e4:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80010e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010e8:	4b8a      	ldr	r3, [pc, #552]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80010f0:	e01c      	b.n	800112c <HAL_RCC_OscConfig+0x41c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x404>
 80010fa:	4b86      	ldr	r3, [pc, #536]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80010fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010fe:	4b85      	ldr	r3, [pc, #532]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001100:	2104      	movs	r1, #4
 8001102:	430a      	orrs	r2, r1
 8001104:	65da      	str	r2, [r3, #92]	; 0x5c
 8001106:	4b83      	ldr	r3, [pc, #524]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800110c:	2101      	movs	r1, #1
 800110e:	430a      	orrs	r2, r1
 8001110:	65da      	str	r2, [r3, #92]	; 0x5c
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0x41c>
 8001114:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001118:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800111a:	2101      	movs	r1, #1
 800111c:	438a      	bics	r2, r1
 800111e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001124:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001126:	2104      	movs	r1, #4
 8001128:	438a      	bics	r2, r1
 800112a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d014      	beq.n	800115e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fb66 	bl	8000804 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113c:	e009      	b.n	8001152 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb61 	bl	8000804 <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	4a74      	ldr	r2, [pc, #464]	; (800131c <HAL_RCC_OscConfig+0x60c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e0db      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001152:	4b70      	ldr	r3, [pc, #448]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x42e>
 800115c:	e013      	b.n	8001186 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115e:	f7ff fb51 	bl	8000804 <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001166:	e009      	b.n	800117c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff fb4c 	bl	8000804 <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4a6a      	ldr	r2, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x60c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0c6      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800117c:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001186:	231f      	movs	r3, #31
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d105      	bne.n	800119c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001194:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001196:	4962      	ldr	r1, [pc, #392]	; (8001320 <HAL_RCC_OscConfig+0x610>)
 8001198:	400a      	ands	r2, r1
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d100      	bne.n	80011a6 <HAL_RCC_OscConfig+0x496>
 80011a4:	e0b0      	b.n	8001308 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a6:	4b5b      	ldr	r3, [pc, #364]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2238      	movs	r2, #56	; 0x38
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4a4>
 80011b2:	e078      	b.n	80012a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d153      	bne.n	8001264 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80011c2:	4958      	ldr	r1, [pc, #352]	; (8001324 <HAL_RCC_OscConfig+0x614>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb1c 	bl	8000804 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fb17 	bl	8000804 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e092      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	049b      	lsls	r3, r3, #18
 80011ec:	4013      	ands	r3, r2
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_RCC_OscConfig+0x618>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	431a      	orrs	r2, r3
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0449      	lsls	r1, r1, #17
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	0549      	lsls	r1, r1, #21
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fae3 	bl	8000804 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fade 	bl	8000804 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e059      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	049b      	lsls	r3, r3, #18
 800125e:	4013      	ands	r3, r2
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x534>
 8001262:	e051      	b.n	8001308 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800126a:	492e      	ldr	r1, [pc, #184]	; (8001324 <HAL_RCC_OscConfig+0x614>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fac8 	bl	8000804 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fac3 	bl	8000804 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e03e      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	049b      	lsls	r3, r3, #18
 8001294:	4013      	ands	r3, r2
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 800129e:	4923      	ldr	r1, [pc, #140]	; (800132c <HAL_RCC_OscConfig+0x61c>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	e030      	b.n	8001308 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e02b      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_RCC_OscConfig+0x604>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2203      	movs	r2, #3
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d11e      	bne.n	8001304 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2270      	movs	r2, #112	; 0x70
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d117      	bne.n	8001304 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	23fe      	movs	r3, #254	; 0xfe
 80012d8:	01db      	lsls	r3, r3, #7
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d10e      	bne.n	8001304 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	23f8      	movs	r3, #248	; 0xf8
 80012ea:	039b      	lsls	r3, r3, #14
 80012ec:	401a      	ands	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	0f5b      	lsrs	r3, r3, #29
 80012fa:	075a      	lsls	r2, r3, #29
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b008      	add	sp, #32
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	40021000 	.word	0x40021000
 8001318:	40007000 	.word	0x40007000
 800131c:	00001388 	.word	0x00001388
 8001320:	efffffff 	.word	0xefffffff
 8001324:	feffffff 	.word	0xfeffffff
 8001328:	1fc1808c 	.word	0x1fc1808c
 800132c:	effefffc 	.word	0xeffefffc

08001330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0e9      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b76      	ldr	r3, [pc, #472]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2207      	movs	r2, #7
 800134a:	4013      	ands	r3, r2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d91e      	bls.n	8001390 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2207      	movs	r2, #7
 8001358:	4393      	bics	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001364:	f7ff fa4e 	bl	8000804 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800136c:	e009      	b.n	8001382 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136e:	f7ff fa49 	bl	8000804 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4a6a      	ldr	r2, [pc, #424]	; (8001524 <HAL_RCC_ClockConfig+0x1f4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0ca      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2207      	movs	r2, #7
 8001388:	4013      	ands	r3, r2
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d1ee      	bne.n	800136e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2202      	movs	r2, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d015      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2204      	movs	r2, #4
 80013a0:	4013      	ands	r3, r2
 80013a2:	d006      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013a4:	4b60      	ldr	r3, [pc, #384]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013aa:	21e0      	movs	r1, #224	; 0xe0
 80013ac:	01c9      	lsls	r1, r1, #7
 80013ae:	430a      	orrs	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <HAL_RCC_ClockConfig+0x1fc>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	d057      	beq.n	8001480 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d12b      	bne.n	800143c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e097      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	049b      	lsls	r3, r3, #18
 80013f8:	4013      	ands	r3, r2
 80013fa:	d11f      	bne.n	800143c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e08b      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d107      	bne.n	8001418 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4013      	ands	r3, r2
 8001412:	d113      	bne.n	800143c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e07f      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d106      	bne.n	800142e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d108      	bne.n	800143c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e074      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 8001430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e06d      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2207      	movs	r2, #7
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001450:	f7ff f9d8 	bl	8000804 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001458:	e009      	b.n	800146e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145a:	f7ff f9d3 	bl	8000804 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <HAL_RCC_ClockConfig+0x1f4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e054      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2238      	movs	r2, #56	; 0x38
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	429a      	cmp	r2, r3
 800147e:	d1ec      	bne.n	800145a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2207      	movs	r2, #7
 8001486:	4013      	ands	r3, r2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d21e      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2207      	movs	r2, #7
 8001494:	4393      	bics	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014a0:	f7ff f9b0 	bl	8000804 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a8:	e009      	b.n	80014be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014aa:	f7ff f9ab 	bl	8000804 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_RCC_ClockConfig+0x1f4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e02c      	b.n	8001518 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_RCC_ClockConfig+0x1f0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2207      	movs	r2, #7
 80014c4:	4013      	ands	r3, r2
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1ee      	bne.n	80014aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d009      	beq.n	80014ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_RCC_ClockConfig+0x200>)
 80014dc:	4013      	ands	r3, r2
 80014de:	0019      	movs	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014ea:	f000 f829 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 80014ee:	0001      	movs	r1, r0
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCC_ClockConfig+0x1f8>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	220f      	movs	r2, #15
 80014f8:	401a      	ands	r2, r3
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_RCC_ClockConfig+0x204>)
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	58d3      	ldr	r3, [r2, r3]
 8001500:	221f      	movs	r2, #31
 8001502:	4013      	ands	r3, r2
 8001504:	000a      	movs	r2, r1
 8001506:	40da      	lsrs	r2, r3
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x208>)
 800150a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x20c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff f91b 	bl	800074c <HAL_InitTick>
 8001516:	0003      	movs	r3, r0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40022000 	.word	0x40022000
 8001524:	00001388 	.word	0x00001388
 8001528:	40021000 	.word	0x40021000
 800152c:	fffff0ff 	.word	0xfffff0ff
 8001530:	ffff8fff 	.word	0xffff8fff
 8001534:	08002720 	.word	0x08002720
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2238      	movs	r2, #56	; 0x38
 800154c:	4013      	ands	r3, r2
 800154e:	d10f      	bne.n	8001570 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0adb      	lsrs	r3, r3, #11
 8001556:	2207      	movs	r2, #7
 8001558:	4013      	ands	r3, r2
 800155a:	2201      	movs	r2, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	4835      	ldr	r0, [pc, #212]	; (800163c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001566:	f7fe fdcb 	bl	8000100 <__udivsi3>
 800156a:	0003      	movs	r3, r0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	e05d      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2238      	movs	r2, #56	; 0x38
 8001576:	4013      	ands	r3, r2
 8001578:	2b08      	cmp	r3, #8
 800157a:	d102      	bne.n	8001582 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_GetSysClockFreq+0x100>)
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	e054      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	; 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	2b10      	cmp	r3, #16
 800158c:	d138      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	2207      	movs	r2, #7
 80015a0:	4013      	ands	r3, r2
 80015a2:	3301      	adds	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d10d      	bne.n	80015c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	4824      	ldr	r0, [pc, #144]	; (8001640 <HAL_RCC_GetSysClockFreq+0x100>)
 80015b0:	f7fe fda6 	bl	8000100 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	0019      	movs	r1, r3
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	227f      	movs	r2, #127	; 0x7f
 80015c0:	4013      	ands	r3, r2
 80015c2:	434b      	muls	r3, r1
 80015c4:	617b      	str	r3, [r7, #20]
        break;
 80015c6:	e00d      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <HAL_RCC_GetSysClockFreq+0xfc>)
 80015cc:	f7fe fd98 	bl	8000100 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	0019      	movs	r1, r3
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	227f      	movs	r2, #127	; 0x7f
 80015dc:	4013      	ands	r3, r2
 80015de:	434b      	muls	r3, r1
 80015e0:	617b      	str	r3, [r7, #20]
        break;
 80015e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0f5b      	lsrs	r3, r3, #29
 80015ea:	2207      	movs	r2, #7
 80015ec:	4013      	ands	r3, r2
 80015ee:	3301      	adds	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	6978      	ldr	r0, [r7, #20]
 80015f6:	f7fe fd83 	bl	8000100 <__udivsi3>
 80015fa:	0003      	movs	r3, r0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	e015      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2238      	movs	r2, #56	; 0x38
 8001606:	4013      	ands	r3, r2
 8001608:	2b20      	cmp	r3, #32
 800160a:	d103      	bne.n	8001614 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	e00b      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2238      	movs	r2, #56	; 0x38
 800161a:	4013      	ands	r3, r2
 800161c:	2b18      	cmp	r3, #24
 800161e:	d103      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001620:	23fa      	movs	r3, #250	; 0xfa
 8001622:	01db      	lsls	r3, r3, #7
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e001      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800162c:	693b      	ldr	r3, [r7, #16]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b006      	add	sp, #24
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	00f42400 	.word	0x00f42400
 8001640:	007a1200 	.word	0x007a1200

08001644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e04a      	b.n	80016ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223d      	movs	r2, #61	; 0x3d
 800165a:	5c9b      	ldrb	r3, [r3, r2]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	223c      	movs	r2, #60	; 0x3c
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7fe ff7d 	bl	800056c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	223d      	movs	r2, #61	; 0x3d
 8001676:	2102      	movs	r1, #2
 8001678:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	0019      	movs	r1, r3
 8001684:	0010      	movs	r0, r2
 8001686:	f000 fb43 	bl	8001d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2248      	movs	r2, #72	; 0x48
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	223e      	movs	r2, #62	; 0x3e
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2241      	movs	r2, #65	; 0x41
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2242      	movs	r2, #66	; 0x42
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2243      	movs	r2, #67	; 0x43
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2244      	movs	r2, #68	; 0x44
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2245      	movs	r2, #69	; 0x45
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2246      	movs	r2, #70	; 0x46
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2247      	movs	r2, #71	; 0x47
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	223d      	movs	r2, #61	; 0x3d
 80016e6:	2101      	movs	r1, #1
 80016e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e04a      	b.n	800179c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	223d      	movs	r2, #61	; 0x3d
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	223c      	movs	r2, #60	; 0x3c
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f841 	bl	80017a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	223d      	movs	r2, #61	; 0x3d
 8001726:	2102      	movs	r1, #2
 8001728:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3304      	adds	r3, #4
 8001732:	0019      	movs	r1, r3
 8001734:	0010      	movs	r0, r2
 8001736:	f000 faeb 	bl	8001d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2248      	movs	r2, #72	; 0x48
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	223e      	movs	r2, #62	; 0x3e
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	223f      	movs	r2, #63	; 0x3f
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2241      	movs	r2, #65	; 0x41
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2242      	movs	r2, #66	; 0x42
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2243      	movs	r2, #67	; 0x43
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2244      	movs	r2, #68	; 0x44
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2245      	movs	r2, #69	; 0x45
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2246      	movs	r2, #70	; 0x46
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2247      	movs	r2, #71	; 0x47
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223d      	movs	r2, #61	; 0x3d
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <HAL_TIM_PWM_Start+0x22>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	223e      	movs	r2, #62	; 0x3e
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e037      	b.n	8001846 <HAL_TIM_PWM_Start+0x92>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d108      	bne.n	80017ee <HAL_TIM_PWM_Start+0x3a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	223f      	movs	r2, #63	; 0x3f
 80017e0:	5c9b      	ldrb	r3, [r3, r2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	1e5a      	subs	r2, r3, #1
 80017e8:	4193      	sbcs	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	e02b      	b.n	8001846 <HAL_TIM_PWM_Start+0x92>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d108      	bne.n	8001806 <HAL_TIM_PWM_Start+0x52>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	5c9b      	ldrb	r3, [r3, r2]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	4193      	sbcs	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	e01f      	b.n	8001846 <HAL_TIM_PWM_Start+0x92>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d108      	bne.n	800181e <HAL_TIM_PWM_Start+0x6a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2241      	movs	r2, #65	; 0x41
 8001810:	5c9b      	ldrb	r3, [r3, r2]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	4193      	sbcs	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	e013      	b.n	8001846 <HAL_TIM_PWM_Start+0x92>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b10      	cmp	r3, #16
 8001822:	d108      	bne.n	8001836 <HAL_TIM_PWM_Start+0x82>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2242      	movs	r2, #66	; 0x42
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	4193      	sbcs	r3, r2
 8001832:	b2db      	uxtb	r3, r3
 8001834:	e007      	b.n	8001846 <HAL_TIM_PWM_Start+0x92>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2243      	movs	r2, #67	; 0x43
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	4193      	sbcs	r3, r2
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e07b      	b.n	8001946 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <HAL_TIM_PWM_Start+0xaa>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	223e      	movs	r2, #62	; 0x3e
 8001858:	2102      	movs	r1, #2
 800185a:	5499      	strb	r1, [r3, r2]
 800185c:	e023      	b.n	80018a6 <HAL_TIM_PWM_Start+0xf2>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d104      	bne.n	800186e <HAL_TIM_PWM_Start+0xba>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223f      	movs	r2, #63	; 0x3f
 8001868:	2102      	movs	r1, #2
 800186a:	5499      	strb	r1, [r3, r2]
 800186c:	e01b      	b.n	80018a6 <HAL_TIM_PWM_Start+0xf2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d104      	bne.n	800187e <HAL_TIM_PWM_Start+0xca>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	2102      	movs	r1, #2
 800187a:	5499      	strb	r1, [r3, r2]
 800187c:	e013      	b.n	80018a6 <HAL_TIM_PWM_Start+0xf2>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d104      	bne.n	800188e <HAL_TIM_PWM_Start+0xda>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2241      	movs	r2, #65	; 0x41
 8001888:	2102      	movs	r1, #2
 800188a:	5499      	strb	r1, [r3, r2]
 800188c:	e00b      	b.n	80018a6 <HAL_TIM_PWM_Start+0xf2>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b10      	cmp	r3, #16
 8001892:	d104      	bne.n	800189e <HAL_TIM_PWM_Start+0xea>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2242      	movs	r2, #66	; 0x42
 8001898:	2102      	movs	r1, #2
 800189a:	5499      	strb	r1, [r3, r2]
 800189c:	e003      	b.n	80018a6 <HAL_TIM_PWM_Start+0xf2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2243      	movs	r2, #67	; 0x43
 80018a2:	2102      	movs	r1, #2
 80018a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 fdd2 	bl	8002458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a25      	ldr	r2, [pc, #148]	; (8001950 <HAL_TIM_PWM_Start+0x19c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_TIM_PWM_Start+0x11e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <HAL_TIM_PWM_Start+0x1a0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_TIM_PWM_Start+0x11e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_TIM_PWM_Start+0x1a4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_PWM_Start+0x122>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_TIM_PWM_Start+0x124>
 80018d6:	2300      	movs	r3, #0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0209      	lsls	r1, r1, #8
 80018ea:	430a      	orrs	r2, r1
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_TIM_PWM_Start+0x19c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d004      	beq.n	8001902 <HAL_TIM_PWM_Start+0x14e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_TIM_PWM_Start+0x1a8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d116      	bne.n	8001930 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_TIM_PWM_Start+0x1ac>)
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b06      	cmp	r3, #6
 8001912:	d016      	beq.n	8001942 <HAL_TIM_PWM_Start+0x18e>
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	429a      	cmp	r2, r3
 800191c:	d011      	beq.n	8001942 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800192e:	e008      	b.n	8001942 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e000      	b.n	8001944 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001942:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40012c00 	.word	0x40012c00
 8001954:	40014400 	.word	0x40014400
 8001958:	40014800 	.word	0x40014800
 800195c:	40000400 	.word	0x40000400
 8001960:	00010007 	.word	0x00010007

08001964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2317      	movs	r3, #23
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	223c      	movs	r2, #60	; 0x3c
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001982:	2302      	movs	r3, #2
 8001984:	e0e5      	b.n	8001b52 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	223c      	movs	r2, #60	; 0x3c
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b14      	cmp	r3, #20
 8001992:	d900      	bls.n	8001996 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001994:	e0d1      	b.n	8001b3a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	009a      	lsls	r2, r3, #2
 800199a:	4b70      	ldr	r3, [pc, #448]	; (8001b5c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	0011      	movs	r1, r2
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fa1c 	bl	8001de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2108      	movs	r1, #8
 80019bc:	430a      	orrs	r2, r1
 80019be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2104      	movs	r1, #4
 80019cc:	438a      	bics	r2, r1
 80019ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6999      	ldr	r1, [r3, #24]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	619a      	str	r2, [r3, #24]
      break;
 80019e2:	e0af      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fa7b 	bl	8001ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0109      	lsls	r1, r1, #4
 8001a00:	430a      	orrs	r2, r1
 8001a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4954      	ldr	r1, [pc, #336]	; (8001b60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6999      	ldr	r1, [r3, #24]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	021a      	lsls	r2, r3, #8
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	619a      	str	r2, [r3, #24]
      break;
 8001a28:	e08c      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 fad6 	bl	8001fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2108      	movs	r1, #8
 8001a44:	430a      	orrs	r2, r1
 8001a46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2104      	movs	r1, #4
 8001a54:	438a      	bics	r2, r1
 8001a56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69d9      	ldr	r1, [r3, #28]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	61da      	str	r2, [r3, #28]
      break;
 8001a6a:	e06b      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fb37 	bl	80020e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0109      	lsls	r1, r1, #4
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4932      	ldr	r1, [pc, #200]	; (8001b60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69d9      	ldr	r1, [r3, #28]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	021a      	lsls	r2, r3, #8
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	61da      	str	r2, [r3, #28]
      break;
 8001ab0:	e048      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	0011      	movs	r1, r2
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fb78 	bl	80021b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2108      	movs	r1, #8
 8001acc:	430a      	orrs	r2, r1
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2104      	movs	r1, #4
 8001adc:	438a      	bics	r2, r1
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001af2:	e027      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 fbb1 	bl	8002264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0109      	lsls	r1, r1, #4
 8001b10:	430a      	orrs	r2, r1
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4910      	ldr	r1, [pc, #64]	; (8001b60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	021a      	lsls	r2, r3, #8
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b38:	e004      	b.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001b3a:	2317      	movs	r3, #23
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
      break;
 8001b42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	223c      	movs	r2, #60	; 0x3c
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b006      	add	sp, #24
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	08002760 	.word	0x08002760
 8001b60:	fffffbff 	.word	0xfffffbff

08001b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	230f      	movs	r3, #15
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223c      	movs	r2, #60	; 0x3c
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x20>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0bc      	b.n	8001cfe <HAL_TIM_ConfigClockSource+0x19a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	223c      	movs	r2, #60	; 0x3c
 8001b88:	2101      	movs	r1, #1
 8001b8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	223d      	movs	r2, #61	; 0x3d
 8001b90:	2102      	movs	r1, #2
 8001b92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4a5a      	ldr	r2, [pc, #360]	; (8001d08 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <HAL_TIM_ConfigClockSource+0x1a8>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0192      	lsls	r2, r2, #6
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_TIM_ConfigClockSource+0xde>
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	0192      	lsls	r2, r2, #6
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d900      	bls.n	8001bca <HAL_TIM_ConfigClockSource+0x66>
 8001bc8:	e088      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0152      	lsls	r2, r2, #5
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <HAL_TIM_ConfigClockSource+0x70>
 8001bd2:	e088      	b.n	8001ce6 <HAL_TIM_ConfigClockSource+0x182>
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0152      	lsls	r2, r2, #5
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d900      	bls.n	8001bde <HAL_TIM_ConfigClockSource+0x7a>
 8001bdc:	e07e      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001bde:	2b70      	cmp	r3, #112	; 0x70
 8001be0:	d018      	beq.n	8001c14 <HAL_TIM_ConfigClockSource+0xb0>
 8001be2:	d900      	bls.n	8001be6 <HAL_TIM_ConfigClockSource+0x82>
 8001be4:	e07a      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001be6:	2b60      	cmp	r3, #96	; 0x60
 8001be8:	d04f      	beq.n	8001c8a <HAL_TIM_ConfigClockSource+0x126>
 8001bea:	d900      	bls.n	8001bee <HAL_TIM_ConfigClockSource+0x8a>
 8001bec:	e076      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001bee:	2b50      	cmp	r3, #80	; 0x50
 8001bf0:	d03b      	beq.n	8001c6a <HAL_TIM_ConfigClockSource+0x106>
 8001bf2:	d900      	bls.n	8001bf6 <HAL_TIM_ConfigClockSource+0x92>
 8001bf4:	e072      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d057      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x146>
 8001bfa:	d900      	bls.n	8001bfe <HAL_TIM_ConfigClockSource+0x9a>
 8001bfc:	e06e      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001bfe:	2b30      	cmp	r3, #48	; 0x30
 8001c00:	d063      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x166>
 8001c02:	d86b      	bhi.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d060      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x166>
 8001c08:	d868      	bhi.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d05d      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x166>
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d05b      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x166>
 8001c12:	e063      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f000 fbf8 	bl	8002418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2277      	movs	r2, #119	; 0x77
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
      break;
 8001c40:	e052      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6899      	ldr	r1, [r3, #8]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f000 fbe1 	bl	8002418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	01c9      	lsls	r1, r1, #7
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
      break;
 8001c68:	e03e      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	001a      	movs	r2, r3
 8001c78:	f000 fb52 	bl	8002320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2150      	movs	r1, #80	; 0x50
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fbac 	bl	80023e0 <TIM_ITRx_SetConfig>
      break;
 8001c88:	e02e      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	001a      	movs	r2, r3
 8001c98:	f000 fb70 	bl	800237c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2160      	movs	r1, #96	; 0x60
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fb9c 	bl	80023e0 <TIM_ITRx_SetConfig>
      break;
 8001ca8:	e01e      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	f000 fb32 	bl	8002320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2140      	movs	r1, #64	; 0x40
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 fb8c 	bl	80023e0 <TIM_ITRx_SetConfig>
      break;
 8001cc8:	e00e      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	0010      	movs	r0, r2
 8001cd6:	f000 fb83 	bl	80023e0 <TIM_ITRx_SetConfig>
      break;
 8001cda:	e005      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
      break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001ce6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	223d      	movs	r2, #61	; 0x3d
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	223c      	movs	r2, #60	; 0x3c
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5499      	strb	r1, [r3, r2]

  return status;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	ffceff88 	.word	0xffceff88
 8001d0c:	ffff00ff 	.word	0xffff00ff

08001d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <TIM_Base_SetConfig+0xc0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <TIM_Base_SetConfig+0x20>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <TIM_Base_SetConfig+0xc4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d108      	bne.n	8001d42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2270      	movs	r2, #112	; 0x70
 8001d34:	4393      	bics	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <TIM_Base_SetConfig+0xc0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00f      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <TIM_Base_SetConfig+0xc4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00b      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <TIM_Base_SetConfig+0xc8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <TIM_Base_SetConfig+0xcc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0x5a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <TIM_Base_SetConfig+0xd0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d108      	bne.n	8001d7c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <TIM_Base_SetConfig+0xd4>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	4393      	bics	r3, r2
 8001d82:	001a      	movs	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <TIM_Base_SetConfig+0xc0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <TIM_Base_SetConfig+0xaa>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <TIM_Base_SetConfig+0xcc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d003      	beq.n	8001dba <TIM_Base_SetConfig+0xaa>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <TIM_Base_SetConfig+0xd0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d103      	bne.n	8001dc2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	615a      	str	r2, [r3, #20]
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b004      	add	sp, #16
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40002000 	.word	0x40002000
 8001ddc:	40014400 	.word	0x40014400
 8001de0:	40014800 	.word	0x40014800
 8001de4:	fffffcff 	.word	0xfffffcff

08001de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4393      	bics	r3, r2
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <TIM_OC1_SetConfig+0xe8>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4393      	bics	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4393      	bics	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <TIM_OC1_SetConfig+0xec>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <TIM_OC1_SetConfig+0x6e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <TIM_OC1_SetConfig+0xf0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <TIM_OC1_SetConfig+0x6e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <TIM_OC1_SetConfig+0xf4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10c      	bne.n	8001e70 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <TIM_OC1_SetConfig+0xec>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_OC1_SetConfig+0xa0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <TIM_OC1_SetConfig+0xf0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_OC1_SetConfig+0xa0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <TIM_OC1_SetConfig+0xf4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d111      	bne.n	8001eac <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <TIM_OC1_SetConfig+0xf8>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <TIM_OC1_SetConfig+0xfc>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	621a      	str	r2, [r3, #32]
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	fffeff8f 	.word	0xfffeff8f
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	fffffeff 	.word	0xfffffeff
 8001ee4:	fffffdff 	.word	0xfffffdff

08001ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	4393      	bics	r3, r2
 8001efa:	001a      	movs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <TIM_OC2_SetConfig+0xe0>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <TIM_OC2_SetConfig+0xe4>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4393      	bics	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <TIM_OC2_SetConfig+0xe8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	4393      	bics	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2240      	movs	r2, #64	; 0x40
 8001f62:	4393      	bics	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <TIM_OC2_SetConfig+0xe8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <TIM_OC2_SetConfig+0x96>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <TIM_OC2_SetConfig+0xec>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_OC2_SetConfig+0x96>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <TIM_OC2_SetConfig+0xf0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d113      	bne.n	8001fa6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <TIM_OC2_SetConfig+0xf4>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <TIM_OC2_SetConfig+0xf8>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	621a      	str	r2, [r3, #32]
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b006      	add	sp, #24
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	feff8fff 	.word	0xfeff8fff
 8001fcc:	fffffcff 	.word	0xfffffcff
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	fffffbff 	.word	0xfffffbff
 8001fe0:	fffff7ff 	.word	0xfffff7ff

08001fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a33      	ldr	r2, [pc, #204]	; (80020c0 <TIM_OC3_SetConfig+0xdc>)
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <TIM_OC3_SetConfig+0xe0>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2203      	movs	r2, #3
 8002018:	4393      	bics	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <TIM_OC3_SetConfig+0xe4>)
 800202a:	4013      	ands	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_OC3_SetConfig+0xe8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10d      	bne.n	800205e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <TIM_OC3_SetConfig+0xec>)
 8002046:	4013      	ands	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <TIM_OC3_SetConfig+0xf0>)
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <TIM_OC3_SetConfig+0xe8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <TIM_OC3_SetConfig+0x92>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <TIM_OC3_SetConfig+0xf4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_OC3_SetConfig+0x92>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <TIM_OC3_SetConfig+0xf8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <TIM_OC3_SetConfig+0xfc>)
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <TIM_OC3_SetConfig+0x100>)
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b006      	add	sp, #24
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	fffeff8f 	.word	0xfffeff8f
 80020c8:	fffffdff 	.word	0xfffffdff
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	fffff7ff 	.word	0xfffff7ff
 80020d4:	fffffbff 	.word	0xfffffbff
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	ffffefff 	.word	0xffffefff
 80020e4:	ffffdfff 	.word	0xffffdfff

080020e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <TIM_OC4_SetConfig+0xa8>)
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a20      	ldr	r2, [pc, #128]	; (8002194 <TIM_OC4_SetConfig+0xac>)
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <TIM_OC4_SetConfig+0xb0>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <TIM_OC4_SetConfig+0xb4>)
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <TIM_OC4_SetConfig+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <TIM_OC4_SetConfig+0x70>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <TIM_OC4_SetConfig+0xbc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <TIM_OC4_SetConfig+0x70>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <TIM_OC4_SetConfig+0xc0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d109      	bne.n	800216c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <TIM_OC4_SetConfig+0xc4>)
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	621a      	str	r2, [r3, #32]
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	ffffefff 	.word	0xffffefff
 8002194:	feff8fff 	.word	0xfeff8fff
 8002198:	fffffcff 	.word	0xfffffcff
 800219c:	ffffdfff 	.word	0xffffdfff
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40014400 	.word	0x40014400
 80021a8:	40014800 	.word	0x40014800
 80021ac:	ffffbfff 	.word	0xffffbfff

080021b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <TIM_OC5_SetConfig+0x9c>)
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <TIM_OC5_SetConfig+0xa0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <TIM_OC5_SetConfig+0xa4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a15      	ldr	r2, [pc, #84]	; (8002258 <TIM_OC5_SetConfig+0xa8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <TIM_OC5_SetConfig+0x66>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <TIM_OC5_SetConfig+0xac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_OC5_SetConfig+0x66>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a13      	ldr	r2, [pc, #76]	; (8002260 <TIM_OC5_SetConfig+0xb0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d109      	bne.n	800222a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <TIM_OC5_SetConfig+0x9c>)
 800221a:	4013      	ands	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	621a      	str	r2, [r3, #32]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b006      	add	sp, #24
 800224a:	bd80      	pop	{r7, pc}
 800224c:	fffeffff 	.word	0xfffeffff
 8002250:	fffeff8f 	.word	0xfffeff8f
 8002254:	fffdffff 	.word	0xfffdffff
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800

08002264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a24      	ldr	r2, [pc, #144]	; (8002304 <TIM_OC6_SetConfig+0xa0>)
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <TIM_OC6_SetConfig+0xa4>)
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <TIM_OC6_SetConfig+0xa8>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a16      	ldr	r2, [pc, #88]	; (8002310 <TIM_OC6_SetConfig+0xac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_OC6_SetConfig+0x68>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <TIM_OC6_SetConfig+0xb0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_OC6_SetConfig+0x68>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <TIM_OC6_SetConfig+0xb4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d109      	bne.n	80022e0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <TIM_OC6_SetConfig+0xb8>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	029b      	lsls	r3, r3, #10
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	621a      	str	r2, [r3, #32]
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b006      	add	sp, #24
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	ffefffff 	.word	0xffefffff
 8002308:	feff8fff 	.word	0xfeff8fff
 800230c:	ffdfffff 	.word	0xffdfffff
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40014400 	.word	0x40014400
 8002318:	40014800 	.word	0x40014800
 800231c:	fffbffff 	.word	0xfffbffff

08002320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	2201      	movs	r2, #1
 8002338:	4393      	bics	r3, r2
 800233a:	001a      	movs	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	22f0      	movs	r2, #240	; 0xf0
 800234a:	4393      	bics	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	220a      	movs	r2, #10
 800235c:	4393      	bics	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	621a      	str	r2, [r3, #32]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b006      	add	sp, #24
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	2210      	movs	r2, #16
 800238e:	4393      	bics	r3, r2
 8002390:	001a      	movs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <TIM_TI2_ConfigInputStage+0x60>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	031b      	lsls	r3, r3, #12
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	22a0      	movs	r2, #160	; 0xa0
 80023b8:	4393      	bics	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	621a      	str	r2, [r3, #32]
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b006      	add	sp, #24
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	ffff0fff 	.word	0xffff0fff

080023e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <TIM_ITRx_SetConfig+0x34>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	2207      	movs	r2, #7
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	ffcfff8f 	.word	0xffcfff8f

08002418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <TIM_ETR_SetConfig+0x3c>)
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	021a      	lsls	r2, r3, #8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	431a      	orrs	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b006      	add	sp, #24
 8002452:	bd80      	pop	{r7, pc}
 8002454:	ffff00ff 	.word	0xffff00ff

08002458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	221f      	movs	r2, #31
 8002468:	4013      	ands	r3, r2
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	0013      	movs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	43d2      	mvns	r2, r2
 800247a:	401a      	ands	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	211f      	movs	r1, #31
 8002488:	400b      	ands	r3, r1
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4099      	lsls	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b006      	add	sp, #24
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	223c      	movs	r2, #60	; 0x3c
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e04a      	b.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223c      	movs	r2, #60	; 0x3c
 80024bc:	2101      	movs	r1, #1
 80024be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	223d      	movs	r2, #61	; 0x3d
 80024c4:	2102      	movs	r1, #2
 80024c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d108      	bne.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2270      	movs	r2, #112	; 0x70
 80024f8:	4393      	bics	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10c      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	4393      	bics	r3, r2
 8002528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223d      	movs	r2, #61	; 0x3d
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	223c      	movs	r2, #60	; 0x3c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40012c00 	.word	0x40012c00
 800255c:	ff0fffff 	.word	0xff0fffff
 8002560:	40000400 	.word	0x40000400

08002564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223c      	movs	r2, #60	; 0x3c
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e079      	b.n	8002674 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	223c      	movs	r2, #60	; 0x3c
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	4393      	bics	r3, r2
 800258e:	001a      	movs	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a38      	ldr	r2, [pc, #224]	; (800267c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800259c:	401a      	ands	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a35      	ldr	r2, [pc, #212]	; (8002680 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80025aa:	401a      	ands	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a33      	ldr	r2, [pc, #204]	; (8002684 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80025b8:	401a      	ands	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a30      	ldr	r2, [pc, #192]	; (8002688 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80025c6:	401a      	ands	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80025d4:	401a      	ands	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80025e2:	401a      	ands	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80025f0:	401a      	ands	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d106      	bne.n	8002614 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800260a:	401a      	ands	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d121      	bne.n	8002662 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002622:	401a      	ands	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	051b      	lsls	r3, r3, #20
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002632:	401a      	ands	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002640:	401a      	ands	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d106      	bne.n	8002662 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002658:	401a      	ands	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	; 0x3c
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	fffffcff 	.word	0xfffffcff
 8002680:	fffffbff 	.word	0xfffffbff
 8002684:	fffff7ff 	.word	0xfffff7ff
 8002688:	ffffefff 	.word	0xffffefff
 800268c:	ffffdfff 	.word	0xffffdfff
 8002690:	ffffbfff 	.word	0xffffbfff
 8002694:	fff0ffff 	.word	0xfff0ffff
 8002698:	40012c00 	.word	0x40012c00
 800269c:	efffffff 	.word	0xefffffff
 80026a0:	ff0fffff 	.word	0xff0fffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	fdffffff 	.word	0xfdffffff
 80026ac:	dfffffff 	.word	0xdfffffff

080026b0 <__libc_init_array>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	2600      	movs	r6, #0
 80026b4:	4d0c      	ldr	r5, [pc, #48]	; (80026e8 <__libc_init_array+0x38>)
 80026b6:	4c0d      	ldr	r4, [pc, #52]	; (80026ec <__libc_init_array+0x3c>)
 80026b8:	1b64      	subs	r4, r4, r5
 80026ba:	10a4      	asrs	r4, r4, #2
 80026bc:	42a6      	cmp	r6, r4
 80026be:	d109      	bne.n	80026d4 <__libc_init_array+0x24>
 80026c0:	2600      	movs	r6, #0
 80026c2:	f000 f821 	bl	8002708 <_init>
 80026c6:	4d0a      	ldr	r5, [pc, #40]	; (80026f0 <__libc_init_array+0x40>)
 80026c8:	4c0a      	ldr	r4, [pc, #40]	; (80026f4 <__libc_init_array+0x44>)
 80026ca:	1b64      	subs	r4, r4, r5
 80026cc:	10a4      	asrs	r4, r4, #2
 80026ce:	42a6      	cmp	r6, r4
 80026d0:	d105      	bne.n	80026de <__libc_init_array+0x2e>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	00b3      	lsls	r3, r6, #2
 80026d6:	58eb      	ldr	r3, [r5, r3]
 80026d8:	4798      	blx	r3
 80026da:	3601      	adds	r6, #1
 80026dc:	e7ee      	b.n	80026bc <__libc_init_array+0xc>
 80026de:	00b3      	lsls	r3, r6, #2
 80026e0:	58eb      	ldr	r3, [r5, r3]
 80026e2:	4798      	blx	r3
 80026e4:	3601      	adds	r6, #1
 80026e6:	e7f2      	b.n	80026ce <__libc_init_array+0x1e>
 80026e8:	080027b4 	.word	0x080027b4
 80026ec:	080027b4 	.word	0x080027b4
 80026f0:	080027b4 	.word	0x080027b4
 80026f4:	080027b8 	.word	0x080027b8

080026f8 <memset>:
 80026f8:	0003      	movs	r3, r0
 80026fa:	1882      	adds	r2, r0, r2
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d100      	bne.n	8002702 <memset+0xa>
 8002700:	4770      	bx	lr
 8002702:	7019      	strb	r1, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	e7f9      	b.n	80026fc <memset+0x4>

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
