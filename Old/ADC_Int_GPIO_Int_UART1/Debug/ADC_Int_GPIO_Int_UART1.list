
ADC_Int_GPIO_Int_UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042dc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080044cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080044cc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa68  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f90  00000000  00000000  0002faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00031a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b685  00000000  00000000  00033390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e279  00000000  00000000  0004ea15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3018  00000000  00000000  0005cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fca6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  0010fcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004450 	.word	0x08004450

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004450 	.word	0x08004450

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb31 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80e 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f93c 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f90a 	bl	80006f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f85e 	bl	80005a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT (&hadc1);
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x24>)
 80004ee:	f000 fef3 	bl	80012d8 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x22>
 80004f4:	20000028 	.word	0x20000028

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 ff9a 	bl	8004440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f002 faa1 	bl	8002a64 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f976 	bl	8000818 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800052c:	f002 fa7c 	bl	8002a28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <SystemClock_Config+0xa8>)
 8000532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000536:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <SystemClock_Config+0xa8>)
 8000538:	f023 0318 	bic.w	r3, r3, #24
 800053c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000540:	2314      	movs	r3, #20
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	2300      	movs	r3, #0
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fad7 	bl	8002b10 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000568:	f000 f956 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f002 ff25 	bl	80033d4 <HAL_RCC_ClockConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000590:	f000 f942 	bl	8000818 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000594:	f003 fac8 	bl	8003b28 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000598:	bf00      	nop
 800059a:	3758      	adds	r7, #88	; 0x58
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
static void MX_ADC1_Init(void)
 80005aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ae:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_ADC1_Init+0xe8>)
 80005ce:	4a30      	ldr	r2, [pc, #192]	; (8000690 <MX_ADC1_Init+0xec>)
 80005d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_ADC1_Init+0xe8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_ADC1_Init+0xe8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_ADC1_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_ADC1_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_ADC1_Init+0xe8>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <MX_ADC1_Init+0xe8>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	4817      	ldr	r0, [pc, #92]	; (800068c <MX_ADC1_Init+0xe8>)
 800062e:	f000 fd03 	bl	8001038 <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000638:	f000 f8ee 	bl	8000818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_ADC1_Init+0xe8>)
 8000648:	f001 fe8a 	bl	8002360 <HAL_ADCEx_MultiModeConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000652:	f000 f8e1 	bl	8000818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0xf0>)
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065a:	2306      	movs	r3, #6
 800065c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000662:	237f      	movs	r3, #127	; 0x7f
 8000664:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000666:	2304      	movs	r3, #4
 8000668:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0xe8>)
 8000674:	f001 f99a 	bl	80019ac <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800067e:	f000 f8cb 	bl	8000818 <Error_Handler>
    HAL_ADC_Start_IT (&hadc1);
  }

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000028 	.word	0x20000028
 8000690:	50040000 	.word	0x50040000
 8000694:	21800100 	.word	0x21800100

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006dc:	f003 fa34 	bl	8003b48 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 f897 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	40013800 	.word	0x40013800

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f003 fa04 	bl	8003b48 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f867 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000110 	.word	0x20000110
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_GPIO_Init+0xb8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a27      	ldr	r2, [pc, #156]	; (8000810 <MX_GPIO_Init+0xb8>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_GPIO_Init+0xb8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_GPIO_Init+0xb8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a21      	ldr	r2, [pc, #132]	; (8000810 <MX_GPIO_Init+0xb8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0xb8>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0xb8>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_GPIO_Init+0xb8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_GPIO_Init+0xb8>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	4816      	ldr	r0, [pc, #88]	; (8000814 <MX_GPIO_Init+0xbc>)
 80007bc:	f002 f8f8 	bl	80029b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f001 ff78 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007dc:	2308      	movs	r3, #8
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_GPIO_Init+0xbc>)
 80007f4:	f001 ff6a 	bl	80026cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2007      	movs	r0, #7
 80007fe:	f001 ff2e 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000802:	2007      	movs	r0, #7
 8000804:	f001 ff47 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_ADC_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12c      	bne.n	80008e8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 8000894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_ADC_MspInit+0x88>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008be:	2308      	movs	r3, #8
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008c2:	230b      	movs	r3, #11
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f001 fefa 	bl	80026cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2012      	movs	r0, #18
 80008de:	f001 febe 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008e2:	2012      	movs	r0, #18
 80008e4:	f001 fed7 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	50040000 	.word	0x50040000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b098      	sub	sp, #96	; 0x60
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	2234      	movs	r2, #52	; 0x34
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f003 fd91 	bl	8004440 <memset>
  if(huart->Instance==USART1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a47      	ldr	r2, [pc, #284]	; (8000a40 <HAL_UART_MspInit+0x148>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d138      	bne.n	800099a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4618      	mov	r0, r3
 8000936:	f002 ff71 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000940:	f7ff ff6a 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 8000946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000948:	4a3e      	ldr	r2, [pc, #248]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6613      	str	r3, [r2, #96]	; 0x60
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000968:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000974:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000986:	2307      	movs	r3, #7
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f001 fe9a 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000998:	e04d      	b.n	8000a36 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <HAL_UART_MspInit+0x150>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d148      	bne.n	8000a36 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 ff33 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80009bc:	f7ff ff2c 	bl	8000818 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	6593      	str	r3, [r2, #88]	; 0x58
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009f0:	2304      	movs	r3, #4
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f001 fe5d 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a24:	2303      	movs	r3, #3
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f001 fe4b 	bl	80026cc <HAL_GPIO_Init>
}
 8000a36:	bf00      	nop
 8000a38:	3760      	adds	r7, #96	; 0x60
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013800 	.word	0x40013800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40004400 	.word	0x40004400

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f8a4 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f001 ff9b 	bl	80029e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <ADC1_2_IRQHandler+0x10>)
 8000ab6:	f000 fd41 	bl	800153c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000028 	.word	0x20000028

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 fc6f 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fcd9 	bl	80004d0 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	20000198 	.word	0x20000198

08000b38 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <COMP_IRQHandler>

08000b3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f001 fd7f 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f80e 	bl	8000b6c <HAL_InitTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5c:	f7ff fe62 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_InitTick+0x70>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fd8b 	bl	80026b2 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10f      	bne.n	8000bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d809      	bhi.n	8000bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f001 fd55 	bl	800265e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000194 	.word	0x20000194

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000194 	.word	0x20000194

08000c24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3360      	adds	r3, #96	; 0x60
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <LL_ADC_SetOffset+0x44>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	03fff000 	.word	0x03fff000

08000cd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3360      	adds	r3, #96	; 0x60
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3360      	adds	r3, #96	; 0x60
 8000d10:	461a      	mov	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	615a      	str	r2, [r3, #20]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b087      	sub	sp, #28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3330      	adds	r3, #48	; 0x30
 8000d92:	461a      	mov	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	4413      	add	r3, r2
 8000da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f003 031f 	and.w	r3, r3, #31
 8000dac:	211f      	movs	r1, #31
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	401a      	ands	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0e9b      	lsrs	r3, r3, #26
 8000dba:	f003 011f 	and.w	r1, r3, #31
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3314      	adds	r3, #20
 8000e10:	461a      	mov	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	0e5b      	lsrs	r3, r3, #25
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	0d1b      	lsrs	r3, r3, #20
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0d1b      	lsrs	r3, r3, #20
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0318 	and.w	r3, r3, #24
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e7c:	40d9      	lsrs	r1, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	400b      	ands	r3, r1
 8000e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	0007ffff 	.word	0x0007ffff

08000ea0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 031f 	and.w	r3, r3, #31
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6093      	str	r3, [r2, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f10:	d101      	bne.n	8000f16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f60:	d101      	bne.n	8000f66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <LL_ADC_IsEnabled+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_ADC_IsEnabled+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	f043 0204 	orr.w	r2, r3, #4
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d101      	bne.n	8001002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b08      	cmp	r3, #8
 8001022:	d101      	bne.n	8001028 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e131      	b.n	80012b6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fc03 	bl	800086c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff3f 	bl	8000efc <LL_ADC_IsDeepPowerDownEnabled>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff25 	bl	8000ed8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff5a 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d115      	bne.n	80010ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff3e 	bl	8000f24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a8:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <HAL_ADC_Init+0x288>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	4a85      	ldr	r2, [pc, #532]	; (80012c4 <HAL_ADC_Init+0x28c>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	3301      	adds	r3, #1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010bc:	e002      	b.n	80010c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff3c 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010de:	f043 0210 	orr.w	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff75 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 8001100:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 80ca 	bne.w	80012a4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 80c6 	bne.w	80012a4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001120:	f043 0202 	orr.w	r2, r3, #2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff35 	bl	8000f9c <LL_ADC_IsEnabled>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d110      	bne.n	800115a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001138:	4863      	ldr	r0, [pc, #396]	; (80012c8 <HAL_ADC_Init+0x290>)
 800113a:	f7ff ff2f 	bl	8000f9c <LL_ADC_IsEnabled>
 800113e:	4604      	mov	r4, r0
 8001140:	4862      	ldr	r0, [pc, #392]	; (80012cc <HAL_ADC_Init+0x294>)
 8001142:	f7ff ff2b 	bl	8000f9c <LL_ADC_IsEnabled>
 8001146:	4603      	mov	r3, r0
 8001148:	4323      	orrs	r3, r4
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4619      	mov	r1, r3
 8001154:	485e      	ldr	r0, [pc, #376]	; (80012d0 <HAL_ADC_Init+0x298>)
 8001156:	f7ff fd65 	bl	8000c24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7e5b      	ldrb	r3, [r3, #25]
 800115e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001164:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800116a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001170:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	3b01      	subs	r3, #1
 800118e:	045b      	lsls	r3, r3, #17
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <HAL_ADC_Init+0x29c>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	430b      	orrs	r3, r1
 80011c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff0d 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 80011d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff1a 	bl	8001010 <LL_ADC_INJ_IsConversionOngoing>
 80011dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d13d      	bne.n	8001260 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d13a      	bne.n	8001260 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	430b      	orrs	r3, r1
 8001212:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800121a:	2b01      	cmp	r3, #1
 800121c:	d118      	bne.n	8001250 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001234:	4311      	orrs	r1, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800123a:	4311      	orrs	r1, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001240:	430a      	orrs	r2, r1
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	e007      	b.n	8001260 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10c      	bne.n	8001282 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f023 010f 	bic.w	r1, r3, #15
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
 8001280:	e007      	b.n	8001292 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 020f 	bic.w	r2, r2, #15
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
 80012a2:	e007      	b.n	80012b4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a8:	f043 0210 	orr.w	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	053e2d63 	.word	0x053e2d63
 80012c8:	50040000 	.word	0x50040000
 80012cc:	50040100 	.word	0x50040100
 80012d0:	50040300 	.word	0x50040300
 80012d4:	fff0c007 	.word	0xfff0c007

080012d8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012e0:	4893      	ldr	r0, [pc, #588]	; (8001530 <HAL_ADC_Start_IT+0x258>)
 80012e2:	f7ff fddd 	bl	8000ea0 <LL_ADC_GetMultimode>
 80012e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe7c 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 8111 	bne.w	800151c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_Start_IT+0x30>
 8001304:	2302      	movs	r3, #2
 8001306:	e10e      	b.n	8001526 <HAL_ADC_Start_IT+0x24e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 ff47 	bl	80021a4 <ADC_Enable>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 80f8 	bne.w	8001512 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a7e      	ldr	r2, [pc, #504]	; (8001534 <HAL_ADC_Start_IT+0x25c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d002      	beq.n	8001346 <HAL_ADC_Start_IT+0x6e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	e000      	b.n	8001348 <HAL_ADC_Start_IT+0x70>
 8001346:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <HAL_ADC_Start_IT+0x260>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4293      	cmp	r3, r2
 800134e:	d002      	beq.n	8001356 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f023 0206 	bic.w	r2, r3, #6
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	659a      	str	r2, [r3, #88]	; 0x58
 800137a:	e002      	b.n	8001382 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	221c      	movs	r2, #28
 8001388:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 021c 	bic.w	r2, r2, #28
 80013a0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d108      	bne.n	80013bc <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0208 	orr.w	r2, r2, #8
 80013b8:	605a      	str	r2, [r3, #4]
          break;
 80013ba:	e008      	b.n	80013ce <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0204 	orr.w	r2, r2, #4
 80013ca:	605a      	str	r2, [r3, #4]
          break;
 80013cc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d107      	bne.n	80013e6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0210 	orr.w	r2, r2, #16
 80013e4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_ADC_Start_IT+0x25c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d002      	beq.n	80013f6 <HAL_ADC_Start_IT+0x11e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Start_IT+0x120>
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_ADC_Start_IT+0x260>)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d008      	beq.n	8001412 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d002      	beq.n	8001412 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b09      	cmp	r3, #9
 8001410:	d13b      	bne.n	800148a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02d      	beq.n	800147c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d110      	bne.n	800145a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0220 	bic.w	r2, r2, #32
 8001446:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001456:	605a      	str	r2, [r3, #4]
              break;
 8001458:	e011      	b.n	800147e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001468:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	605a      	str	r2, [r3, #4]
              break;
 800147a:	e000      	b.n	800147e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 800147c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd9d 	bl	8000fc2 <LL_ADC_REG_StartConversion>
 8001488:	e04c      	b.n	8001524 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_ADC_Start_IT+0x25c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d002      	beq.n	80014a6 <HAL_ADC_Start_IT+0x1ce>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_Start_IT+0x1d0>
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_ADC_Start_IT+0x260>)
 80014a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d035      	beq.n	8001522 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d110      	bne.n	80014f0 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0220 	bic.w	r2, r2, #32
 80014dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ec:	605a      	str	r2, [r3, #4]
              break;
 80014ee:	e019      	b.n	8001524 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014fe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0220 	orr.w	r2, r2, #32
 800150e:	605a      	str	r2, [r3, #4]
              break;
 8001510:	e008      	b.n	8001524 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800151a:	e003      	b.n	8001524 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	75fb      	strb	r3, [r7, #23]
 8001520:	e000      	b.n	8001524 <HAL_ADC_Start_IT+0x24c>
        }
 8001522:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001524:	7dfb      	ldrb	r3, [r7, #23]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	50040300 	.word	0x50040300
 8001534:	50040100 	.word	0x50040100
 8001538:	50040000 	.word	0x50040000

0800153c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001558:	4882      	ldr	r0, [pc, #520]	; (8001764 <HAL_ADC_IRQHandler+0x228>)
 800155a:	f7ff fca1 	bl	8000ea0 <LL_ADC_GetMultimode>
 800155e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d017      	beq.n	800159a <HAL_ADC_IRQHandler+0x5e>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d012      	beq.n	800159a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fedd 	bl	800234c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_IRQHandler+0x72>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8083 	beq.w	80016c0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d07d      	beq.n	80016c0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbbb 	bl	8000d5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d062      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_ADC_IRQHandler+0x22c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d002      	beq.n	80015fc <HAL_ADC_IRQHandler+0xc0>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	e000      	b.n	80015fe <HAL_ADC_IRQHandler+0xc2>
 80015fc:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_ADC_IRQHandler+0x230>)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	4293      	cmp	r3, r2
 8001604:	d008      	beq.n	8001618 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d002      	beq.n	8001618 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d104      	bne.n	8001622 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	623b      	str	r3, [r7, #32]
 8001620:	e00c      	b.n	800163c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_ADC_IRQHandler+0x22c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d002      	beq.n	8001632 <HAL_ADC_IRQHandler+0xf6>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	e000      	b.n	8001634 <HAL_ADC_IRQHandler+0xf8>
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <HAL_ADC_IRQHandler+0x230>)
 8001634:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d135      	bne.n	80016b2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b08      	cmp	r3, #8
 8001652:	d12e      	bne.n	80016b2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fcc6 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11a      	bne.n	800169a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 020c 	bic.w	r2, r2, #12
 8001672:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d112      	bne.n	80016b2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
 8001698:	e00b      	b.n	80016b2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f95c 	bl	8001970 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	220c      	movs	r2, #12
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x198>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10b      	bne.n	80016ec <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 809f 	beq.w	800181e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8099 	beq.w	800181e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb66 	bl	8000dda <LL_ADC_INJ_IsTriggerSourceSWStart>
 800170e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb21 	bl	8000d5c <LL_ADC_REG_IsTriggerSourceSWStart>
 800171a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_ADC_IRQHandler+0x22c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d002      	beq.n	800172c <HAL_ADC_IRQHandler+0x1f0>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	e000      	b.n	800172e <HAL_ADC_IRQHandler+0x1f2>
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_ADC_IRQHandler+0x230>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4293      	cmp	r3, r2
 8001734:	d008      	beq.n	8001748 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d002      	beq.n	8001748 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b07      	cmp	r3, #7
 8001746:	d104      	bne.n	8001752 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	e013      	b.n	800177a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_ADC_IRQHandler+0x22c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d009      	beq.n	8001770 <HAL_ADC_IRQHandler+0x234>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_ADC_IRQHandler+0x236>
 8001762:	bf00      	nop
 8001764:	50040300 	.word	0x50040300
 8001768:	50040100 	.word	0x50040100
 800176c:	50040000 	.word	0x50040000
 8001770:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_ADC_IRQHandler+0x42c>)
 8001772:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d047      	beq.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_ADC_IRQHandler+0x25e>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03f      	beq.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d13a      	bne.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d133      	bne.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12e      	bne.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fc2a 	bl	8001010 <LL_ADC_INJ_IsConversionOngoing>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d11a      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d112      	bne.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
 80017f6:	e00b      	b.n	8001810 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fd73 	bl	80022fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2260      	movs	r2, #96	; 0x60
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001824:	2b00      	cmp	r3, #0
 8001826:	d011      	beq.n	800184c <HAL_ADC_IRQHandler+0x310>
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8a0 	bl	8001984 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <HAL_ADC_IRQHandler+0x340>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fd59 	bl	8002324 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <HAL_ADC_IRQHandler+0x370>
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00d      	beq.n	80018ac <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fd4b 	bl	8002338 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d036      	beq.n	8001924 <HAL_ADC_IRQHandler+0x3e8>
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d031      	beq.n	8001924 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80018c8:	2301      	movs	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
 80018cc:	e014      	b.n	80018f8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018d4:	4825      	ldr	r0, [pc, #148]	; (800196c <HAL_ADC_IRQHandler+0x430>)
 80018d6:	f7ff faf1 	bl	8000ebc <LL_ADC_GetMultiDMATransfer>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
 80018e4:	e008      	b.n	80018f8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10e      	bne.n	800191c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f043 0202 	orr.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f83e 	bl	8001998 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	2b00      	cmp	r3, #0
 800192c:	d018      	beq.n	8001960 <HAL_ADC_IRQHandler+0x424>
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f043 0208 	orr.w	r2, r3, #8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fcd8 	bl	8002310 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	50040000 	.word	0x50040000
 800196c:	50040300 	.word	0x50040300

08001970 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0b6      	sub	sp, #216	; 0xd8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x22>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e3d5      	b.n	800217a <HAL_ADC_ConfigChannel+0x7ce>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb05 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 83ba 	bne.w	800215c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d824      	bhi.n	8001a3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	3b02      	subs	r3, #2
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d81b      	bhi.n	8001a32 <HAL_ADC_ConfigChannel+0x86>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_ADC_ConfigChannel+0x54>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a19 	.word	0x08001a19
 8001a08:	08001a21 	.word	0x08001a21
 8001a0c:	08001a29 	.word	0x08001a29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	220c      	movs	r2, #12
 8001a14:	605a      	str	r2, [r3, #4]
          break;
 8001a16:	e011      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2212      	movs	r2, #18
 8001a1c:	605a      	str	r2, [r3, #4]
          break;
 8001a1e:	e00d      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2218      	movs	r2, #24
 8001a24:	605a      	str	r2, [r3, #4]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2e:	605a      	str	r2, [r3, #4]
          break;
 8001a30:	e004      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2206      	movs	r2, #6
 8001a36:	605a      	str	r2, [r3, #4]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff f99a 	bl	8000d82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fac9 	bl	8000fea <LL_ADC_REG_IsConversionOngoing>
 8001a58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fad5 	bl	8001010 <LL_ADC_INJ_IsConversionOngoing>
 8001a66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 81c1 	bne.w	8001df6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 81bc 	bne.w	8001df6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a86:	d10f      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f9b4 	bl	8000e00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f948 	bl	8000d36 <LL_ADC_SetSamplingTimeCommonConfig>
 8001aa6:	e00e      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff f9a3 	bl	8000e00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f938 	bl	8000d36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00a      	beq.n	8001afe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6919      	ldr	r1, [r3, #16]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001af8:	f7ff f8c8 	bl	8000c8c <LL_ADC_SetOffset>
 8001afc:	e17b      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f8e5 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x17e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f8da 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	e01e      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x1bc>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f8cf 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e004      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1d4>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	e018      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x206>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e004      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d106      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f89e 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f882 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x244>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f877 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 021f 	and.w	r2, r3, #31
 8001bee:	e01e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x282>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f86c 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e004      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x29a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	e018      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x2cc>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e004      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f83b 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f81f 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x30a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f814 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x348>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f809 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e004      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x360>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	e016      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x38e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d106      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe ffda 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffbe 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x3cc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2103      	movs	r1, #3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ffb3 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	e017      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x3fc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ffa8 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d92:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x414>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	e011      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x438>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	e003      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2103      	movs	r1, #3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff85 	bl	8000d00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f8ce 	bl	8000f9c <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8140 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff f81f 	bl	8000e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4a8f      	ldr	r2, [pc, #572]	; (800205c <HAL_ADC_ConfigChannel+0x6b0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f040 8131 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x4a2>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	bf94      	ite	ls
 8001e46:	2301      	movls	r3, #1
 8001e48:	2300      	movhi	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e019      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x4d6>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d079      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x4f6>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	069b      	lsls	r3, r3, #26
 8001e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea0:	e015      	b.n	8001ece <HAL_ADC_ConfigChannel+0x522>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e003      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x542>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	e017      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x572>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	ea42 0103 	orr.w	r1, r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x598>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	e018      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x5ca>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 021f 	and.w	r2, r3, #31
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f76:	430b      	orrs	r3, r1
 8001f78:	e081      	b.n	800207e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x5ea>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f94:	e015      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x616>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e003      	b.n	8001fba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x636>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	e017      	b.n	8002012 <HAL_ADC_ConfigChannel+0x666>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
  return result;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	ea42 0103 	orr.w	r1, r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_ADC_ConfigChannel+0x692>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	3301      	adds	r3, #1
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203c:	e01e      	b.n	800207c <HAL_ADC_ConfigChannel+0x6d0>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	613b      	str	r3, [r7, #16]
  return result;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e006      	b.n	8002068 <HAL_ADC_ConfigChannel+0x6bc>
 800205a:	bf00      	nop
 800205c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	3b1e      	subs	r3, #30
 8002076:	051b      	lsls	r3, r3, #20
 8002078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207c:	430b      	orrs	r3, r1
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe febc 	bl	8000e00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_ADC_ConfigChannel+0x7d8>)
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d06c      	beq.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002094:	483c      	ldr	r0, [pc, #240]	; (8002188 <HAL_ADC_ConfigChannel+0x7dc>)
 8002096:	f7fe fdeb 	bl	8000c70 <LL_ADC_GetCommonPathInternalCh>
 800209a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_ADC_ConfigChannel+0x7e0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d127      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d121      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_ADC_ConfigChannel+0x7e4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d157      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c6:	4619      	mov	r1, r3
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <HAL_ADC_ConfigChannel+0x7dc>)
 80020ca:	f7fe fdbe 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ce:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_ADC_ConfigChannel+0x7e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_ADC_ConfigChannel+0x7ec>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020e8:	e002      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f9      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f6:	e03a      	b.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_ADC_ConfigChannel+0x7f0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d113      	bne.n	800212a <HAL_ADC_ConfigChannel+0x77e>
 8002102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_ADC_ConfigChannel+0x7e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002120:	4619      	mov	r1, r3
 8002122:	4819      	ldr	r0, [pc, #100]	; (8002188 <HAL_ADC_ConfigChannel+0x7dc>)
 8002124:	f7fe fd91 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002128:	e021      	b.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d11c      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_ADC_ConfigChannel+0x7e4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d111      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800214e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_ADC_ConfigChannel+0x7dc>)
 8002156:	f7fe fd78 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
 800215a:	e008      	b.n	800216e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800217a:	4618      	mov	r0, r3
 800217c:	37d8      	adds	r7, #216	; 0xd8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	80080000 	.word	0x80080000
 8002188:	50040300 	.word	0x50040300
 800218c:	c7520000 	.word	0xc7520000
 8002190:	50040000 	.word	0x50040000
 8002194:	20000000 	.word	0x20000000
 8002198:	053e2d63 	.word	0x053e2d63
 800219c:	cb840000 	.word	0xcb840000
 80021a0:	80000001 	.word	0x80000001

080021a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fef1 	bl	8000f9c <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d169      	bne.n	8002294 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <ADC_Enable+0xfc>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e055      	b.n	8002296 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fec0 	bl	8000f74 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021f4:	482b      	ldr	r0, [pc, #172]	; (80022a4 <ADC_Enable+0x100>)
 80021f6:	f7fe fd3b 	bl	8000c70 <LL_ADC_GetCommonPathInternalCh>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <ADC_Enable+0x104>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <ADC_Enable+0x108>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800221e:	e002      	b.n	8002226 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3b01      	subs	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800222c:	f7fe fcee 	bl	8000c0c <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002232:	e028      	b.n	8002286 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe feaf 	bl	8000f9c <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fe93 	bl	8000f74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224e:	f7fe fcdd 	bl	8000c0c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d914      	bls.n	8002286 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d00d      	beq.n	8002286 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d1cf      	bne.n	8002234 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	8000003f 	.word	0x8000003f
 80022a4:	50040300 	.word	0x50040300
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63

080022b0 <LL_ADC_IsEnabled>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <LL_ADC_IsEnabled+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_ADC_IsEnabled+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d101      	bne.n	80022ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b09f      	sub	sp, #124	; 0x7c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800237a:	2302      	movs	r3, #2
 800237c:	e089      	b.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800238a:	2300      	movs	r3, #0
 800238c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a42      	ldr	r2, [pc, #264]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e001      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e068      	b.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff87 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 80023c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff81 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d14a      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d147      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80023e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d027      	beq.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	035b      	lsls	r3, r3, #13
 8002400:	430b      	orrs	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002408:	4824      	ldr	r0, [pc, #144]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800240a:	f7ff ff51 	bl	80022b0 <LL_ADC_IsEnabled>
 800240e:	4604      	mov	r4, r0
 8002410:	4823      	ldr	r0, [pc, #140]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002412:	f7ff ff4d 	bl	80022b0 <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	4323      	orrs	r3, r4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d132      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002426:	f023 030f 	bic.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243a:	e023      	b.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	4814      	ldr	r0, [pc, #80]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800244a:	f7ff ff31 	bl	80022b0 <LL_ADC_IsEnabled>
 800244e:	4604      	mov	r4, r0
 8002450:	4813      	ldr	r0, [pc, #76]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002452:	f7ff ff2d 	bl	80022b0 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	4323      	orrs	r3, r4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d112      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002466:	f023 030f 	bic.w	r3, r3, #15
 800246a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800246c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800246e:	e009      	b.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002482:	e000      	b.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800248e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002492:	4618      	mov	r0, r3
 8002494:	377c      	adds	r7, #124	; 0x7c
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	50040000 	.word	0x50040000
 80024a0:	50040100 	.word	0x50040100
 80024a4:	50040300 	.word	0x50040300

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e14e      	b.n	800297a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8140 	beq.w	8002974 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d005      	beq.n	800270c <HAL_GPIO_Init+0x40>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d130      	bne.n	800276e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002742:	2201      	movs	r2, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0201 	and.w	r2, r3, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b03      	cmp	r3, #3
 8002778:	d017      	beq.n	80027aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d123      	bne.n	80027fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	6939      	ldr	r1, [r7, #16]
 80027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 809a 	beq.w	8002974 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002840:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_GPIO_Init+0x2cc>)
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	4a54      	ldr	r2, [pc, #336]	; (8002998 <HAL_GPIO_Init+0x2cc>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6613      	str	r3, [r2, #96]	; 0x60
 800284c:	4b52      	ldr	r3, [pc, #328]	; (8002998 <HAL_GPIO_Init+0x2cc>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002858:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_GPIO_Init+0x2d0>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002882:	d013      	beq.n	80028ac <HAL_GPIO_Init+0x1e0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <HAL_GPIO_Init+0x2d4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00d      	beq.n	80028a8 <HAL_GPIO_Init+0x1dc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a45      	ldr	r2, [pc, #276]	; (80029a4 <HAL_GPIO_Init+0x2d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x1d8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a44      	ldr	r2, [pc, #272]	; (80029a8 <HAL_GPIO_Init+0x2dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_GPIO_Init+0x1d4>
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a0:	2307      	movs	r3, #7
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028be:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_GPIO_Init+0x2d0>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028f0:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f aea9 	bne.w	80026dc <HAL_GPIO_Init+0x10>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f806 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40007000 	.word	0x40007000

08002a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a72:	d130      	bne.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d038      	beq.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2232      	movs	r2, #50	; 0x32
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa8:	e002      	b.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	d102      	bne.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f2      	bne.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad0:	d110      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d007      	beq.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40007000 	.word	0x40007000
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	431bde83 	.word	0x431bde83

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f000 bc4f 	b.w	80033c2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b24:	4b97      	ldr	r3, [pc, #604]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2e:	4b95      	ldr	r3, [pc, #596]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80e6 	beq.w	8002d12 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4c>
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	f040 808d 	bne.w	8002c6e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	f040 8089 	bne.w	8002c6e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b5c:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <HAL_RCC_OscConfig+0x66>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f000 bc26 	b.w	80033c2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	4b82      	ldr	r3, [pc, #520]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_RCC_OscConfig+0x80>
 8002b86:	4b7f      	ldr	r3, [pc, #508]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_OscConfig+0x8c>
 8002b90:	4b7c      	ldr	r3, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d224      	bcs.n	8002bea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fdd9 	bl	800375c <RCC_SetFlashLatencyFromMSIRange>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f000 bc06 	b.w	80033c2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	496d      	ldr	r1, [pc, #436]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd4:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	4968      	ldr	r1, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
 8002be8:	e025      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bea:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a65      	ldr	r2, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	4960      	ldr	r1, [pc, #384]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	495b      	ldr	r1, [pc, #364]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fd98 	bl	800375c <RCC_SetFlashLatencyFromMSIRange>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e3c5      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c36:	f000 fccd 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4950      	ldr	r1, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002c48:	5ccb      	ldrb	r3, [r1, r3]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a4e      	ldr	r2, [pc, #312]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002c54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c56:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd ff86 	bl	8000b6c <HAL_InitTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d052      	beq.n	8002d10 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	e3a9      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d032      	beq.n	8002cdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c76:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c82:	f7fd ffc3 	bl	8000c0c <HAL_GetTick>
 8002c86:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8a:	f7fd ffbf 	bl	8000c0c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e392      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9c:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cae:	f043 0308 	orr.w	r3, r3, #8
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	4930      	ldr	r1, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	492b      	ldr	r1, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e01a      	b.n	8002d12 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce8:	f7fd ff90 	bl	8000c0c <HAL_GetTick>
 8002cec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf0:	f7fd ff8c 	bl	8000c0c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e35f      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1e0>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d073      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x220>
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d10e      	bne.n	8002d48 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d063      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2f4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d15f      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e33c      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x250>
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e025      	b.n	8002dac <HAL_RCC_OscConfig+0x29c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d114      	bne.n	8002d94 <HAL_RCC_OscConfig+0x284>
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a02      	ldr	r2, [pc, #8]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e013      	b.n	8002dac <HAL_RCC_OscConfig+0x29c>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08004468 	.word	0x08004468
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004
 8002d94:	4b8f      	ldr	r3, [pc, #572]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a8e      	ldr	r2, [pc, #568]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a8b      	ldr	r2, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fd ff2a 	bl	8000c0c <HAL_GetTick>
 8002db8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fd ff26 	bl	8000c0c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e2f9      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2ac>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fd ff16 	bl	8000c0c <HAL_GetTick>
 8002de0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fd ff12 	bl	8000c0c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e2e5      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df6:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2d4>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d060      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_OscConfig+0x314>
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d119      	bne.n	8002e52 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d116      	bne.n	8002e52 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x32c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e2c2      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4962      	ldr	r1, [pc, #392]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e50:	e040      	b.n	8002ed4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d023      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5a:	4b5e      	ldr	r3, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5d      	ldr	r2, [pc, #372]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fd fed1 	bl	8000c0c <HAL_GetTick>
 8002e6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fd fecd 	bl	8000c0c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e2a0      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	494e      	ldr	r1, [pc, #312]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fd fead 	bl	8000c0c <HAL_GetTick>
 8002eb2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fd fea9 	bl	8000c0c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e27c      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8082 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d05f      	beq.n	8002faa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d037      	beq.n	8002f70 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e254      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f28:	4a2a      	ldr	r2, [pc, #168]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f32:	f7fd fe6b 	bl	8000c0c <HAL_GetTick>
 8002f36:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3a:	f7fd fe67 	bl	8000c0c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b11      	cmp	r3, #17
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e23a      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ef      	bne.n	8002f3a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	f023 0210 	bic.w	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	491a      	ldr	r1, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fd fe44 	bl	8000c0c <HAL_GetTick>
 8002f84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fd fe40 	bl	8000c0c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e213      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <HAL_RCC_OscConfig+0x478>
 8002fa8:	e01d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fd fe27 	bl	8000c0c <HAL_GetTick>
 8002fbe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fd fe23 	bl	8000c0c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b11      	cmp	r3, #17
 8002fce:	d903      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1f6      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
 8002fd4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd8:	4ba9      	ldr	r3, [pc, #676]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8002fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ed      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80bd 	beq.w	800316e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ffa:	4ba1      	ldr	r3, [pc, #644]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10e      	bne.n	8003024 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b9e      	ldr	r3, [pc, #632]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a9d      	ldr	r2, [pc, #628]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
 8003012:	4b9b      	ldr	r3, [pc, #620]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003024:	4b97      	ldr	r3, [pc, #604]	; (8003284 <HAL_RCC_OscConfig+0x774>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d118      	bne.n	8003062 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <HAL_RCC_OscConfig+0x774>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a93      	ldr	r2, [pc, #588]	; (8003284 <HAL_RCC_OscConfig+0x774>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303c:	f7fd fde6 	bl	8000c0c <HAL_GetTick>
 8003040:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fd fde2 	bl	8000c0c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1b5      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003056:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x774>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800306e:	4b84      	ldr	r3, [pc, #528]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	497f      	ldr	r1, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003094:	4b7a      	ldr	r3, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030a4:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b4:	e018      	b.n	80030e8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	4a70      	ldr	r2, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030c8:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a6c      	ldr	r2, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fd fd8c 	bl	8000c0c <HAL_GetTick>
 80030f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fd fd88 	bl	8000c0c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e159      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ed      	beq.n	80030f8 <HAL_RCC_OscConfig+0x5e8>
 800311c:	e01d      	b.n	800315a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fd fd75 	bl	8000c0c <HAL_GetTick>
 8003122:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fd71 	bl	8000c0c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e142      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ed      	bne.n	8003126 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800314a:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	4a4b      	ldr	r2, [pc, #300]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800315a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800315e:	2b01      	cmp	r3, #1
 8003160:	d105      	bne.n	800316e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a46      	ldr	r2, [pc, #280]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d03c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01c      	beq.n	80031bc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003188:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fd fd3b 	bl	8000c0c <HAL_GetTick>
 8003196:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319a:	f7fd fd37 	bl	8000c0c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e10a      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ac:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80031ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ef      	beq.n	800319a <HAL_RCC_OscConfig+0x68a>
 80031ba:	e01b      	b.n	80031f4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80031be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fd fd1e 	bl	8000c0c <HAL_GetTick>
 80031d0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d4:	f7fd fd1a 	bl	8000c0c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0ed      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 80031e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ef      	bne.n	80031d4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80e1 	beq.w	80033c0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	2b02      	cmp	r3, #2
 8003204:	f040 80b5 	bne.w	8003372 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	429a      	cmp	r2, r3
 800321a:	d124      	bne.n	8003266 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	3b01      	subs	r3, #1
 8003228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11b      	bne.n	8003266 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d113      	bne.n	8003266 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d109      	bne.n	8003266 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d05f      	beq.n	8003326 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d05a      	beq.n	8003322 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_RCC_OscConfig+0x770>)
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003278:	f7fd fcc8 	bl	8000c0c <HAL_GetTick>
 800327c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	e00c      	b.n	800329a <HAL_RCC_OscConfig+0x78a>
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd fcc0 	bl	8000c0c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e093      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_RCC_OscConfig+0x8c0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b6:	3a01      	subs	r2, #1
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c0:	0212      	lsls	r2, r2, #8
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0552      	lsls	r2, r2, #21
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032d4:	0852      	lsrs	r2, r2, #1
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0652      	lsls	r2, r2, #25
 80032da:	430a      	orrs	r2, r1
 80032dc:	493b      	ldr	r1, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e2:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4a36      	ldr	r2, [pc, #216]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80032f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fa:	f7fd fc87 	bl	8000c0c <HAL_GetTick>
 80032fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fd fc83 	bl	8000c0c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e056      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003320:	e04e      	b.n	80033c0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e04d      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d146      	bne.n	80033c0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a25      	ldr	r2, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003348:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334a:	f7fd fc5f 	bl	8000c0c <HAL_GetTick>
 800334e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd fc5b 	bl	8000c0c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e02e      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x842>
 8003370:	e026      	b.n	80033c0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d021      	beq.n	80033bc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fc42 	bl	8000c0c <HAL_GetTick>
 8003388:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338c:	f7fd fc3e 	bl	8000c0c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e011      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_RCC_OscConfig+0x8bc>)
 80033b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033b4:	f023 0303 	bic.w	r3, r3, #3
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e001      	b.n	80033c0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	; 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	f99f808c 	.word	0xf99f808c

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0e7      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4970      	ldr	r1, [pc, #448]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cf      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	429a      	cmp	r2, r3
 8003432:	d908      	bls.n	8003446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4960      	ldr	r1, [pc, #384]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d04c      	beq.n	80034ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0a6      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e09a      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e08e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349a:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e086      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4943      	ldr	r1, [pc, #268]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd fba6 	bl	8000c0c <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fba2 	bl	8000c0c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e06e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003504:	429a      	cmp	r2, r3
 8003506:	d208      	bcs.n	800351a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	492b      	ldr	r1, [pc, #172]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d210      	bcs.n	800354a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0207 	bic.w	r2, r3, #7
 8003530:	4923      	ldr	r1, [pc, #140]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e036      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4918      	ldr	r1, [pc, #96]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003588:	f000 f824 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	490b      	ldr	r1, [pc, #44]	; (80035c8 <HAL_RCC_ClockConfig+0x1f4>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1fc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fadd 	bl	8000b6c <HAL_InitTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08004468 	.word	0x08004468
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d121      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d11e      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e005      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003644:	e00a      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d102      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e004      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d101      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800365a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d134      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0xa6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0xac>
 8003678:	e005      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800367c:	617b      	str	r3, [r7, #20]
      break;
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003682:	617b      	str	r3, [r7, #20]
      break;
 8003684:	e002      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0e5b      	lsrs	r3, r3, #25
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	3301      	adds	r3, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036cc:	69bb      	ldr	r3, [r7, #24]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08004480 	.word	0x08004480
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCC_GetPCLK1Freq+0x28>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	08004478 	.word	0x08004478

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003734:	f7ff ffda 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0adb      	lsrs	r3, r3, #11
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	08004478 	.word	0x08004478

0800375c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003774:	f7ff f968 	bl	8002a48 <HAL_PWREx_GetVoltageRange>
 8003778:	6178      	str	r0, [r7, #20]
 800377a:	e014      	b.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003786:	6593      	str	r3, [r2, #88]	; 0x58
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003794:	f7ff f958 	bl	8002a48 <HAL_PWREx_GetVoltageRange>
 8003798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d10b      	bne.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d919      	bls.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2ba0      	cmp	r3, #160	; 0xa0
 80037b8:	d902      	bls.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ba:	2302      	movs	r3, #2
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e013      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c0:	2301      	movs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e010      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d902      	bls.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037cc:	2303      	movs	r3, #3
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	e00a      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d102      	bne.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037d8:	2302      	movs	r3, #2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e004      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d101      	bne.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e4:	2301      	movs	r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 0207 	bic.w	r2, r3, #7
 80037f0:	4909      	ldr	r1, [pc, #36]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	40022000 	.word	0x40022000

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003824:	2300      	movs	r3, #0
 8003826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003828:	2300      	movs	r3, #0
 800382a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 809e 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6593      	str	r3, [r2, #88]	; 0x58
 8003860:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386c:	2301      	movs	r3, #1
 800386e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003870:	4b3a      	ldr	r3, [pc, #232]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a39      	ldr	r2, [pc, #228]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800387c:	f7fd f9c6 	bl	8000c0c <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003882:	e009      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fd f9c2 	bl	8000c0c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	74fb      	strb	r3, [r7, #19]
        break;
 8003896:	e005      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d15a      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d019      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd f982 	bl	8000c0c <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd f97e 	bl	8000c0c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d902      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	74fb      	strb	r3, [r7, #19]
            break;
 8003922:	e006      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ec      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003964:	7c7b      	ldrb	r3, [r7, #17]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b6e      	ldr	r3, [pc, #440]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a6d      	ldr	r2, [pc, #436]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003982:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4964      	ldr	r1, [pc, #400]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a4:	4b5f      	ldr	r3, [pc, #380]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 020c 	bic.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	495c      	ldr	r1, [pc, #368]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c6:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4953      	ldr	r1, [pc, #332]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e8:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	494b      	ldr	r1, [pc, #300]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0a:	4b46      	ldr	r3, [pc, #280]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4942      	ldr	r1, [pc, #264]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a2c:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	493a      	ldr	r1, [pc, #232]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4931      	ldr	r1, [pc, #196]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4929      	ldr	r1, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4920      	ldr	r1, [pc, #128]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	4918      	ldr	r1, [pc, #96]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000

08003b28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b32:	f043 0304 	orr.w	r3, r3, #4
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fc fec4 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f82c 	bl	8003be4 <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa7a 	bl	8004098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb01 	bl	80041dc <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b08a      	sub	sp, #40	; 0x28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b9e      	ldr	r3, [pc, #632]	; (8003e8c <UART_SetConfig+0x2a8>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a93      	ldr	r2, [pc, #588]	; (8003e90 <UART_SetConfig+0x2ac>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a8a      	ldr	r2, [pc, #552]	; (8003e94 <UART_SetConfig+0x2b0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d126      	bne.n	8003cbc <UART_SetConfig+0xd8>
 8003c6e:	4b8a      	ldr	r3, [pc, #552]	; (8003e98 <UART_SetConfig+0x2b4>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d81b      	bhi.n	8003cb4 <UART_SetConfig+0xd0>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0xa0>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e0ab      	b.n	8003df4 <UART_SetConfig+0x210>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e0a7      	b.n	8003df4 <UART_SetConfig+0x210>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003caa:	e0a3      	b.n	8003df4 <UART_SetConfig+0x210>
 8003cac:	2308      	movs	r3, #8
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb2:	e09f      	b.n	8003df4 <UART_SetConfig+0x210>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e09b      	b.n	8003df4 <UART_SetConfig+0x210>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a76      	ldr	r2, [pc, #472]	; (8003e9c <UART_SetConfig+0x2b8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d138      	bne.n	8003d38 <UART_SetConfig+0x154>
 8003cc6:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <UART_SetConfig+0x2b4>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d82d      	bhi.n	8003d30 <UART_SetConfig+0x14c>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <UART_SetConfig+0xf8>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d19 	.word	0x08003d19
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d29 	.word	0x08003d29
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d16:	e06d      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1e:	e069      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d20:	2304      	movs	r3, #4
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d26:	e065      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e061      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d30:	2310      	movs	r3, #16
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e05d      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <UART_SetConfig+0x2bc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d125      	bne.n	8003d8e <UART_SetConfig+0x1aa>
 8003d42:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <UART_SetConfig+0x2b4>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d4c:	2b30      	cmp	r3, #48	; 0x30
 8003d4e:	d016      	beq.n	8003d7e <UART_SetConfig+0x19a>
 8003d50:	2b30      	cmp	r3, #48	; 0x30
 8003d52:	d818      	bhi.n	8003d86 <UART_SetConfig+0x1a2>
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d00a      	beq.n	8003d6e <UART_SetConfig+0x18a>
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d814      	bhi.n	8003d86 <UART_SetConfig+0x1a2>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <UART_SetConfig+0x182>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d008      	beq.n	8003d76 <UART_SetConfig+0x192>
 8003d64:	e00f      	b.n	8003d86 <UART_SetConfig+0x1a2>
 8003d66:	2300      	movs	r3, #0
 8003d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6c:	e042      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d74:	e03e      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d76:	2304      	movs	r3, #4
 8003d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7c:	e03a      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d84:	e036      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d86:	2310      	movs	r3, #16
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8c:	e032      	b.n	8003df4 <UART_SetConfig+0x210>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <UART_SetConfig+0x2ac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d12a      	bne.n	8003dee <UART_SetConfig+0x20a>
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <UART_SetConfig+0x2b4>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da6:	d01a      	beq.n	8003dde <UART_SetConfig+0x1fa>
 8003da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dac:	d81b      	bhi.n	8003de6 <UART_SetConfig+0x202>
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	d00c      	beq.n	8003dce <UART_SetConfig+0x1ea>
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	d815      	bhi.n	8003de6 <UART_SetConfig+0x202>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <UART_SetConfig+0x1e2>
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d008      	beq.n	8003dd6 <UART_SetConfig+0x1f2>
 8003dc4:	e00f      	b.n	8003de6 <UART_SetConfig+0x202>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e012      	b.n	8003df4 <UART_SetConfig+0x210>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e00e      	b.n	8003df4 <UART_SetConfig+0x210>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	e00a      	b.n	8003df4 <UART_SetConfig+0x210>
 8003dde:	2308      	movs	r3, #8
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de4:	e006      	b.n	8003df4 <UART_SetConfig+0x210>
 8003de6:	2310      	movs	r3, #16
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dec:	e002      	b.n	8003df4 <UART_SetConfig+0x210>
 8003dee:	2310      	movs	r3, #16
 8003df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <UART_SetConfig+0x2ac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f040 808a 	bne.w	8003f14 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d824      	bhi.n	8003e52 <UART_SetConfig+0x26e>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x22c>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e53 	.word	0x08003e53
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e43 	.word	0x08003e43
 8003e24:	08003e53 	.word	0x08003e53
 8003e28:	08003e53 	.word	0x08003e53
 8003e2c:	08003e53 	.word	0x08003e53
 8003e30:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff fc66 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8003e38:	61f8      	str	r0, [r7, #28]
        break;
 8003e3a:	e010      	b.n	8003e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <UART_SetConfig+0x2c0>)
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e00d      	b.n	8003e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7ff fbc7 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003e46:	61f8      	str	r0, [r7, #28]
        break;
 8003e48:	e009      	b.n	8003e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	61fb      	str	r3, [r7, #28]
        break;
 8003e50:	e005      	b.n	8003e5e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8109 	beq.w	8004078 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d305      	bcc.n	8003e82 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d912      	bls.n	8003ea8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e88:	e0f6      	b.n	8004078 <UART_SetConfig+0x494>
 8003e8a:	bf00      	nop
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40008000 	.word	0x40008000
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40004800 	.word	0x40004800
 8003ea4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	461c      	mov	r4, r3
 8003eae:	4615      	mov	r5, r2
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	022b      	lsls	r3, r5, #8
 8003eba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ebe:	0222      	lsls	r2, r4, #8
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	6849      	ldr	r1, [r1, #4]
 8003ec4:	0849      	lsrs	r1, r1, #1
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	4688      	mov	r8, r1
 8003eca:	4681      	mov	r9, r0
 8003ecc:	eb12 0a08 	adds.w	sl, r2, r8
 8003ed0:	eb43 0b09 	adc.w	fp, r3, r9
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	f7fc f971 	bl	80001cc <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef8:	d308      	bcc.n	8003f0c <UART_SetConfig+0x328>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f00:	d204      	bcs.n	8003f0c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e0b5      	b.n	8004078 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f12:	e0b1      	b.n	8004078 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	d15d      	bne.n	8003fda <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d827      	bhi.n	8003f76 <UART_SetConfig+0x392>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x348>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7ff fbd8 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e014      	b.n	8003f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7ff fbea 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	61f8      	str	r0, [r7, #28]
        break;
 8003f5e:	e010      	b.n	8003f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <UART_SetConfig+0x4b0>)
 8003f62:	61fb      	str	r3, [r7, #28]
        break;
 8003f64:	e00d      	b.n	8003f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7ff fb35 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003f6a:	61f8      	str	r0, [r7, #28]
        break;
 8003f6c:	e009      	b.n	8003f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	61fb      	str	r3, [r7, #28]
        break;
 8003f74:	e005      	b.n	8003f82 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d077      	beq.n	8004078 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005a      	lsls	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d916      	bls.n	8003fd2 <UART_SetConfig+0x3ee>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003faa:	d212      	bcs.n	8003fd2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f023 030f 	bic.w	r3, r3, #15
 8003fb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	8afa      	ldrh	r2, [r7, #22]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e052      	b.n	8004078 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fd8:	e04e      	b.n	8004078 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d827      	bhi.n	8004032 <UART_SetConfig+0x44e>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x404>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	08004023 	.word	0x08004023
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004033 	.word	0x08004033
 8004004:	08004033 	.word	0x08004033
 8004008:	0800402b 	.word	0x0800402b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff fb7a 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004010:	61f8      	str	r0, [r7, #28]
        break;
 8004012:	e014      	b.n	800403e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7ff fb8c 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e010      	b.n	800403e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <UART_SetConfig+0x4b0>)
 800401e:	61fb      	str	r3, [r7, #28]
        break;
 8004020:	e00d      	b.n	800403e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7ff fad7 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8004026:	61f8      	str	r0, [r7, #28]
        break;
 8004028:	e009      	b.n	800403e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	61fb      	str	r3, [r7, #28]
        break;
 8004030:	e005      	b.n	800403e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800403c:	bf00      	nop
    }

    if (pclk != 0U)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d019      	beq.n	8004078 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	085a      	lsrs	r2, r3, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	441a      	add	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	d909      	bls.n	8004072 <UART_SetConfig+0x48e>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d205      	bcs.n	8004072 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	e002      	b.n	8004078 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004084:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004088:	4618      	mov	r0, r3
 800408a:	3728      	adds	r7, #40	; 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	00f42400 	.word	0x00f42400

08004098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004196:	d10a      	bne.n	80041ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ec:	f7fc fd0e 	bl	8000c0c <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10e      	bne.n	800421e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f82d 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e023      	b.n	8004266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d10e      	bne.n	800424a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f817 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00d      	b.n	8004266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b09c      	sub	sp, #112	; 0x70
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	e0a5      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	f000 80a1 	beq.w	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fc fcbf 	bl	8000c0c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800429a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429c:	2b00      	cmp	r3, #0
 800429e:	d13e      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e067      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d04f      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d147      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004344:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
 8004366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	613b      	str	r3, [r7, #16]
   return(result);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004398:	623a      	str	r2, [r7, #32]
 800439a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e010      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f43f af4a 	beq.w	8004280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3770      	adds	r7, #112	; 0x70
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	; (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	; (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	; (800443c <__libc_init_array+0x44>)
 800440c:	f000 f820 	bl	8004450 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	080044b8 	.word	0x080044b8
 8004434:	080044b8 	.word	0x080044b8
 8004438:	080044b8 	.word	0x080044b8
 800443c:	080044bc 	.word	0x080044bc

08004440 <memset>:
 8004440:	4402      	add	r2, r0
 8004442:	4603      	mov	r3, r0
 8004444:	4293      	cmp	r3, r2
 8004446:	d100      	bne.n	800444a <memset+0xa>
 8004448:	4770      	bx	lr
 800444a:	f803 1b01 	strb.w	r1, [r3], #1
 800444e:	e7f9      	b.n	8004444 <memset+0x4>

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
