
CITECH_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f78  08005f78  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f80  08005f80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000074  08005ffc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005ffc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116cd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f4  00000000  00000000  00031771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00033c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00034aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdf3  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010170  00000000  00000000  000515f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b39f7  00000000  00000000  00061763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011515a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003efc  00000000  00000000  001151ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ed0 	.word	0x08005ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005ed0 	.word	0x08005ed0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fc2b 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f858 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f982 	bl	8000898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f950 	bl	8000838 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f8a8 	bl	80006ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f91c 	bl	80007d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2, UART1_rxBuffer, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	491e      	ldr	r1, [pc, #120]	; (800061c <main+0x98>)
 80005a4:	481e      	ldr	r0, [pc, #120]	; (8000620 <main+0x9c>)
 80005a6:	f003 fdb9 	bl	800411c <HAL_UART_Receive_IT>

	     // uint8_t Test[] = "Hello World !!!\r\n"; //Data to send

	 	// HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
	 	// HAL_Delay(1000);
	  if(integration < 100)
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <main+0xa0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b63      	cmp	r3, #99	; 0x63
 80005b0:	dc19      	bgt.n	80005e6 <main+0x62>
	  	{
		  if ((button_pressed == 1 && GetDataDone == 1) || (UART1_rxBuffer[0] == 'O' && GetDataDone == 1))
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0xa4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d103      	bne.n	80005c2 <main+0x3e>
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <main+0xa8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d007      	beq.n	80005d2 <main+0x4e>
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x98>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b4f      	cmp	r3, #79	; 0x4f
 80005c8:	d109      	bne.n	80005de <main+0x5a>
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <main+0xa8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d105      	bne.n	80005de <main+0x5a>
		  {
			  GetDataDone = 0;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xa8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
			  HAL_ADC_Start_IT(&hadc1);
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0xac>)
 80005da:	f000 fff5 	bl	80015c8 <HAL_ADC_Start_IT>


		  }
          HAL_Delay(5);
 80005de:	2005      	movs	r0, #5
 80005e0:	f000 fc74 	bl	8000ecc <HAL_Delay>
 80005e4:	e7e1      	b.n	80005aa <main+0x26>
	  else
	  {



	      sprintf(str,"AnalogPort_A1:%u\r\n",adc_val);
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <main+0xb0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4912      	ldr	r1, [pc, #72]	; (8000638 <main+0xb4>)
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <main+0xb8>)
 80005f0:	f005 f800 	bl	80055f4 <siprintf>
	      HAL_UART_Transmit(&huart2,str,strlen(str),10); // Sending in normal mode
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <main+0xb8>)
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	230a      	movs	r3, #10
 8000600:	490e      	ldr	r1, [pc, #56]	; (800063c <main+0xb8>)
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x9c>)
 8000604:	f003 fcf6 	bl	8003ff4 <HAL_UART_Transmit>

          integration = 0;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <main+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
          button_pressed = 0;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <main+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
          UART1_rxBuffer[0] = 0;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <main+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	  if(integration < 100)
 800061a:	e7c6      	b.n	80005aa <main+0x26>
 800061c:	200000bc 	.word	0x200000bc
 8000620:	200001b0 	.word	0x200001b0
 8000624:	200000b8 	.word	0x200000b8
 8000628:	200000b4 	.word	0x200000b4
 800062c:	20000000 	.word	0x20000000
 8000630:	200000c8 	.word	0x200000c8
 8000634:	20000090 	.word	0x20000090
 8000638:	08005ee8 	.word	0x08005ee8
 800063c:	20000094 	.word	0x20000094

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ffc8 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f002 fc05 	bl	8002e74 <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 f9de 	bl	8000a30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 fbe0 	bl	8002e38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemClock_Config+0xa8>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <SystemClock_Config+0xa8>)
 8000680:	f023 0318 	bic.w	r3, r3, #24
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000688:	2314      	movs	r3, #20
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc3b 	bl	8002f20 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006b0:	f000 f9be 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 f889 	bl	80037e4 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 f9aa 	bl	8000a30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006dc:	f003 fc2c 	bl	8003f38 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e0:	bf00      	nop
 80006e2:	3758      	adds	r7, #88	; 0x58
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000710:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <MX_ADC1_Init+0xe4>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_ADC1_Init+0xe0>)
 800072e:	2204      	movs	r2, #4
 8000730:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	4817      	ldr	r0, [pc, #92]	; (80007cc <MX_ADC1_Init+0xe0>)
 8000770:	f000 fdda 	bl	8001328 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077a:	f000 f959 	bl	8000a30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_ADC1_Init+0xe0>)
 800078a:	f001 ff65 	bl	8002658 <HAL_ADCEx_MultiModeConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000794:	f000 f94c 	bl	8000a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_ADC1_Init+0xe8>)
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2306      	movs	r3, #6
 800079e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a4:	237f      	movs	r3, #127	; 0x7f
 80007a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a8:	2304      	movs	r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0xe0>)
 80007b6:	f001 fa75 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007c0:	f000 f936 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000c8 	.word	0x200000c8
 80007d0:	50040000 	.word	0x50040000
 80007d4:	21800100 	.word	0x21800100

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	f003 fb9c 	bl	8003f58 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f903 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000012c 	.word	0x2000012c
 8000834:	40013800 	.word	0x40013800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f003 fb6c 	bl	8003f58 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f8d3 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001b0 	.word	0x200001b0
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0xbc>)
 80008fc:	f002 fa52 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000900:	2302      	movs	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000904:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800090a:	2302      	movs	r3, #2
 800090c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f002 f8d2 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800091c:	2308      	movs	r3, #8
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <MX_GPIO_Init+0xbc>)
 8000934:	f002 f8c4 	bl	8002ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2007      	movs	r0, #7
 800093e:	f002 f80a 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000942:	2007      	movs	r0, #7
 8000944:	f002 f823 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]


	// Read & Update The ADC Result
      adc_val = adc_val + HAL_ADC_GetValue(&hadc1);
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <HAL_ADC_ConvCpltCallback+0x34>)
 8000962:	f000 ff63 	bl	800182c <HAL_ADC_GetValue>
 8000966:	4603      	mov	r3, r0
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <HAL_ADC_ConvCpltCallback+0x38>)
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_ADC_ConvCpltCallback+0x38>)
 8000972:	601a      	str	r2, [r3, #0]
   // HAL_ADC_Stop_IT(&hadc1);
      integration ++;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_ADC_ConvCpltCallback+0x3c>)
 800097c:	6013      	str	r3, [r2, #0]
      GetDataDone = 1 ;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_ADC_ConvCpltCallback+0x40>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]


}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000c8 	.word	0x200000c8
 8000990:	20000090 	.word	0x20000090
 8000994:	200000b8 	.word	0x200000b8
 8000998:	20000000 	.word	0x20000000

0800099c <HAL_GPIO_EXTI_Callback>:

// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1) // If The INT Source Is EXTI Line9 (A9 Pin)
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d10c      	bne.n	80009c6 <HAL_GPIO_EXTI_Callback+0x2a>
    {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle The Output (LED) Pin
 80009ac:	2108      	movs	r1, #8
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <HAL_GPIO_EXTI_Callback+0x34>)
 80009b0:	f002 fa10 	bl	8002dd4 <HAL_GPIO_TogglePin>
   // HAL_ADC_Start_IT(&hadc1);
    adc_val =0;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
    integration = 0;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
    button_pressed = 1;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_GPIO_EXTI_Callback+0x40>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
    }
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400
 80009d4:	20000090 	.word	0x20000090
 80009d8:	200000b8 	.word	0x200000b8
 80009dc:	200000b4 	.word	0x200000b4

080009e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	490c      	ldr	r1, [pc, #48]	; (8000a1c <HAL_UART_RxCpltCallback+0x3c>)
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <HAL_UART_RxCpltCallback+0x40>)
 80009ee:	f003 fb95 	bl	800411c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, UART1_rxBuffer, 12, 100);
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	220c      	movs	r2, #12
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <HAL_UART_RxCpltCallback+0x3c>)
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <HAL_UART_RxCpltCallback+0x40>)
 80009fa:	f003 fafb 	bl	8003ff4 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle The Output (LED) Pin
 80009fe:	2108      	movs	r1, #8
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <HAL_UART_RxCpltCallback+0x44>)
 8000a02:	f002 f9e7 	bl	8002dd4 <HAL_GPIO_TogglePin>
	adc_val =0;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_UART_RxCpltCallback+0x48>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
	integration = 0;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_UART_RxCpltCallback+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	200001b0 	.word	0x200001b0
 8000a24:	48000400 	.word	0x48000400
 8000a28:	20000090 	.word	0x20000090
 8000a2c:	200000b8 	.word	0x200000b8

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_ADC_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12c      	bne.n	8000b00 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_ADC_MspInit+0x88>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ada:	230b      	movs	r3, #11
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 ffe8 	bl	8002ac0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2012      	movs	r0, #18
 8000af6:	f001 ff2e 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000afa:	2012      	movs	r0, #18
 8000afc:	f001 ff47 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	50040000 	.word	0x50040000
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b098      	sub	sp, #96	; 0x60
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	2234      	movs	r2, #52	; 0x34
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fd57 	bl	80055e4 <memset>
  if(huart->Instance==USART1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <HAL_UART_MspInit+0x158>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d138      	bne.n	8000bb2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f86d 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f7ff ff6a 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b60:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6613      	str	r3, [r2, #96]	; 0x60
 8000b68:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	4a3c      	ldr	r2, [pc, #240]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f001 ff88 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	e055      	b.n	8000c5e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <HAL_UART_MspInit+0x160>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d150      	bne.n	8000c5e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 f82f 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000bd4:	f7ff ff2c 	bl	8000a30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	; 0x58
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x15c>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 ff4b 	bl	8002ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 ff39 	bl	8002ac0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2026      	movs	r0, #38	; 0x26
 8000c54:	f001 fe7f 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c58:	2026      	movs	r0, #38	; 0x26
 8000c5a:	f001 fe98 	bl	800298e <HAL_NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3760      	adds	r7, #96	; 0x60
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40004400 	.word	0x40004400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8e4 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 f89b 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <ADC1_2_IRQHandler+0x10>)
 8000cde:	f000 fdb3 	bl	8001848 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000c8 	.word	0x200000c8

08000cec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <USART2_IRQHandler+0x10>)
 8000cf2:	f003 fa69 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001b0 	.word	0x200001b0

08000d00 <_sbrk>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
 8000d30:	f004 fc2e 	bl	8005590 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000a000 	.word	0x2000a000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	20000234 	.word	0x20000234
 8000d68:	20000250 	.word	0x20000250

08000d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopForever+0x2>
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x6>)
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xa>)
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0xe>)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:
 8000da2:	58d4      	ldr	r4, [r2, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:
 8000da8:	18c4      	adds	r4, r0, r3
 8000daa:	428c      	cmp	r4, r1
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopForever+0x16>)
 8000db2:	2300      	movs	r3, #0
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:
 8000dba:	42a2      	cmp	r2, r4
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>
 8000dbe:	f004 fbed 	bl	800559c <__libc_init_array>
 8000dc2:	f7ff fbdf 	bl	8000584 <main>

08000dc6 <LoopForever>:
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
 8000dc8:	2000a000 	.word	0x2000a000
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000074 	.word	0x20000074
 8000dd4:	08005f88 	.word	0x08005f88
 8000dd8:	20000074 	.word	0x20000074
 8000ddc:	2000024c 	.word	0x2000024c

08000de0 <COMP_IRQHandler>:
 8000de0:	e7fe      	b.n	8000de0 <COMP_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f001 fda7 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff fe1a 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fdb3 	bl	80029aa <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f001 fd7d 	bl	8002956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000238 	.word	0x20000238

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000238 	.word	0x20000238

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c

08000f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3360      	adds	r3, #96	; 0x60
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LL_ADC_SetOffset+0x44>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	03fff000 	.word	0x03fff000

08000fc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3360      	adds	r3, #96	; 0x60
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3360      	adds	r3, #96	; 0x60
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	431a      	orrs	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800101a:	bf00      	nop
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	615a      	str	r2, [r3, #20]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3330      	adds	r3, #48	; 0x30
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	4413      	add	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	211f      	movs	r1, #31
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	401a      	ands	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0e9b      	lsrs	r3, r3, #26
 80010aa:	f003 011f 	and.w	r1, r3, #31
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3314      	adds	r3, #20
 8001100:	461a      	mov	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	0e5b      	lsrs	r3, r3, #25
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0d1b      	lsrs	r3, r3, #20
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2107      	movs	r1, #7
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	0d1b      	lsrs	r3, r3, #20
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	431a      	orrs	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0318 	and.w	r3, r3, #24
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <LL_ADC_SetChannelSingleDiff+0x44>)
 800116c:	40d9      	lsrs	r1, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	400b      	ands	r3, r1
 8001172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001176:	431a      	orrs	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	0007ffff 	.word	0x0007ffff

08001190 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 031f 	and.w	r3, r3, #31
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6093      	str	r3, [r2, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001200:	d101      	bne.n	8001206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001250:	d101      	bne.n	8001256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <LL_ADC_IsEnabled+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_IsEnabled+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c6:	f043 0204 	orr.w	r2, r3, #4
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b08      	cmp	r3, #8
 8001312:	d101      	bne.n	8001318 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e131      	b.n	80015a6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fb97 	bl	8000a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff3f 	bl	80011ec <LL_ADC_IsDeepPowerDownEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff25 	bl	80011c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff5a 	bl	800123c <LL_ADC_IsInternalRegulatorEnabled>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d115      	bne.n	80013ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff3e 	bl	8001214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001398:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <HAL_ADC_Init+0x288>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	099b      	lsrs	r3, r3, #6
 800139e:	4a85      	ldr	r2, [pc, #532]	; (80015b4 <HAL_ADC_Init+0x28c>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	3301      	adds	r3, #1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f9      	bne.n	80013ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff3c 	bl	800123c <LL_ADC_IsInternalRegulatorEnabled>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff75 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 80013f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 80ca 	bne.w	8001594 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80c6 	bne.w	8001594 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001410:	f043 0202 	orr.w	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff35 	bl	800128c <LL_ADC_IsEnabled>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d110      	bne.n	800144a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001428:	4863      	ldr	r0, [pc, #396]	; (80015b8 <HAL_ADC_Init+0x290>)
 800142a:	f7ff ff2f 	bl	800128c <LL_ADC_IsEnabled>
 800142e:	4604      	mov	r4, r0
 8001430:	4862      	ldr	r0, [pc, #392]	; (80015bc <HAL_ADC_Init+0x294>)
 8001432:	f7ff ff2b 	bl	800128c <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	4323      	orrs	r3, r4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4619      	mov	r1, r3
 8001444:	485e      	ldr	r0, [pc, #376]	; (80015c0 <HAL_ADC_Init+0x298>)
 8001446:	f7ff fd65 	bl	8000f14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7e5b      	ldrb	r3, [r3, #25]
 800144e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800145a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001460:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	3b01      	subs	r3, #1
 800147e:	045b      	lsls	r3, r3, #17
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_ADC_Init+0x29c>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	430b      	orrs	r3, r1
 80014b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff0d 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 80014c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff1a 	bl	8001300 <LL_ADC_INJ_IsConversionOngoing>
 80014cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d13d      	bne.n	8001550 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13a      	bne.n	8001550 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	430b      	orrs	r3, r1
 8001502:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150a:	2b01      	cmp	r3, #1
 800150c:	d118      	bne.n	8001540 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001524:	4311      	orrs	r1, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001530:	430a      	orrs	r2, r1
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	e007      	b.n	8001550 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10c      	bne.n	8001572 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f023 010f 	bic.w	r1, r3, #15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
 8001570:	e007      	b.n	8001582 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 020f 	bic.w	r2, r2, #15
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
 8001592:	e007      	b.n	80015a4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	f043 0210 	orr.w	r2, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000004 	.word	0x20000004
 80015b4:	053e2d63 	.word	0x053e2d63
 80015b8:	50040000 	.word	0x50040000
 80015bc:	50040100 	.word	0x50040100
 80015c0:	50040300 	.word	0x50040300
 80015c4:	fff0c007 	.word	0xfff0c007

080015c8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d0:	4893      	ldr	r0, [pc, #588]	; (8001820 <HAL_ADC_Start_IT+0x258>)
 80015d2:	f7ff fddd 	bl	8001190 <LL_ADC_GetMultimode>
 80015d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe7c 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 8111 	bne.w	800180c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_Start_IT+0x30>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e10e      	b.n	8001816 <HAL_ADC_Start_IT+0x24e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 ff4b 	bl	800249c <ADC_Enable>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 80f8 	bne.w	8001802 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7e      	ldr	r2, [pc, #504]	; (8001824 <HAL_ADC_Start_IT+0x25c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d002      	beq.n	8001636 <HAL_ADC_Start_IT+0x6e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	e000      	b.n	8001638 <HAL_ADC_Start_IT+0x70>
 8001636:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_ADC_Start_IT+0x260>)
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	4293      	cmp	r3, r2
 800163e:	d002      	beq.n	8001646 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f023 0206 	bic.w	r2, r3, #6
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	659a      	str	r2, [r3, #88]	; 0x58
 800166a:	e002      	b.n	8001672 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	221c      	movs	r2, #28
 8001678:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 021c 	bic.w	r2, r2, #28
 8001690:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b08      	cmp	r3, #8
 8001698:	d108      	bne.n	80016ac <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0208 	orr.w	r2, r2, #8
 80016a8:	605a      	str	r2, [r3, #4]
          break;
 80016aa:	e008      	b.n	80016be <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0204 	orr.w	r2, r2, #4
 80016ba:	605a      	str	r2, [r3, #4]
          break;
 80016bc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0210 	orr.w	r2, r2, #16
 80016d4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_ADC_Start_IT+0x25c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <HAL_ADC_Start_IT+0x11e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e000      	b.n	80016e8 <HAL_ADC_Start_IT+0x120>
 80016e6:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_ADC_Start_IT+0x260>)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d008      	beq.n	8001702 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d002      	beq.n	8001702 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b09      	cmp	r3, #9
 8001700:	d13b      	bne.n	800177a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d02d      	beq.n	800176c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d110      	bne.n	800174a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0220 	bic.w	r2, r2, #32
 8001736:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001746:	605a      	str	r2, [r3, #4]
              break;
 8001748:	e011      	b.n	800176e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001758:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	605a      	str	r2, [r3, #4]
              break;
 800176a:	e000      	b.n	800176e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 800176c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fd9d 	bl	80012b2 <LL_ADC_REG_StartConversion>
 8001778:	e04c      	b.n	8001814 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_ADC_Start_IT+0x25c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d002      	beq.n	8001796 <HAL_ADC_Start_IT+0x1ce>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e000      	b.n	8001798 <HAL_ADC_Start_IT+0x1d0>
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_ADC_Start_IT+0x260>)
 8001798:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d035      	beq.n	8001812 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d110      	bne.n	80017e0 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0220 	bic.w	r2, r2, #32
 80017cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017dc:	605a      	str	r2, [r3, #4]
              break;
 80017de:	e019      	b.n	8001814 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	605a      	str	r2, [r3, #4]
              break;
 8001800:	e008      	b.n	8001814 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800180a:	e003      	b.n	8001814 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
 8001810:	e000      	b.n	8001814 <HAL_ADC_Start_IT+0x24c>
        }
 8001812:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	50040300 	.word	0x50040300
 8001824:	50040100 	.word	0x50040100
 8001828:	50040000 	.word	0x50040000

0800182c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001864:	4882      	ldr	r0, [pc, #520]	; (8001a70 <HAL_ADC_IRQHandler+0x228>)
 8001866:	f7ff fc93 	bl	8001190 <LL_ADC_GetMultimode>
 800186a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d017      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x5e>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d012      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fed3 	bl	8002644 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_IRQHandler+0x72>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8083 	beq.w	80019cc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d07d      	beq.n	80019cc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fbad 	bl	800104c <LL_ADC_REG_IsTriggerSourceSWStart>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d062      	beq.n	80019be <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_ADC_IRQHandler+0x22c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d002      	beq.n	8001908 <HAL_ADC_IRQHandler+0xc0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e000      	b.n	800190a <HAL_ADC_IRQHandler+0xc2>
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_ADC_IRQHandler+0x230>)
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4293      	cmp	r3, r2
 8001910:	d008      	beq.n	8001924 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d002      	beq.n	8001924 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d104      	bne.n	800192e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	e00c      	b.n	8001948 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <HAL_ADC_IRQHandler+0x22c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d002      	beq.n	800193e <HAL_ADC_IRQHandler+0xf6>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e000      	b.n	8001940 <HAL_ADC_IRQHandler+0xf8>
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_ADC_IRQHandler+0x230>)
 8001940:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d135      	bne.n	80019be <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b08      	cmp	r3, #8
 800195e:	d12e      	bne.n	80019be <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fcb8 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11a      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020c 	bic.w	r2, r2, #12
 800197e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d112      	bne.n	80019be <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
 80019a4:	e00b      	b.n	80019be <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe ffca 	bl	8000958 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	220c      	movs	r2, #12
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x198>
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 809f 	beq.w	8001b2a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8099 	beq.w	8001b2a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fb58 	bl	80010ca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb13 	bl	800104c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_ADC_IRQHandler+0x22c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d002      	beq.n	8001a38 <HAL_ADC_IRQHandler+0x1f0>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_IRQHandler+0x1f2>
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_ADC_IRQHandler+0x230>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d008      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d104      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	e013      	b.n	8001a86 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_ADC_IRQHandler+0x22c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x234>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e007      	b.n	8001a7e <HAL_ADC_IRQHandler+0x236>
 8001a6e:	bf00      	nop
 8001a70:	50040300 	.word	0x50040300
 8001a74:	50040100 	.word	0x50040100
 8001a78:	50040000 	.word	0x50040000
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_ADC_IRQHandler+0x42c>)
 8001a7e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d047      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ADC_IRQHandler+0x25e>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03f      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d13a      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	2b40      	cmp	r3, #64	; 0x40
 8001ab2:	d133      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d12e      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fc1c 	bl	8001300 <LL_ADC_INJ_IsConversionOngoing>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11a      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001adc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d112      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
 8001b02:	e00b      	b.n	8001b1c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fd69 	bl	80025f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2260      	movs	r2, #96	; 0x60
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d011      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x310>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f896 	bl	8001c7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x340>
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00d      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fd4f 	bl	800261c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x370>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fd41 	bl	8002630 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d036      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x3e8>
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	e014      	b.n	8001c04 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001be0:	4825      	ldr	r0, [pc, #148]	; (8001c78 <HAL_ADC_IRQHandler+0x430>)
 8001be2:	f7ff fae3 	bl	80011ac <LL_ADC_GetMultiDMATransfer>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e008      	b.n	8001c04 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001c00:	2301      	movs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10e      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f834 	bl	8001c90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d018      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x424>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f043 0208 	orr.w	r2, r3, #8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c64:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fcce 	bl	8002608 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	50040000 	.word	0x50040000
 8001c78:	50040300 	.word	0x50040300

08001c7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0b6      	sub	sp, #216	; 0xd8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x22>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e3d5      	b.n	8002472 <HAL_ADC_ConfigChannel+0x7ce>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fb01 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 83ba 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	3b02      	subs	r3, #2
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d81b      	bhi.n	8001d2a <HAL_ADC_ConfigChannel+0x86>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <HAL_ADC_ConfigChannel+0x54>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d11 	.word	0x08001d11
 8001d00:	08001d19 	.word	0x08001d19
 8001d04:	08001d21 	.word	0x08001d21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	605a      	str	r2, [r3, #4]
          break;
 8001d0e:	e011      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2212      	movs	r2, #18
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e00d      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e009      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d26:	605a      	str	r2, [r3, #4]
          break;
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	605a      	str	r2, [r3, #4]
          break;
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff f996 	bl	8001072 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fac5 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 8001d50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fad1 	bl	8001300 <LL_ADC_INJ_IsConversionOngoing>
 8001d5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 81c1 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 81bc 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d7e:	d10f      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff f9b0 	bl	80010f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f944 	bl	8001026 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d9e:	e00e      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff f99f 	bl	80010f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f934 	bl	8001026 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00a      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001df0:	f7ff f8c4 	bl	8000f7c <LL_ADC_SetOffset>
 8001df4:	e17b      	b.n	80020ee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f8e1 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x17e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f8d6 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	e01e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1bc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f8cb 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e004      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1d4>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	e018      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x206>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e004      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f89a 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f87e 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x244>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f873 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x282>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f868 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x29a>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x2cc>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f837 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2102      	movs	r1, #2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f81b 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x30a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f810 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x348>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f805 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x360>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	e016      	b.n	8002032 <HAL_ADC_ConfigChannel+0x38e>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800201c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e004      	b.n	8002032 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002032:	429a      	cmp	r2, r3
 8002034:	d106      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ffd6 	bl	8000ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2103      	movs	r1, #3
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe ffba 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x3cc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe ffaf 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	e017      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x3fc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2103      	movs	r1, #3
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ffa4 	bl	8000fc4 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800208c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x414>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	e011      	b.n	80020dc <HAL_ADC_ConfigChannel+0x438>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2103      	movs	r1, #3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe ff81 	bl	8000ff0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f8ca 	bl	800128c <LL_ADC_IsEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8140 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	461a      	mov	r2, r3
 800210e:	f7ff f81b 	bl	8001148 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a8f      	ldr	r2, [pc, #572]	; (8002354 <HAL_ADC_ConfigChannel+0x6b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f040 8131 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x4a2>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	3301      	adds	r3, #1
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2b09      	cmp	r3, #9
 800213c:	bf94      	ite	ls
 800213e:	2301      	movls	r3, #1
 8002140:	2300      	movhi	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	e019      	b.n	800217a <HAL_ADC_ConfigChannel+0x4d6>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002156:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2b09      	cmp	r3, #9
 8002172:	bf94      	ite	ls
 8002174:	2301      	movls	r3, #1
 8002176:	2300      	movhi	r3, #0
 8002178:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217a:	2b00      	cmp	r3, #0
 800217c:	d079      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_ADC_ConfigChannel+0x4f6>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	e015      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x522>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e003      	b.n	80021be <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	069b      	lsls	r3, r3, #26
 80021c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x542>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	e017      	b.n	8002216 <HAL_ADC_ConfigChannel+0x572>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x598>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	e018      	b.n	800226e <HAL_ADC_ConfigChannel+0x5ca>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800224e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226e:	430b      	orrs	r3, r1
 8002270:	e081      	b.n	8002376 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <HAL_ADC_ConfigChannel+0x5ea>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	3301      	adds	r3, #1
 8002286:	069b      	lsls	r3, r3, #26
 8002288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	e015      	b.n	80022ba <HAL_ADC_ConfigChannel+0x616>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	069b      	lsls	r3, r3, #26
 80022b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_ADC_ConfigChannel+0x636>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	e017      	b.n	800230a <HAL_ADC_ConfigChannel+0x666>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	61fb      	str	r3, [r7, #28]
  return result;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e003      	b.n	80022fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	ea42 0103 	orr.w	r1, r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x692>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	3301      	adds	r3, #1
 8002322:	f003 021f 	and.w	r2, r3, #31
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002334:	e01e      	b.n	8002374 <HAL_ADC_ConfigChannel+0x6d0>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	613b      	str	r3, [r7, #16]
  return result;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e006      	b.n	8002360 <HAL_ADC_ConfigChannel+0x6bc>
 8002352:	bf00      	nop
 8002354:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	3b1e      	subs	r3, #30
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	430b      	orrs	r3, r1
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe feb8 	bl	80010f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_ADC_ConfigChannel+0x7d8>)
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d06c      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <HAL_ADC_ConfigChannel+0x7dc>)
 800238e:	f7fe fde7 	bl	8000f60 <LL_ADC_GetCommonPathInternalCh>
 8002392:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_ADC_ConfigChannel+0x7e0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d127      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d121      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a35      	ldr	r2, [pc, #212]	; (8002488 <HAL_ADC_ConfigChannel+0x7e4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d157      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023be:	4619      	mov	r1, r3
 80023c0:	482f      	ldr	r0, [pc, #188]	; (8002480 <HAL_ADC_ConfigChannel+0x7dc>)
 80023c2:	f7fe fdba 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_ADC_ConfigChannel+0x7e8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_ADC_ConfigChannel+0x7ec>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ee:	e03a      	b.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_ADC_ConfigChannel+0x7f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d113      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x77e>
 80023fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_ADC_ConfigChannel+0x7e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d12a      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002418:	4619      	mov	r1, r3
 800241a:	4819      	ldr	r0, [pc, #100]	; (8002480 <HAL_ADC_ConfigChannel+0x7dc>)
 800241c:	f7fe fd8d 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002420:	e021      	b.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_ADC_ConfigChannel+0x7f4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d11c      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800242c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_ADC_ConfigChannel+0x7e4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d111      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244a:	4619      	mov	r1, r3
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <HAL_ADC_ConfigChannel+0x7dc>)
 800244e:	f7fe fd74 	bl	8000f3a <LL_ADC_SetCommonPathInternalCh>
 8002452:	e008      	b.n	8002466 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800246e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002472:	4618      	mov	r0, r3
 8002474:	37d8      	adds	r7, #216	; 0xd8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	80080000 	.word	0x80080000
 8002480:	50040300 	.word	0x50040300
 8002484:	c7520000 	.word	0xc7520000
 8002488:	50040000 	.word	0x50040000
 800248c:	20000004 	.word	0x20000004
 8002490:	053e2d63 	.word	0x053e2d63
 8002494:	cb840000 	.word	0xcb840000
 8002498:	80000001 	.word	0x80000001

0800249c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe feed 	bl	800128c <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d169      	bne.n	800258c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <ADC_Enable+0xfc>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e055      	b.n	800258e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe febc 	bl	8001264 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024ec:	482b      	ldr	r0, [pc, #172]	; (800259c <ADC_Enable+0x100>)
 80024ee:	f7fe fd37 	bl	8000f60 <LL_ADC_GetCommonPathInternalCh>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <ADC_Enable+0x104>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a28      	ldr	r2, [pc, #160]	; (80025a4 <ADC_Enable+0x108>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002516:	e002      	b.n	800251e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3b01      	subs	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002524:	f7fe fcc6 	bl	8000eb4 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800252a:	e028      	b.n	800257e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe feab 	bl	800128c <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fe8f 	bl	8001264 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002546:	f7fe fcb5 	bl	8000eb4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d914      	bls.n	800257e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d00d      	beq.n	800257e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e007      	b.n	800258e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d1cf      	bne.n	800252c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	8000003f 	.word	0x8000003f
 800259c:	50040300 	.word	0x50040300
 80025a0:	20000004 	.word	0x20000004
 80025a4:	053e2d63 	.word	0x053e2d63

080025a8 <LL_ADC_IsEnabled>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <LL_ADC_IsEnabled+0x18>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <LL_ADC_IsEnabled+0x1a>
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_REG_IsConversionOngoing>:
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b09f      	sub	sp, #124	; 0x7c
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e089      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800267e:	2300      	movs	r3, #0
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a42      	ldr	r2, [pc, #264]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e001      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e068      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff87 	bl	80025ce <LL_ADC_REG_IsConversionOngoing>
 80026c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff81 	bl	80025ce <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d14a      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d147      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d027      	beq.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026f6:	035b      	lsls	r3, r3, #13
 80026f8:	430b      	orrs	r3, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002700:	4824      	ldr	r0, [pc, #144]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002702:	f7ff ff51 	bl	80025a8 <LL_ADC_IsEnabled>
 8002706:	4604      	mov	r4, r0
 8002708:	4823      	ldr	r0, [pc, #140]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800270a:	f7ff ff4d 	bl	80025a8 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	4323      	orrs	r3, r4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d132      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6811      	ldr	r1, [r2, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6892      	ldr	r2, [r2, #8]
 800272a:	430a      	orrs	r2, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002732:	e023      	b.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002740:	4814      	ldr	r0, [pc, #80]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002742:	f7ff ff31 	bl	80025a8 <LL_ADC_IsEnabled>
 8002746:	4604      	mov	r4, r0
 8002748:	4813      	ldr	r0, [pc, #76]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800274a:	f7ff ff2d 	bl	80025a8 <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	4323      	orrs	r3, r4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d112      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800275e:	f023 030f 	bic.w	r3, r3, #15
 8002762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002764:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002766:	e009      	b.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800277a:	e000      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800277c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002786:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800278a:	4618      	mov	r0, r3
 800278c:	377c      	adds	r7, #124	; 0x7c
 800278e:	46bd      	mov	sp, r7
 8002790:	bd90      	pop	{r4, r7, pc}
 8002792:	bf00      	nop
 8002794:	50040000 	.word	0x50040000
 8002798:	50040100 	.word	0x50040100
 800279c:	50040300 	.word	0x50040300

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d008      	beq.n	80029ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2204      	movs	r2, #4
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e022      	b.n	8002a32 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020e 	bic.w	r2, r2, #14
 80029fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f003 021c 	and.w	r2, r3, #28
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d005      	beq.n	8002a62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e029      	b.n	8002ab6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020e 	bic.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f003 021c 	and.w	r2, r3, #28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
    }
  }
  return status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	e14e      	b.n	8002d6e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8140 	beq.w	8002d68 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d005      	beq.n	8002b00 <HAL_GPIO_Init+0x40>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d130      	bne.n	8002b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b36:	2201      	movs	r2, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 0201 	and.w	r2, r3, #1
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d017      	beq.n	8002b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d123      	bne.n	8002bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	6939      	ldr	r1, [r7, #16]
 8002bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 809a 	beq.w	8002d68 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c34:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <HAL_GPIO_Init+0x2cc>)
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_GPIO_Init+0x2cc>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c40:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_GPIO_Init+0x2cc>)
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c76:	d013      	beq.n	8002ca0 <HAL_GPIO_Init+0x1e0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a46      	ldr	r2, [pc, #280]	; (8002d94 <HAL_GPIO_Init+0x2d4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00d      	beq.n	8002c9c <HAL_GPIO_Init+0x1dc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <HAL_GPIO_Init+0x2d8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0x1d8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <HAL_GPIO_Init+0x2dc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_GPIO_Init+0x1d4>
 8002c90:	2303      	movs	r3, #3
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x1e2>
 8002c94:	2307      	movs	r3, #7
 8002c96:	e004      	b.n	8002ca2 <HAL_GPIO_Init+0x1e2>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e002      	b.n	8002ca2 <HAL_GPIO_Init+0x1e2>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_GPIO_Init+0x1e2>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	f002 0203 	and.w	r2, r2, #3
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	4093      	lsls	r3, r2
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cb2:	4937      	ldr	r1, [pc, #220]	; (8002d90 <HAL_GPIO_Init+0x2d0>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d62:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_GPIO_Init+0x2e0>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f aea9 	bne.w	8002ad0 <HAL_GPIO_Init+0x10>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000
 8002d94:	48000400 	.word	0x48000400
 8002d98:	48000800 	.word	0x48000800
 8002d9c:	48000c00 	.word	0x48000c00
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43d9      	mvns	r1, r3
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	400b      	ands	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	619a      	str	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fdb8 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40007000 	.word	0x40007000

08002e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e82:	d130      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d038      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2232      	movs	r2, #50	; 0x32
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	e002      	b.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	d110      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e00f      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d007      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f000 bc4f 	b.w	80037d2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f34:	4b97      	ldr	r3, [pc, #604]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3e:	4b95      	ldr	r3, [pc, #596]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80e6 	beq.w	8003122 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4c>
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	f040 808d 	bne.w	800307e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 8089 	bne.w	800307e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6c:	4b89      	ldr	r3, [pc, #548]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <HAL_RCC_OscConfig+0x66>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f000 bc26 	b.w	80037d2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8a:	4b82      	ldr	r3, [pc, #520]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x80>
 8002f96:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_OscConfig+0x8c>
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d224      	bcs.n	8002ffa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fdd9 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f000 bc06 	b.w	80037d2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc6:	4b73      	ldr	r3, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a72      	ldr	r2, [pc, #456]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b70      	ldr	r3, [pc, #448]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	496d      	ldr	r1, [pc, #436]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe4:	4b6b      	ldr	r3, [pc, #428]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4968      	ldr	r1, [pc, #416]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	e025      	b.n	8003046 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffa:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b63      	ldr	r3, [pc, #396]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	4960      	ldr	r1, [pc, #384]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	495b      	ldr	r1, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fd98 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e3c5      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003046:	f000 fccd 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	4950      	ldr	r1, [pc, #320]	; (8003198 <HAL_RCC_OscConfig+0x278>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003064:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003066:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fed2 	bl	8000e14 <HAL_InitTick>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d052      	beq.n	8003120 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	e3a9      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d032      	beq.n	80030ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003086:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a42      	ldr	r2, [pc, #264]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003092:	f7fd ff0f 	bl	8000eb4 <HAL_GetTick>
 8003096:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800309a:	f7fd ff0b 	bl	8000eb4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e392      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	4930      	ldr	r1, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	492b      	ldr	r1, [pc, #172]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e01a      	b.n	8003122 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ec:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fedc 	bl	8000eb4 <HAL_GetTick>
 80030fc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003100:	f7fd fed8 	bl	8000eb4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e35f      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1e0>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d073      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x220>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d10e      	bne.n	8003158 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d063      	beq.n	8003214 <HAL_RCC_OscConfig+0x2f4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15f      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e33c      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x250>
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e025      	b.n	80031bc <HAL_RCC_OscConfig+0x29c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d114      	bne.n	80031a4 <HAL_RCC_OscConfig+0x284>
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a02      	ldr	r2, [pc, #8]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e013      	b.n	80031bc <HAL_RCC_OscConfig+0x29c>
 8003194:	40021000 	.word	0x40021000
 8003198:	08005efc 	.word	0x08005efc
 800319c:	20000004 	.word	0x20000004
 80031a0:	20000008 	.word	0x20000008
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a8e      	ldr	r2, [pc, #568]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a8b      	ldr	r2, [pc, #556]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd fe76 	bl	8000eb4 <HAL_GetTick>
 80031c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fd fe72 	bl	8000eb4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e2f9      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2ac>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd fe62 	bl	8000eb4 <HAL_GetTick>
 80031f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fd fe5e 	bl	8000eb4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e2e5      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2d4>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x314>
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d119      	bne.n	8003262 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d116      	bne.n	8003262 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x32c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e2c2      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	4962      	ldr	r1, [pc, #392]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fd fe1d 	bl	8000eb4 <HAL_GetTick>
 800327a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fd fe19 	bl	8000eb4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e2a0      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	494e      	ldr	r1, [pc, #312]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd fdf9 	bl	8000eb4 <HAL_GetTick>
 80032c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fd fdf5 	bl	8000eb4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e27c      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8082 	beq.w	80033f6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d05f      	beq.n	80033ba <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80032fa:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	429a      	cmp	r2, r3
 800330e:	d037      	beq.n	8003380 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e254      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01b      	beq.n	800336a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003332:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003342:	f7fd fdb7 	bl	8000eb4 <HAL_GetTick>
 8003346:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7fd fdb3 	bl	8000eb4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b11      	cmp	r3, #17
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e23a      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	f023 0210 	bic.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	491a      	ldr	r1, [pc, #104]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003380:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd fd90 	bl	8000eb4 <HAL_GetTick>
 8003394:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd fd8c 	bl	8000eb4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b11      	cmp	r3, #17
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e213      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCC_OscConfig+0x478>
 80033b8:	e01d      	b.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fd fd73 	bl	8000eb4 <HAL_GetTick>
 80033ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fd fd6f 	bl	8000eb4 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b11      	cmp	r3, #17
 80033de:	d903      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1f6      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
 80033e4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	4ba9      	ldr	r3, [pc, #676]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ed      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80bd 	beq.w	800357e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800340a:	4ba1      	ldr	r3, [pc, #644]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	4a9d      	ldr	r2, [pc, #628]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	; 0x58
 8003422:	4b9b      	ldr	r3, [pc, #620]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003434:	4b97      	ldr	r3, [pc, #604]	; (8003694 <HAL_RCC_OscConfig+0x774>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d118      	bne.n	8003472 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003440:	4b94      	ldr	r3, [pc, #592]	; (8003694 <HAL_RCC_OscConfig+0x774>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a93      	ldr	r2, [pc, #588]	; (8003694 <HAL_RCC_OscConfig+0x774>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344c:	f7fd fd32 	bl	8000eb4 <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fd fd2e 	bl	8000eb4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1b5      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x774>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800347e:	4b84      	ldr	r3, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	497f      	ldr	r1, [pc, #508]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034a4:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	4a79      	ldr	r2, [pc, #484]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034b4:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c4:	e018      	b.n	80034f8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	4a70      	ldr	r2, [pc, #448]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d6:	e00f      	b.n	80034f8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034d8:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a6c      	ldr	r2, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034e8:	4b69      	ldr	r3, [pc, #420]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	4a68      	ldr	r2, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d016      	beq.n	800352e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fcd8 	bl	8000eb4 <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fd fcd4 	bl	8000eb4 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e159      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ed      	beq.n	8003508 <HAL_RCC_OscConfig+0x5e8>
 800352c:	e01d      	b.n	800356a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fcc1 	bl	8000eb4 <HAL_GetTick>
 8003532:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fcbd 	bl	8000eb4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e142      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ed      	bne.n	8003536 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d03c      	beq.n	8003604 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003598:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fd fc87 	bl	8000eb4 <HAL_GetTick>
 80035a6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035aa:	f7fd fc83 	bl	8000eb4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e10a      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80035be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x68a>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80035ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd fc6a 	bl	8000eb4 <HAL_GetTick>
 80035e0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e4:	f7fd fc66 	bl	8000eb4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0ed      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ef      	bne.n	80035e4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80e1 	beq.w	80037d0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	2b02      	cmp	r3, #2
 8003614:	f040 80b5 	bne.w	8003782 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d124      	bne.n	8003676 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	3b01      	subs	r3, #1
 8003638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d11b      	bne.n	8003676 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d113      	bne.n	8003676 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	3b01      	subs	r3, #1
 800365c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d109      	bne.n	8003676 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d05f      	beq.n	8003736 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d05a      	beq.n	8003732 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a03      	ldr	r2, [pc, #12]	; (8003690 <HAL_RCC_OscConfig+0x770>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003688:	f7fd fc14 	bl	8000eb4 <HAL_GetTick>
 800368c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368e:	e00c      	b.n	80036aa <HAL_RCC_OscConfig+0x78a>
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fc0c 	bl	8000eb4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e093      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0x8c0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036d0:	0212      	lsls	r2, r2, #8
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0552      	lsls	r2, r2, #21
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036e4:	0852      	lsrs	r2, r2, #1
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0652      	lsls	r2, r2, #25
 80036ea:	430a      	orrs	r2, r1
 80036ec:	493b      	ldr	r1, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f2:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a39      	ldr	r2, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	4a36      	ldr	r2, [pc, #216]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003708:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800370a:	f7fd fbd3 	bl	8000eb4 <HAL_GetTick>
 800370e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fd fbcf 	bl	8000eb4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e056      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003724:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003730:	e04e      	b.n	80037d0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e04d      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d146      	bne.n	80037d0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a25      	ldr	r2, [pc, #148]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800374e:	4b23      	ldr	r3, [pc, #140]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003758:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800375a:	f7fd fbab 	bl	8000eb4 <HAL_GetTick>
 800375e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fba7 	bl	8000eb4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e02e      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x842>
 8003780:	e026      	b.n	80037d0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d021      	beq.n	80037cc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 800378e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fb8e 	bl	8000eb4 <HAL_GetTick>
 8003798:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fd fb8a 	bl	8000eb4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e011      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_OscConfig+0x8bc>)
 80037c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037c4:	f023 0303 	bic.w	r3, r3, #3
 80037c8:	60d3      	str	r3, [r2, #12]
 80037ca:	e001      	b.n	80037d0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3728      	adds	r7, #40	; 0x28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	f99f808c 	.word	0xf99f808c

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0e7      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	4970      	ldr	r1, [pc, #448]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b6e      	ldr	r3, [pc, #440]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cf      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003840:	429a      	cmp	r2, r3
 8003842:	d908      	bls.n	8003856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4960      	ldr	r1, [pc, #384]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04c      	beq.n	80038fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0a6      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e09a      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e08e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e086      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4943      	ldr	r1, [pc, #268]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd faf2 	bl	8000eb4 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fd faee 	bl	8000eb4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e06e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003914:	429a      	cmp	r2, r3
 8003916:	d208      	bcs.n	800392a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	492b      	ldr	r1, [pc, #172]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d210      	bcs.n	800395a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4923      	ldr	r1, [pc, #140]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e036      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4918      	ldr	r1, [pc, #96]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4910      	ldr	r1, [pc, #64]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003998:	f000 f824 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	490b      	ldr	r1, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1f4>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1fc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fa29 	bl	8000e14 <HAL_InitTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c6:	7afb      	ldrb	r3, [r7, #11]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005efc 	.word	0x08005efc
 80039dc:	20000004 	.word	0x20000004
 80039e0:	20000008 	.word	0x20000008

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a40:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e004      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d134      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xac>
 8003a88:	e005      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8c:	617b      	str	r3, [r7, #20]
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	0e5b      	lsrs	r3, r3, #25
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003adc:	69bb      	ldr	r3, [r7, #24]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08005f14 	.word	0x08005f14
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200

08003afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08005f0c 	.word	0x08005f0c

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b44:	f7ff ffda 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0adb      	lsrs	r3, r3, #11
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08005f0c 	.word	0x08005f0c

08003b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b84:	f7ff f968 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003b88:	6178      	str	r0, [r7, #20]
 8003b8a:	e014      	b.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a24      	ldr	r2, [pc, #144]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba4:	f7ff f958 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbc:	d10b      	bne.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d919      	bls.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc8:	d902      	bls.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bca:	2302      	movs	r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e013      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e010      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d902      	bls.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bdc:	2303      	movs	r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e00a      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d102      	bne.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be8:	2302      	movs	r3, #2
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e004      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b70      	cmp	r3, #112	; 0x70
 8003bf2:	d101      	bne.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	4909      	ldr	r1, [pc, #36]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40022000 	.word	0x40022000

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 809e 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd f912 	bl	8000eb4 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fd f90e 	bl	8000eb4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d15a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cba:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d019      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d02:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d016      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd f8ce 	bl	8000eb4 <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd f8ca 	bl	8000eb4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	74fb      	strb	r3, [r7, #19]
            break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ec      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4904      	ldr	r1, [pc, #16]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d74:	7c7b      	ldrb	r3, [r7, #17]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4a6d      	ldr	r2, [pc, #436]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d92:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f023 0203 	bic.w	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4964      	ldr	r1, [pc, #400]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db4:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 020c 	bic.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	495c      	ldr	r1, [pc, #368]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd6:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4953      	ldr	r1, [pc, #332]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df8:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	494b      	ldr	r1, [pc, #300]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e1a:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4942      	ldr	r1, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	493a      	ldr	r1, [pc, #232]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5e:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4931      	ldr	r1, [pc, #196]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e80:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	4929      	ldr	r1, [pc, #164]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4920      	ldr	r1, [pc, #128]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	4918      	ldr	r1, [pc, #96]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	490a      	ldr	r1, [pc, #40]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e040      	b.n	8003fec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fdc8 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fc18 	bl	80047cc <UART_SetConfig>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e022      	b.n	8003fec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fe66 	bl	8004c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 feed 	bl	8004dc4 <UART_CheckIdleState>
 8003fea:	4603      	mov	r3, r0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004008:	2b20      	cmp	r3, #32
 800400a:	f040 8082 	bne.w	8004112 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_UART_Transmit+0x26>
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07a      	b.n	8004114 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x38>
 8004028:	2302      	movs	r3, #2
 800402a:	e073      	b.n	8004114 <HAL_UART_Transmit+0x120>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2221      	movs	r2, #33	; 0x21
 8004040:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004042:	f7fc ff37 	bl	8000eb4 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Transmit+0x80>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004084:	e02d      	b.n	80040e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fee0 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e039      	b.n	8004114 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b2:	b292      	uxth	r2, r2
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3302      	adds	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e008      	b.n	80040d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b292      	uxth	r2, r2
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3301      	adds	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1cb      	bne.n	8004086 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2140      	movs	r1, #64	; 0x40
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 feac 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e005      	b.n	8004114 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412e:	2b20      	cmp	r3, #32
 8004130:	d142      	bne.n	80041b8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_UART_Receive_IT+0x22>
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e03b      	b.n	80041ba <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UART_Receive_IT+0x34>
 800414c:	2302      	movs	r3, #2
 800414e:	e034      	b.n	80041ba <HAL_UART_Receive_IT+0x9e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_UART_Receive_IT+0xa8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01f      	beq.n	80041a8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69f9      	ldr	r1, [r7, #28]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 ff16 	bl	8004fe0 <UART_Start_Receive_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40008000 	.word	0x40008000

080041c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b0ba      	sub	sp, #232	; 0xe8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041f6:	4013      	ands	r3, r2
 80041f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d115      	bne.n	8004230 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 82a6 	beq.w	8004772 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
      }
      return;
 800422e:	e2a0      	b.n	8004772 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8117 	beq.w	8004468 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800424a:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_UART_IRQHandler+0x298>)
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 810a 	beq.w	8004468 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <HAL_UART_IRQHandler+0xbc>
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d011      	beq.n	80042b4 <HAL_UART_IRQHandler+0xec>
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
 80042c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2204      	movs	r2, #4
 80042d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042da:	f043 0202 	orr.w	r2, r3, #2
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004300:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004316:	f043 0208 	orr.w	r2, r3, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d012      	beq.n	8004352 <HAL_UART_IRQHandler+0x18a>
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 820c 	beq.w	8004776 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d005      	beq.n	80043aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800439e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04f      	beq.n	800444a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fee2 	bl	8005174 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d141      	bne.n	8004442 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d9      	bne.n	80043be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	2b00      	cmp	r3, #0
 8004410:	d013      	beq.n	800443a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_UART_IRQHandler+0x29c>)
 8004418:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fb0d 	bl	8002a3e <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d017      	beq.n	800445a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00f      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9b0 	bl	80047a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00b      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9ac 	bl	80047a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e007      	b.n	800445a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9a8 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004458:	e18d      	b.n	8004776 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	bf00      	nop
    return;
 800445c:	e18b      	b.n	8004776 <HAL_UART_IRQHandler+0x5ae>
 800445e:	bf00      	nop
 8004460:	04000120 	.word	0x04000120
 8004464:	0800523b 	.word	0x0800523b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 8146 	bne.w	80046fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 813f 	beq.w	80046fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8138 	beq.w	80046fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2210      	movs	r2, #16
 8004494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	f040 80b4 	bne.w	800460e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 815f 	beq.w	800477a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f080 8157 	bcs.w	800477a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8085 	bne.w	80045f2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004516:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800451e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800452a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1da      	bne.n	80044e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004556:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800455a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800455e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e1      	bne.n	8004532 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e3      	bne.n	800456e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e4      	bne.n	80045b2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe f9e8 	bl	80029c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	b29b      	uxth	r3, r3
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8d4 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800460c:	e0b5      	b.n	800477a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800461a:	b29b      	uxth	r3, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80a7 	beq.w	800477e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a2 	beq.w	800477e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e4      	bne.n	800463a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	623b      	str	r3, [r7, #32]
   return(result);
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004694:	633a      	str	r2, [r7, #48]	; 0x30
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e4      	bne.n	80046ba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f85c 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046fc:	e03f      	b.n	800477e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <HAL_UART_IRQHandler+0x560>
 800470a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800471e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 ff2a 	bl	800557a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004726:	e02d      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
    }
    return;
 8004750:	e017      	b.n	8004782 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <HAL_UART_IRQHandler+0x5bc>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fd7b 	bl	8005266 <UART_EndTransmit_IT>
    return;
 8004770:	e008      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004772:	bf00      	nop
 8004774:	e006      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004776:	bf00      	nop
 8004778:	e004      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
      return;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
      return;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004782:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004784:	37e8      	adds	r7, #232	; 0xe8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop

0800478c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b08a      	sub	sp, #40	; 0x28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b9e      	ldr	r3, [pc, #632]	; (8004a74 <UART_SetConfig+0x2a8>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004804:	430b      	orrs	r3, r1
 8004806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a93      	ldr	r2, [pc, #588]	; (8004a78 <UART_SetConfig+0x2ac>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	4313      	orrs	r3, r2
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a8a      	ldr	r2, [pc, #552]	; (8004a7c <UART_SetConfig+0x2b0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d126      	bne.n	80048a4 <UART_SetConfig+0xd8>
 8004856:	4b8a      	ldr	r3, [pc, #552]	; (8004a80 <UART_SetConfig+0x2b4>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b03      	cmp	r3, #3
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0xd0>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0xa0>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488d 	.word	0x0800488d
 8004874:	08004885 	.word	0x08004885
 8004878:	08004895 	.word	0x08004895
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e0ab      	b.n	80049dc <UART_SetConfig+0x210>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e0a7      	b.n	80049dc <UART_SetConfig+0x210>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e0a3      	b.n	80049dc <UART_SetConfig+0x210>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e09f      	b.n	80049dc <UART_SetConfig+0x210>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e09b      	b.n	80049dc <UART_SetConfig+0x210>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a76      	ldr	r2, [pc, #472]	; (8004a84 <UART_SetConfig+0x2b8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d138      	bne.n	8004920 <UART_SetConfig+0x154>
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <UART_SetConfig+0x2b4>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	d82d      	bhi.n	8004918 <UART_SetConfig+0x14c>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0xf8>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004901 	.word	0x08004901
 80048e8:	08004919 	.word	0x08004919
 80048ec:	08004919 	.word	0x08004919
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004911 	.word	0x08004911
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e06d      	b.n	80049dc <UART_SetConfig+0x210>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e069      	b.n	80049dc <UART_SetConfig+0x210>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e065      	b.n	80049dc <UART_SetConfig+0x210>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e061      	b.n	80049dc <UART_SetConfig+0x210>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e05d      	b.n	80049dc <UART_SetConfig+0x210>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <UART_SetConfig+0x2bc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d125      	bne.n	8004976 <UART_SetConfig+0x1aa>
 800492a:	4b55      	ldr	r3, [pc, #340]	; (8004a80 <UART_SetConfig+0x2b4>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d016      	beq.n	8004966 <UART_SetConfig+0x19a>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d818      	bhi.n	800496e <UART_SetConfig+0x1a2>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d00a      	beq.n	8004956 <UART_SetConfig+0x18a>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d814      	bhi.n	800496e <UART_SetConfig+0x1a2>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <UART_SetConfig+0x182>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d008      	beq.n	800495e <UART_SetConfig+0x192>
 800494c:	e00f      	b.n	800496e <UART_SetConfig+0x1a2>
 800494e:	2300      	movs	r3, #0
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004954:	e042      	b.n	80049dc <UART_SetConfig+0x210>
 8004956:	2302      	movs	r3, #2
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495c:	e03e      	b.n	80049dc <UART_SetConfig+0x210>
 800495e:	2304      	movs	r3, #4
 8004960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004964:	e03a      	b.n	80049dc <UART_SetConfig+0x210>
 8004966:	2308      	movs	r3, #8
 8004968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496c:	e036      	b.n	80049dc <UART_SetConfig+0x210>
 800496e:	2310      	movs	r3, #16
 8004970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004974:	e032      	b.n	80049dc <UART_SetConfig+0x210>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <UART_SetConfig+0x2ac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d12a      	bne.n	80049d6 <UART_SetConfig+0x20a>
 8004980:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <UART_SetConfig+0x2b4>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800498a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800498e:	d01a      	beq.n	80049c6 <UART_SetConfig+0x1fa>
 8004990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004994:	d81b      	bhi.n	80049ce <UART_SetConfig+0x202>
 8004996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499a:	d00c      	beq.n	80049b6 <UART_SetConfig+0x1ea>
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a0:	d815      	bhi.n	80049ce <UART_SetConfig+0x202>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <UART_SetConfig+0x1e2>
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	d008      	beq.n	80049be <UART_SetConfig+0x1f2>
 80049ac:	e00f      	b.n	80049ce <UART_SetConfig+0x202>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b4:	e012      	b.n	80049dc <UART_SetConfig+0x210>
 80049b6:	2302      	movs	r3, #2
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e00e      	b.n	80049dc <UART_SetConfig+0x210>
 80049be:	2304      	movs	r3, #4
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c4:	e00a      	b.n	80049dc <UART_SetConfig+0x210>
 80049c6:	2308      	movs	r3, #8
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049cc:	e006      	b.n	80049dc <UART_SetConfig+0x210>
 80049ce:	2310      	movs	r3, #16
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d4:	e002      	b.n	80049dc <UART_SetConfig+0x210>
 80049d6:	2310      	movs	r3, #16
 80049d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <UART_SetConfig+0x2ac>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f040 808a 	bne.w	8004afc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d824      	bhi.n	8004a3a <UART_SetConfig+0x26e>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0x22c>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a3b 	.word	0x08004a3b
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004a2b 	.word	0x08004a2b
 8004a0c:	08004a3b 	.word	0x08004a3b
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a3b 	.word	0x08004a3b
 8004a18:	08004a33 	.word	0x08004a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f7ff f87a 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004a20:	61f8      	str	r0, [r7, #28]
        break;
 8004a22:	e010      	b.n	8004a46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <UART_SetConfig+0x2c0>)
 8004a26:	61fb      	str	r3, [r7, #28]
        break;
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fe ffdb 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004a2e:	61f8      	str	r0, [r7, #28]
        break;
 8004a30:	e009      	b.n	8004a46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a36:	61fb      	str	r3, [r7, #28]
        break;
 8004a38:	e005      	b.n	8004a46 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8109 	beq.w	8004c60 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d305      	bcc.n	8004a6a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d912      	bls.n	8004a90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a70:	e0f6      	b.n	8004c60 <UART_SetConfig+0x494>
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40008000 	.word	0x40008000
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2200      	movs	r2, #0
 8004a94:	461c      	mov	r4, r3
 8004a96:	4615      	mov	r5, r2
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	022b      	lsls	r3, r5, #8
 8004aa2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004aa6:	0222      	lsls	r2, r4, #8
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6849      	ldr	r1, [r1, #4]
 8004aac:	0849      	lsrs	r1, r1, #1
 8004aae:	2000      	movs	r0, #0
 8004ab0:	4688      	mov	r8, r1
 8004ab2:	4681      	mov	r9, r0
 8004ab4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ab8:	eb43 0b09 	adc.w	fp, r3, r9
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aca:	4650      	mov	r0, sl
 8004acc:	4659      	mov	r1, fp
 8004ace:	f7fb fbd7 	bl	8000280 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae0:	d308      	bcc.n	8004af4 <UART_SetConfig+0x328>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae8:	d204      	bcs.n	8004af4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e0b5      	b.n	8004c60 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004afa:	e0b1      	b.n	8004c60 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d15d      	bne.n	8004bc2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d827      	bhi.n	8004b5e <UART_SetConfig+0x392>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x348>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe ffec 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e014      	b.n	8004b6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fffe 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004b44:	61f8      	str	r0, [r7, #28]
        break;
 8004b46:	e010      	b.n	8004b6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <UART_SetConfig+0x4b0>)
 8004b4a:	61fb      	str	r3, [r7, #28]
        break;
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe ff49 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004b52:	61f8      	str	r0, [r7, #28]
        break;
 8004b54:	e009      	b.n	8004b6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e005      	b.n	8004b6a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d077      	beq.n	8004c60 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005a      	lsls	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d916      	bls.n	8004bba <UART_SetConfig+0x3ee>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b92:	d212      	bcs.n	8004bba <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f023 030f 	bic.w	r3, r3, #15
 8004b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	8afa      	ldrh	r2, [r7, #22]
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	e052      	b.n	8004c60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bc0:	e04e      	b.n	8004c60 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d827      	bhi.n	8004c1a <UART_SetConfig+0x44e>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x404>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004c1b 	.word	0x08004c1b
 8004be0:	08004c0b 	.word	0x08004c0b
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c1b 	.word	0x08004c1b
 8004bec:	08004c1b 	.word	0x08004c1b
 8004bf0:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe ff8e 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	61f8      	str	r0, [r7, #28]
        break;
 8004bfa:	e014      	b.n	8004c26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fe ffa0 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004c00:	61f8      	str	r0, [r7, #28]
        break;
 8004c02:	e010      	b.n	8004c26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <UART_SetConfig+0x4b0>)
 8004c06:	61fb      	str	r3, [r7, #28]
        break;
 8004c08:	e00d      	b.n	8004c26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe feeb 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004c0e:	61f8      	str	r0, [r7, #28]
        break;
 8004c10:	e009      	b.n	8004c26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e005      	b.n	8004c26 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c24:	bf00      	nop
    }

    if (pclk != 0U)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d019      	beq.n	8004c60 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085a      	lsrs	r2, r3, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	d909      	bls.n	8004c5a <UART_SetConfig+0x48e>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d205      	bcs.n	8004c5a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	e002      	b.n	8004c60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	00f42400 	.word	0x00f42400

08004c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7e:	d10a      	bne.n	8004d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc f86e 	bl	8000eb4 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d10e      	bne.n	8004e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f82d 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e023      	b.n	8004e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d10e      	bne.n	8004e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f817 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e00d      	b.n	8004e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b09c      	sub	sp, #112	; 0x70
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	e0a5      	b.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	f000 80a1 	beq.w	8004fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fc f81f 	bl	8000eb4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d13e      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eda:	64ba      	str	r2, [r7, #72]	; 0x48
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e067      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d04f      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f22:	d147      	bne.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f2c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f80:	623a      	str	r2, [r7, #32]
 8004f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	6a3a      	ldr	r2, [r7, #32]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f43f af4a 	beq.w	8004e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3770      	adds	r7, #112	; 0x70
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b097      	sub	sp, #92	; 0x5c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d10e      	bne.n	8005032 <UART_Start_Receive_IT+0x52>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <UART_Start_Receive_IT+0x48>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005026:	e02d      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	22ff      	movs	r2, #255	; 0xff
 800502c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005030:	e028      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <UART_Start_Receive_IT+0x76>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <UART_Start_Receive_IT+0x6c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800504a:	e01b      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	227f      	movs	r2, #127	; 0x7f
 8005050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005054:	e016      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505e:	d10d      	bne.n	800507c <UART_Start_Receive_IT+0x9c>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <UART_Start_Receive_IT+0x92>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	227f      	movs	r2, #127	; 0x7f
 800506c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005070:	e008      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	223f      	movs	r2, #63	; 0x3f
 8005076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800507a:	e003      	b.n	8005084 <UART_Start_Receive_IT+0xa4>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2222      	movs	r2, #34	; 0x22
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d107      	bne.n	80050e0 <UART_Start_Receive_IT+0x100>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <UART_Start_Receive_IT+0x18c>)
 80050dc:	665a      	str	r2, [r3, #100]	; 0x64
 80050de:	e002      	b.n	80050e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a23      	ldr	r2, [pc, #140]	; (8005170 <UART_Start_Receive_IT+0x190>)
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d019      	beq.n	800512a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_Start_Receive_IT+0x116>
 8005128:	e018      	b.n	800515c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f043 0320 	orr.w	r3, r3, #32
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005148:	623b      	str	r3, [r7, #32]
 800514a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	69f9      	ldr	r1, [r7, #28]
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	61bb      	str	r3, [r7, #24]
   return(result);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e6      	bne.n	800512a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	375c      	adds	r7, #92	; 0x5c
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	0800541b 	.word	0x0800541b
 8005170:	080052bb 	.word	0x080052bb

08005174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b095      	sub	sp, #84	; 0x54
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
 800519c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d118      	bne.n	800521c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6979      	ldr	r1, [r7, #20]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800522e:	bf00      	nop
 8005230:	3754      	adds	r7, #84	; 0x54
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff faa1 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	60bb      	str	r3, [r7, #8]
   return(result);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	613b      	str	r3, [r7, #16]
   return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fa6d 	bl	800478c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b2:	bf00      	nop
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b096      	sub	sp, #88	; 0x58
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d0:	2b22      	cmp	r3, #34	; 0x22
 80052d2:	f040 8094 	bne.w	80053fe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80052e4:	b2d9      	uxtb	r1, r3
 80052e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	400a      	ands	r2, r1
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d179      	bne.n	8005412 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e6      	bne.n	800531e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	623b      	str	r3, [r7, #32]
   return(result);
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005370:	633a      	str	r2, [r7, #48]	; 0x30
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005394:	2b01      	cmp	r3, #1
 8005396:	d12e      	bne.n	80053f6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e6      	bne.n	800539e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d103      	bne.n	80053e6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2210      	movs	r2, #16
 80053e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff f9e0 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053f4:	e00d      	b.n	8005412 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb faf2 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 80053fc:	e009      	b.n	8005412 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	8b1b      	ldrh	r3, [r3, #24]
 8005404:	b29a      	uxth	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	b292      	uxth	r2, r2
 8005410:	831a      	strh	r2, [r3, #24]
}
 8005412:	bf00      	nop
 8005414:	3758      	adds	r7, #88	; 0x58
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b096      	sub	sp, #88	; 0x58
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005428:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	f040 8094 	bne.w	800555e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800543c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005446:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800544a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800544e:	4013      	ands	r3, r2
 8005450:	b29a      	uxth	r2, r3
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	1c9a      	adds	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d179      	bne.n	8005572 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549c:	643b      	str	r3, [r7, #64]	; 0x40
 800549e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d12e      	bne.n	8005556 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	60bb      	str	r3, [r7, #8]
   return(result);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	647b      	str	r3, [r7, #68]	; 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	613b      	str	r3, [r7, #16]
   return(result);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d103      	bne.n	8005546 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2210      	movs	r2, #16
 8005544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff f930 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005554:	e00d      	b.n	8005572 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb fa42 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 800555c:	e009      	b.n	8005572 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	8b1b      	ldrh	r3, [r3, #24]
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	b292      	uxth	r2, r2
 8005570:	831a      	strh	r2, [r3, #24]
}
 8005572:	bf00      	nop
 8005574:	3758      	adds	r7, #88	; 0x58
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <__errno>:
 8005590:	4b01      	ldr	r3, [pc, #4]	; (8005598 <__errno+0x8>)
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000010 	.word	0x20000010

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4d0d      	ldr	r5, [pc, #52]	; (80055d4 <__libc_init_array+0x38>)
 80055a0:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a2:	1b64      	subs	r4, r4, r5
 80055a4:	10a4      	asrs	r4, r4, #2
 80055a6:	2600      	movs	r6, #0
 80055a8:	42a6      	cmp	r6, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	4d0b      	ldr	r5, [pc, #44]	; (80055dc <__libc_init_array+0x40>)
 80055ae:	4c0c      	ldr	r4, [pc, #48]	; (80055e0 <__libc_init_array+0x44>)
 80055b0:	f000 fc8e 	bl	8005ed0 <_init>
 80055b4:	1b64      	subs	r4, r4, r5
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	2600      	movs	r6, #0
 80055ba:	42a6      	cmp	r6, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c4:	4798      	blx	r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ce:	4798      	blx	r3
 80055d0:	3601      	adds	r6, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08005f80 	.word	0x08005f80
 80055d8:	08005f80 	.word	0x08005f80
 80055dc:	08005f80 	.word	0x08005f80
 80055e0:	08005f84 	.word	0x08005f84

080055e4 <memset>:
 80055e4:	4402      	add	r2, r0
 80055e6:	4603      	mov	r3, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	f803 1b01 	strb.w	r1, [r3], #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f000 f868 	bl	80056ec <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000010 	.word	0x20000010
 8005630:	ffff0208 	.word	0xffff0208

08005634 <__ssputs_r>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	688e      	ldr	r6, [r1, #8]
 800563a:	429e      	cmp	r6, r3
 800563c:	4682      	mov	sl, r0
 800563e:	460c      	mov	r4, r1
 8005640:	4690      	mov	r8, r2
 8005642:	461f      	mov	r7, r3
 8005644:	d838      	bhi.n	80056b8 <__ssputs_r+0x84>
 8005646:	898a      	ldrh	r2, [r1, #12]
 8005648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800564c:	d032      	beq.n	80056b4 <__ssputs_r+0x80>
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	6909      	ldr	r1, [r1, #16]
 8005652:	eba5 0901 	sub.w	r9, r5, r1
 8005656:	6965      	ldr	r5, [r4, #20]
 8005658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005660:	3301      	adds	r3, #1
 8005662:	444b      	add	r3, r9
 8005664:	106d      	asrs	r5, r5, #1
 8005666:	429d      	cmp	r5, r3
 8005668:	bf38      	it	cc
 800566a:	461d      	movcc	r5, r3
 800566c:	0553      	lsls	r3, r2, #21
 800566e:	d531      	bpl.n	80056d4 <__ssputs_r+0xa0>
 8005670:	4629      	mov	r1, r5
 8005672:	f000 fb63 	bl	8005d3c <_malloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	b950      	cbnz	r0, 8005690 <__ssputs_r+0x5c>
 800567a:	230c      	movs	r3, #12
 800567c:	f8ca 3000 	str.w	r3, [sl]
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	6921      	ldr	r1, [r4, #16]
 8005692:	464a      	mov	r2, r9
 8005694:	f000 fabe 	bl	8005c14 <memcpy>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	6126      	str	r6, [r4, #16]
 80056a6:	6165      	str	r5, [r4, #20]
 80056a8:	444e      	add	r6, r9
 80056aa:	eba5 0509 	sub.w	r5, r5, r9
 80056ae:	6026      	str	r6, [r4, #0]
 80056b0:	60a5      	str	r5, [r4, #8]
 80056b2:	463e      	mov	r6, r7
 80056b4:	42be      	cmp	r6, r7
 80056b6:	d900      	bls.n	80056ba <__ssputs_r+0x86>
 80056b8:	463e      	mov	r6, r7
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	4632      	mov	r2, r6
 80056be:	4641      	mov	r1, r8
 80056c0:	f000 fab6 	bl	8005c30 <memmove>
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	1b9b      	subs	r3, r3, r6
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	4433      	add	r3, r6
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e7db      	b.n	800568c <__ssputs_r+0x58>
 80056d4:	462a      	mov	r2, r5
 80056d6:	f000 fba5 	bl	8005e24 <_realloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e1      	bne.n	80056a4 <__ssputs_r+0x70>
 80056e0:	6921      	ldr	r1, [r4, #16]
 80056e2:	4650      	mov	r0, sl
 80056e4:	f000 fabe 	bl	8005c64 <_free_r>
 80056e8:	e7c7      	b.n	800567a <__ssputs_r+0x46>
	...

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4698      	mov	r8, r3
 80056f2:	898b      	ldrh	r3, [r1, #12]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	b09d      	sub	sp, #116	; 0x74
 80056f8:	4607      	mov	r7, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	d50e      	bpl.n	800571e <_svfiprintf_r+0x32>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b963      	cbnz	r3, 800571e <_svfiprintf_r+0x32>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f000 fb19 	bl	8005d3c <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b920      	cbnz	r0, 800571a <_svfiprintf_r+0x2e>
 8005710:	230c      	movs	r3, #12
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e0d1      	b.n	80058be <_svfiprintf_r+0x1d2>
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	616b      	str	r3, [r5, #20]
 800571e:	2300      	movs	r3, #0
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	2320      	movs	r3, #32
 8005724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005728:	f8cd 800c 	str.w	r8, [sp, #12]
 800572c:	2330      	movs	r3, #48	; 0x30
 800572e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058d8 <_svfiprintf_r+0x1ec>
 8005732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005736:	f04f 0901 	mov.w	r9, #1
 800573a:	4623      	mov	r3, r4
 800573c:	469a      	mov	sl, r3
 800573e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005742:	b10a      	cbz	r2, 8005748 <_svfiprintf_r+0x5c>
 8005744:	2a25      	cmp	r2, #37	; 0x25
 8005746:	d1f9      	bne.n	800573c <_svfiprintf_r+0x50>
 8005748:	ebba 0b04 	subs.w	fp, sl, r4
 800574c:	d00b      	beq.n	8005766 <_svfiprintf_r+0x7a>
 800574e:	465b      	mov	r3, fp
 8005750:	4622      	mov	r2, r4
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ff6d 	bl	8005634 <__ssputs_r>
 800575a:	3001      	adds	r0, #1
 800575c:	f000 80aa 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005762:	445a      	add	r2, fp
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	f89a 3000 	ldrb.w	r3, [sl]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a2 	beq.w	80058b4 <_svfiprintf_r+0x1c8>
 8005770:	2300      	movs	r3, #0
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577a:	f10a 0a01 	add.w	sl, sl, #1
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005786:	931a      	str	r3, [sp, #104]	; 0x68
 8005788:	4654      	mov	r4, sl
 800578a:	2205      	movs	r2, #5
 800578c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005790:	4851      	ldr	r0, [pc, #324]	; (80058d8 <_svfiprintf_r+0x1ec>)
 8005792:	f7fa fd25 	bl	80001e0 <memchr>
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	b9d8      	cbnz	r0, 80057d2 <_svfiprintf_r+0xe6>
 800579a:	06d0      	lsls	r0, r2, #27
 800579c:	bf44      	itt	mi
 800579e:	2320      	movmi	r3, #32
 80057a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a4:	0711      	lsls	r1, r2, #28
 80057a6:	bf44      	itt	mi
 80057a8:	232b      	movmi	r3, #43	; 0x2b
 80057aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ae:	f89a 3000 	ldrb.w	r3, [sl]
 80057b2:	2b2a      	cmp	r3, #42	; 0x2a
 80057b4:	d015      	beq.n	80057e2 <_svfiprintf_r+0xf6>
 80057b6:	9a07      	ldr	r2, [sp, #28]
 80057b8:	4654      	mov	r4, sl
 80057ba:	2000      	movs	r0, #0
 80057bc:	f04f 0c0a 	mov.w	ip, #10
 80057c0:	4621      	mov	r1, r4
 80057c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c6:	3b30      	subs	r3, #48	; 0x30
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d94e      	bls.n	800586a <_svfiprintf_r+0x17e>
 80057cc:	b1b0      	cbz	r0, 80057fc <_svfiprintf_r+0x110>
 80057ce:	9207      	str	r2, [sp, #28]
 80057d0:	e014      	b.n	80057fc <_svfiprintf_r+0x110>
 80057d2:	eba0 0308 	sub.w	r3, r0, r8
 80057d6:	fa09 f303 	lsl.w	r3, r9, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	46a2      	mov	sl, r4
 80057e0:	e7d2      	b.n	8005788 <_svfiprintf_r+0x9c>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	9103      	str	r1, [sp, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfbb      	ittet	lt
 80057ee:	425b      	neglt	r3, r3
 80057f0:	f042 0202 	orrlt.w	r2, r2, #2
 80057f4:	9307      	strge	r3, [sp, #28]
 80057f6:	9307      	strlt	r3, [sp, #28]
 80057f8:	bfb8      	it	lt
 80057fa:	9204      	strlt	r2, [sp, #16]
 80057fc:	7823      	ldrb	r3, [r4, #0]
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d10c      	bne.n	800581c <_svfiprintf_r+0x130>
 8005802:	7863      	ldrb	r3, [r4, #1]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d135      	bne.n	8005874 <_svfiprintf_r+0x188>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	9203      	str	r2, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	bfb8      	it	lt
 8005814:	f04f 33ff 	movlt.w	r3, #4294967295
 8005818:	3402      	adds	r4, #2
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058e8 <_svfiprintf_r+0x1fc>
 8005820:	7821      	ldrb	r1, [r4, #0]
 8005822:	2203      	movs	r2, #3
 8005824:	4650      	mov	r0, sl
 8005826:	f7fa fcdb 	bl	80001e0 <memchr>
 800582a:	b140      	cbz	r0, 800583e <_svfiprintf_r+0x152>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	eba0 000a 	sub.w	r0, r0, sl
 8005832:	fa03 f000 	lsl.w	r0, r3, r0
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	4303      	orrs	r3, r0
 800583a:	3401      	adds	r4, #1
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005842:	4826      	ldr	r0, [pc, #152]	; (80058dc <_svfiprintf_r+0x1f0>)
 8005844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005848:	2206      	movs	r2, #6
 800584a:	f7fa fcc9 	bl	80001e0 <memchr>
 800584e:	2800      	cmp	r0, #0
 8005850:	d038      	beq.n	80058c4 <_svfiprintf_r+0x1d8>
 8005852:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <_svfiprintf_r+0x1f4>)
 8005854:	bb1b      	cbnz	r3, 800589e <_svfiprintf_r+0x1b2>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	3307      	adds	r3, #7
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	3308      	adds	r3, #8
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	4433      	add	r3, r6
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	e767      	b.n	800573a <_svfiprintf_r+0x4e>
 800586a:	fb0c 3202 	mla	r2, ip, r2, r3
 800586e:	460c      	mov	r4, r1
 8005870:	2001      	movs	r0, #1
 8005872:	e7a5      	b.n	80057c0 <_svfiprintf_r+0xd4>
 8005874:	2300      	movs	r3, #0
 8005876:	3401      	adds	r4, #1
 8005878:	9305      	str	r3, [sp, #20]
 800587a:	4619      	mov	r1, r3
 800587c:	f04f 0c0a 	mov.w	ip, #10
 8005880:	4620      	mov	r0, r4
 8005882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005886:	3a30      	subs	r2, #48	; 0x30
 8005888:	2a09      	cmp	r2, #9
 800588a:	d903      	bls.n	8005894 <_svfiprintf_r+0x1a8>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c5      	beq.n	800581c <_svfiprintf_r+0x130>
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	e7c3      	b.n	800581c <_svfiprintf_r+0x130>
 8005894:	fb0c 2101 	mla	r1, ip, r1, r2
 8005898:	4604      	mov	r4, r0
 800589a:	2301      	movs	r3, #1
 800589c:	e7f0      	b.n	8005880 <_svfiprintf_r+0x194>
 800589e:	ab03      	add	r3, sp, #12
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	462a      	mov	r2, r5
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <_svfiprintf_r+0x1f8>)
 80058a6:	a904      	add	r1, sp, #16
 80058a8:	4638      	mov	r0, r7
 80058aa:	f3af 8000 	nop.w
 80058ae:	1c42      	adds	r2, r0, #1
 80058b0:	4606      	mov	r6, r0
 80058b2:	d1d6      	bne.n	8005862 <_svfiprintf_r+0x176>
 80058b4:	89ab      	ldrh	r3, [r5, #12]
 80058b6:	065b      	lsls	r3, r3, #25
 80058b8:	f53f af2c 	bmi.w	8005714 <_svfiprintf_r+0x28>
 80058bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058be:	b01d      	add	sp, #116	; 0x74
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <_svfiprintf_r+0x1f8>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4638      	mov	r0, r7
 80058d0:	f000 f87a 	bl	80059c8 <_printf_i>
 80058d4:	e7eb      	b.n	80058ae <_svfiprintf_r+0x1c2>
 80058d6:	bf00      	nop
 80058d8:	08005f44 	.word	0x08005f44
 80058dc:	08005f4e 	.word	0x08005f4e
 80058e0:	00000000 	.word	0x00000000
 80058e4:	08005635 	.word	0x08005635
 80058e8:	08005f4a 	.word	0x08005f4a

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005938:	1e13      	subs	r3, r2, #0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	47c0      	blx	r8
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	68e5      	ldr	r5, [r4, #12]
 8005956:	6832      	ldr	r2, [r6, #0]
 8005958:	f003 0306 	and.w	r3, r3, #6
 800595c:	2b04      	cmp	r3, #4
 800595e:	bf08      	it	eq
 8005960:	1aad      	subeq	r5, r5, r2
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	6922      	ldr	r2, [r4, #16]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4649      	mov	r1, r9
 8005988:	4638      	mov	r0, r7
 800598a:	47c0      	blx	r8
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	; 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4649      	mov	r1, r9
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	7e0f      	ldrb	r7, [r1, #24]
 80059ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059d0:	2f78      	cmp	r7, #120	; 0x78
 80059d2:	4691      	mov	r9, r2
 80059d4:	4680      	mov	r8, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	469a      	mov	sl, r3
 80059da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	; 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d8 	beq.w	8005b9a <_printf_i+0x1d2>
 80059ea:	2f58      	cmp	r7, #88	; 0x58
 80059ec:	f000 80a3 	beq.w	8005b36 <_printf_i+0x16e>
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a101      	add	r1, pc, #4	; (adr r1, 8005a08 <_printf_i+0x40>)
 8005a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b81 	.word	0x08005b81
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005b63 	.word	0x08005b63
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005ba3 	.word	0x08005ba3
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b6b 	.word	0x08005b6b
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0a3      	b.n	8005bbc <_printf_i+0x1f4>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	6829      	ldr	r1, [r5, #0]
 8005a78:	0606      	lsls	r6, r0, #24
 8005a7a:	f101 0304 	add.w	r3, r1, #4
 8005a7e:	d50a      	bpl.n	8005a96 <_printf_i+0xce>
 8005a80:	680e      	ldr	r6, [r1, #0]
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	2e00      	cmp	r6, #0
 8005a86:	da03      	bge.n	8005a90 <_printf_i+0xc8>
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	4276      	negs	r6, r6
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	485e      	ldr	r0, [pc, #376]	; (8005c0c <_printf_i+0x244>)
 8005a92:	230a      	movs	r3, #10
 8005a94:	e019      	b.n	8005aca <_printf_i+0x102>
 8005a96:	680e      	ldr	r6, [r1, #0]
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a9e:	bf18      	it	ne
 8005aa0:	b236      	sxthne	r6, r6
 8005aa2:	e7ef      	b.n	8005a84 <_printf_i+0xbc>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	1d19      	adds	r1, r3, #4
 8005aaa:	6029      	str	r1, [r5, #0]
 8005aac:	0601      	lsls	r1, r0, #24
 8005aae:	d501      	bpl.n	8005ab4 <_printf_i+0xec>
 8005ab0:	681e      	ldr	r6, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <_printf_i+0xf2>
 8005ab4:	0646      	lsls	r6, r0, #25
 8005ab6:	d5fb      	bpl.n	8005ab0 <_printf_i+0xe8>
 8005ab8:	881e      	ldrh	r6, [r3, #0]
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <_printf_i+0x244>)
 8005abc:	2f6f      	cmp	r7, #111	; 0x6f
 8005abe:	bf0c      	ite	eq
 8005ac0:	2308      	moveq	r3, #8
 8005ac2:	230a      	movne	r3, #10
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aca:	6865      	ldr	r5, [r4, #4]
 8005acc:	60a5      	str	r5, [r4, #8]
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	bfa2      	ittt	ge
 8005ad2:	6821      	ldrge	r1, [r4, #0]
 8005ad4:	f021 0104 	bicge.w	r1, r1, #4
 8005ad8:	6021      	strge	r1, [r4, #0]
 8005ada:	b90e      	cbnz	r6, 8005ae0 <_printf_i+0x118>
 8005adc:	2d00      	cmp	r5, #0
 8005ade:	d04d      	beq.n	8005b7c <_printf_i+0x1b4>
 8005ae0:	4615      	mov	r5, r2
 8005ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aea:	5dc7      	ldrb	r7, [r0, r7]
 8005aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005af0:	4637      	mov	r7, r6
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	460e      	mov	r6, r1
 8005af6:	d9f4      	bls.n	8005ae2 <_printf_i+0x11a>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10b      	bne.n	8005b14 <_printf_i+0x14c>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	07de      	lsls	r6, r3, #31
 8005b00:	d508      	bpl.n	8005b14 <_printf_i+0x14c>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6861      	ldr	r1, [r4, #4]
 8005b06:	4299      	cmp	r1, r3
 8005b08:	bfde      	ittt	le
 8005b0a:	2330      	movle	r3, #48	; 0x30
 8005b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b14:	1b52      	subs	r2, r2, r5
 8005b16:	6122      	str	r2, [r4, #16]
 8005b18:	f8cd a000 	str.w	sl, [sp]
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	aa03      	add	r2, sp, #12
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7ff fee2 	bl	80058ec <_printf_common>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d14c      	bne.n	8005bc6 <_printf_i+0x1fe>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b004      	add	sp, #16
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	4835      	ldr	r0, [pc, #212]	; (8005c0c <_printf_i+0x244>)
 8005b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b3c:	6829      	ldr	r1, [r5, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b44:	6029      	str	r1, [r5, #0]
 8005b46:	061d      	lsls	r5, r3, #24
 8005b48:	d514      	bpl.n	8005b74 <_printf_i+0x1ac>
 8005b4a:	07df      	lsls	r7, r3, #31
 8005b4c:	bf44      	itt	mi
 8005b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b52:	6023      	strmi	r3, [r4, #0]
 8005b54:	b91e      	cbnz	r6, 8005b5e <_printf_i+0x196>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f023 0320 	bic.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	2310      	movs	r3, #16
 8005b60:	e7b0      	b.n	8005ac4 <_printf_i+0xfc>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	2378      	movs	r3, #120	; 0x78
 8005b6c:	4828      	ldr	r0, [pc, #160]	; (8005c10 <_printf_i+0x248>)
 8005b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b72:	e7e3      	b.n	8005b3c <_printf_i+0x174>
 8005b74:	0659      	lsls	r1, r3, #25
 8005b76:	bf48      	it	mi
 8005b78:	b2b6      	uxthmi	r6, r6
 8005b7a:	e7e6      	b.n	8005b4a <_printf_i+0x182>
 8005b7c:	4615      	mov	r5, r2
 8005b7e:	e7bb      	b.n	8005af8 <_printf_i+0x130>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	6826      	ldr	r6, [r4, #0]
 8005b84:	6961      	ldr	r1, [r4, #20]
 8005b86:	1d18      	adds	r0, r3, #4
 8005b88:	6028      	str	r0, [r5, #0]
 8005b8a:	0635      	lsls	r5, r6, #24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0x1cc>
 8005b90:	6019      	str	r1, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0x1d2>
 8005b94:	0670      	lsls	r0, r6, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0x1c8>
 8005b98:	8019      	strh	r1, [r3, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	4615      	mov	r5, r2
 8005ba0:	e7ba      	b.n	8005b18 <_printf_i+0x150>
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	602a      	str	r2, [r5, #0]
 8005ba8:	681d      	ldr	r5, [r3, #0]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7fa fb16 	bl	80001e0 <memchr>
 8005bb4:	b108      	cbz	r0, 8005bba <_printf_i+0x1f2>
 8005bb6:	1b40      	subs	r0, r0, r5
 8005bb8:	6060      	str	r0, [r4, #4]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	e7a8      	b.n	8005b18 <_printf_i+0x150>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0ab      	beq.n	8005b2c <_printf_i+0x164>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	079b      	lsls	r3, r3, #30
 8005bd8:	d413      	bmi.n	8005c02 <_printf_i+0x23a>
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	4298      	cmp	r0, r3
 8005be0:	bfb8      	it	lt
 8005be2:	4618      	movlt	r0, r3
 8005be4:	e7a4      	b.n	8005b30 <_printf_i+0x168>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4632      	mov	r2, r6
 8005bea:	4649      	mov	r1, r9
 8005bec:	4640      	mov	r0, r8
 8005bee:	47d0      	blx	sl
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d09b      	beq.n	8005b2c <_printf_i+0x164>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	9903      	ldr	r1, [sp, #12]
 8005bfa:	1a5b      	subs	r3, r3, r1
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dcf2      	bgt.n	8005be6 <_printf_i+0x21e>
 8005c00:	e7eb      	b.n	8005bda <_printf_i+0x212>
 8005c02:	2500      	movs	r5, #0
 8005c04:	f104 0619 	add.w	r6, r4, #25
 8005c08:	e7f5      	b.n	8005bf6 <_printf_i+0x22e>
 8005c0a:	bf00      	nop
 8005c0c:	08005f55 	.word	0x08005f55
 8005c10:	08005f66 	.word	0x08005f66

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_free_r>:
 8005c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d044      	beq.n	8005cf4 <_free_r+0x90>
 8005c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6e:	9001      	str	r0, [sp, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f1a1 0404 	sub.w	r4, r1, #4
 8005c76:	bfb8      	it	lt
 8005c78:	18e4      	addlt	r4, r4, r3
 8005c7a:	f000 f913 	bl	8005ea4 <__malloc_lock>
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <_free_r+0x94>)
 8005c80:	9801      	ldr	r0, [sp, #4]
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b933      	cbnz	r3, 8005c94 <_free_r+0x30>
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	b003      	add	sp, #12
 8005c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c90:	f000 b90e 	b.w	8005eb0 <__malloc_unlock>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x46>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf01      	itttt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	1949      	addeq	r1, r1, r5
 8005ca6:	6021      	streq	r1, [r4, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_free_r+0x22>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x50>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x46>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1855      	adds	r5, r2, r1
 8005cb8:	42a5      	cmp	r5, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x70>
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	4421      	add	r1, r4
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1e0      	bne.n	8005c8a <_free_r+0x26>
 8005cc8:	681c      	ldr	r4, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	4421      	add	r1, r4
 8005cd0:	6011      	str	r1, [r2, #0]
 8005cd2:	e7da      	b.n	8005c8a <_free_r+0x26>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x78>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	e7d6      	b.n	8005c8a <_free_r+0x26>
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf04      	itt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	6063      	str	r3, [r4, #4]
 8005cea:	bf04      	itt	eq
 8005cec:	1949      	addeq	r1, r1, r5
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	6054      	str	r4, [r2, #4]
 8005cf2:	e7ca      	b.n	8005c8a <_free_r+0x26>
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	2000023c 	.word	0x2000023c

08005cfc <sbrk_aligned>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4e0e      	ldr	r6, [pc, #56]	; (8005d38 <sbrk_aligned+0x3c>)
 8005d00:	460c      	mov	r4, r1
 8005d02:	6831      	ldr	r1, [r6, #0]
 8005d04:	4605      	mov	r5, r0
 8005d06:	b911      	cbnz	r1, 8005d0e <sbrk_aligned+0x12>
 8005d08:	f000 f8bc 	bl	8005e84 <_sbrk_r>
 8005d0c:	6030      	str	r0, [r6, #0]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 f8b7 	bl	8005e84 <_sbrk_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	d00a      	beq.n	8005d30 <sbrk_aligned+0x34>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d007      	beq.n	8005d34 <sbrk_aligned+0x38>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f8ac 	bl	8005e84 <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d101      	bne.n	8005d34 <sbrk_aligned+0x38>
 8005d30:	f04f 34ff 	mov.w	r4, #4294967295
 8005d34:	4620      	mov	r0, r4
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	20000240 	.word	0x20000240

08005d3c <_malloc_r>:
 8005d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d40:	1ccd      	adds	r5, r1, #3
 8005d42:	f025 0503 	bic.w	r5, r5, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	2d0c      	cmp	r5, #12
 8005d4a:	bf38      	it	cc
 8005d4c:	250c      	movcc	r5, #12
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	4607      	mov	r7, r0
 8005d52:	db01      	blt.n	8005d58 <_malloc_r+0x1c>
 8005d54:	42a9      	cmp	r1, r5
 8005d56:	d905      	bls.n	8005d64 <_malloc_r+0x28>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d64:	4e2e      	ldr	r6, [pc, #184]	; (8005e20 <_malloc_r+0xe4>)
 8005d66:	f000 f89d 	bl	8005ea4 <__malloc_lock>
 8005d6a:	6833      	ldr	r3, [r6, #0]
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	bb34      	cbnz	r4, 8005dbe <_malloc_r+0x82>
 8005d70:	4629      	mov	r1, r5
 8005d72:	4638      	mov	r0, r7
 8005d74:	f7ff ffc2 	bl	8005cfc <sbrk_aligned>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	d14d      	bne.n	8005e1a <_malloc_r+0xde>
 8005d7e:	6834      	ldr	r4, [r6, #0]
 8005d80:	4626      	mov	r6, r4
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d140      	bne.n	8005e08 <_malloc_r+0xcc>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	eb04 0803 	add.w	r8, r4, r3
 8005d90:	f000 f878 	bl	8005e84 <_sbrk_r>
 8005d94:	4580      	cmp	r8, r0
 8005d96:	d13a      	bne.n	8005e0e <_malloc_r+0xd2>
 8005d98:	6821      	ldr	r1, [r4, #0]
 8005d9a:	3503      	adds	r5, #3
 8005d9c:	1a6d      	subs	r5, r5, r1
 8005d9e:	f025 0503 	bic.w	r5, r5, #3
 8005da2:	3508      	adds	r5, #8
 8005da4:	2d0c      	cmp	r5, #12
 8005da6:	bf38      	it	cc
 8005da8:	250c      	movcc	r5, #12
 8005daa:	4629      	mov	r1, r5
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ffa5 	bl	8005cfc <sbrk_aligned>
 8005db2:	3001      	adds	r0, #1
 8005db4:	d02b      	beq.n	8005e0e <_malloc_r+0xd2>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	442b      	add	r3, r5
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	e00e      	b.n	8005ddc <_malloc_r+0xa0>
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	1b52      	subs	r2, r2, r5
 8005dc2:	d41e      	bmi.n	8005e02 <_malloc_r+0xc6>
 8005dc4:	2a0b      	cmp	r2, #11
 8005dc6:	d916      	bls.n	8005df6 <_malloc_r+0xba>
 8005dc8:	1961      	adds	r1, r4, r5
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	6025      	str	r5, [r4, #0]
 8005dce:	bf18      	it	ne
 8005dd0:	6059      	strne	r1, [r3, #4]
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	bf08      	it	eq
 8005dd6:	6031      	streq	r1, [r6, #0]
 8005dd8:	5162      	str	r2, [r4, r5]
 8005dda:	604b      	str	r3, [r1, #4]
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f104 060b 	add.w	r6, r4, #11
 8005de2:	f000 f865 	bl	8005eb0 <__malloc_unlock>
 8005de6:	f026 0607 	bic.w	r6, r6, #7
 8005dea:	1d23      	adds	r3, r4, #4
 8005dec:	1af2      	subs	r2, r6, r3
 8005dee:	d0b6      	beq.n	8005d5e <_malloc_r+0x22>
 8005df0:	1b9b      	subs	r3, r3, r6
 8005df2:	50a3      	str	r3, [r4, r2]
 8005df4:	e7b3      	b.n	8005d5e <_malloc_r+0x22>
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	bf0c      	ite	eq
 8005dfc:	6032      	streq	r2, [r6, #0]
 8005dfe:	605a      	strne	r2, [r3, #4]
 8005e00:	e7ec      	b.n	8005ddc <_malloc_r+0xa0>
 8005e02:	4623      	mov	r3, r4
 8005e04:	6864      	ldr	r4, [r4, #4]
 8005e06:	e7b2      	b.n	8005d6e <_malloc_r+0x32>
 8005e08:	4634      	mov	r4, r6
 8005e0a:	6876      	ldr	r6, [r6, #4]
 8005e0c:	e7b9      	b.n	8005d82 <_malloc_r+0x46>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	4638      	mov	r0, r7
 8005e14:	f000 f84c 	bl	8005eb0 <__malloc_unlock>
 8005e18:	e7a1      	b.n	8005d5e <_malloc_r+0x22>
 8005e1a:	6025      	str	r5, [r4, #0]
 8005e1c:	e7de      	b.n	8005ddc <_malloc_r+0xa0>
 8005e1e:	bf00      	nop
 8005e20:	2000023c 	.word	0x2000023c

08005e24 <_realloc_r>:
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	4680      	mov	r8, r0
 8005e2a:	4614      	mov	r4, r2
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	b921      	cbnz	r1, 8005e3a <_realloc_r+0x16>
 8005e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4611      	mov	r1, r2
 8005e36:	f7ff bf81 	b.w	8005d3c <_malloc_r>
 8005e3a:	b92a      	cbnz	r2, 8005e48 <_realloc_r+0x24>
 8005e3c:	f7ff ff12 	bl	8005c64 <_free_r>
 8005e40:	4625      	mov	r5, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e48:	f000 f838 	bl	8005ebc <_malloc_usable_size_r>
 8005e4c:	4284      	cmp	r4, r0
 8005e4e:	4607      	mov	r7, r0
 8005e50:	d802      	bhi.n	8005e58 <_realloc_r+0x34>
 8005e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e56:	d812      	bhi.n	8005e7e <_realloc_r+0x5a>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	f7ff ff6e 	bl	8005d3c <_malloc_r>
 8005e60:	4605      	mov	r5, r0
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d0ed      	beq.n	8005e42 <_realloc_r+0x1e>
 8005e66:	42bc      	cmp	r4, r7
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	bf28      	it	cs
 8005e6e:	463a      	movcs	r2, r7
 8005e70:	f7ff fed0 	bl	8005c14 <memcpy>
 8005e74:	4631      	mov	r1, r6
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fef4 	bl	8005c64 <_free_r>
 8005e7c:	e7e1      	b.n	8005e42 <_realloc_r+0x1e>
 8005e7e:	4635      	mov	r5, r6
 8005e80:	e7df      	b.n	8005e42 <_realloc_r+0x1e>
	...

08005e84 <_sbrk_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d06      	ldr	r5, [pc, #24]	; (8005ea0 <_sbrk_r+0x1c>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	f7fa ff36 	bl	8000d00 <_sbrk>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_sbrk_r+0x1a>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_sbrk_r+0x1a>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20000244 	.word	0x20000244

08005ea4 <__malloc_lock>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__malloc_lock+0x8>)
 8005ea6:	f000 b811 	b.w	8005ecc <__retarget_lock_acquire_recursive>
 8005eaa:	bf00      	nop
 8005eac:	20000248 	.word	0x20000248

08005eb0 <__malloc_unlock>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	; (8005eb8 <__malloc_unlock+0x8>)
 8005eb2:	f000 b80c 	b.w	8005ece <__retarget_lock_release_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	20000248 	.word	0x20000248

08005ebc <_malloc_usable_size_r>:
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f18      	subs	r0, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbc      	itt	lt
 8005ec6:	580b      	ldrlt	r3, [r1, r0]
 8005ec8:	18c0      	addlt	r0, r0, r3
 8005eca:	4770      	bx	lr

08005ecc <__retarget_lock_acquire_recursive>:
 8005ecc:	4770      	bx	lr

08005ece <__retarget_lock_release_recursive>:
 8005ece:	4770      	bx	lr

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
